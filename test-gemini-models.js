// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Gemini
require('dotenv').config({ path: '.env.local' });

async function testGeminiModels() {
  console.log('üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini...');
  
  const apiKey = process.env.GEMINI_API_KEY;
  
  if (!apiKey || apiKey === '–í–ê–®_GEMINI_–ö–õ–Æ–ß_–ó–î–ï–°–¨') {
    console.log('‚ùå Gemini API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
    return;
  }
  
  try {
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${apiKey}`);
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:');
      data.models.forEach(model => {
        console.log(`- ${model.name} (${model.displayName || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'})`);
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ API:', response.status, response.statusText);
      const errorText = await response.text();
      console.log('üìù –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorText);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
  }
}

testGeminiModels();





