// –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–æ–≤
const { parseTelegramChannels } = require('./src/lib/parsers/telegram/enhanced-parser');
const { parseLinkedInVacancies } = require('./src/lib/parsers/linkedin/parser');

async function testDirectParsers() {
  console.log('üß™ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–æ–≤...');
  
  try {
    // –¢–µ—Å—Ç Telegram –ø–∞—Ä—Å–µ—Ä–∞
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram –ø–∞—Ä—Å–µ—Ä...');
    const telegramVacancies = await parseTelegramChannels([
      'designhunters',
      'designjobs',
      'itjobs',
      'startupjobs'
    ], 10);
    
    console.log(`üìä Telegram: ${telegramVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    if (telegramVacancies.length > 0) {
      telegramVacancies.slice(0, 3).forEach((vacancy, index) => {
        console.log(`${index + 1}. ${vacancy.title} (${vacancy.source})`);
      });
    }
    
    // –¢–µ—Å—Ç LinkedIn –ø–∞—Ä—Å–µ—Ä–∞
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º LinkedIn –ø–∞—Ä—Å–µ—Ä...');
    const linkedinVacancies = await parseLinkedInVacancies('–¥–∏–∑–∞–π–Ω–µ—Ä', 2);
    
    console.log(`üìä LinkedIn: ${linkedinVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    if (linkedinVacancies.length > 0) {
      linkedinVacancies.slice(0, 3).forEach((vacancy, index) => {
        console.log(`${index + 1}. ${vacancy.title} (${vacancy.source})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤:', error.message);
  }
}

testDirectParsers();















