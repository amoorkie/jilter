// –¢–µ—Å—Ç –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º HTML
const axios = require('axios');
const cheerio = require('cheerio');

async function testAllSources() {
  console.log('üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
  
  const sources = [
    {
      name: 'HH.ru',
      url: 'https://hh.ru/search/vacancy?text=–¥–∏–∑–∞–π–Ω–µ—Ä&area=1&ored_clusters=true&enable_snippets=true&salary=&experience=noExperience&schedule=fullDay&employment=full&employment=part&employment=project&employment=volunteer&employment=internship&L_search%20period=3&page=0'
    },
    {
      name: '–•–∞–±—Ä –ö–∞—Ä—å–µ—Ä–∞',
      url: 'https://career.habr.com/vacancies?type=suitable&q=–¥–∏–∑–∞–π–Ω–µ—Ä&page=1'
    },
    {
      name: 'Geekjob',
      url: 'https://geekjob.ru/?q=–¥–∏–∑–∞–π–Ω–µ—Ä&page=1'
    },
    {
      name: 'HireHi',
      url: 'https://hirehi.ru/?q=–¥–∏–∑–∞–π–Ω–µ—Ä&page=1'
    },
    {
      name: 'Designer.ru',
      url: 'https://designer.ru/'
    },
    {
      name: 'GetMatch',
      url: 'https://getmatch.ru/vacancies?p=1&sa=150000&l=remote&l=moscow&sp=product_design&pa=all&q=–¥–∏–∑–∞–π–Ω–µ—Ä'
    }
  ];
  
  for (const source of sources) {
    try {
      console.log(`\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${source.name}...`);
      console.log(`üì° URL: ${source.url}`);
      
      const response = await axios.get(source.url, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
          'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3'
        }
      });
      
      console.log(`üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${response.data.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      
      const $ = cheerio.load(response.data);
      
      // –ò—â–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π
      const vacancySelectors = [
        '.serp-item',
        '.vacancy-card',
        '.vacancy-item',
        '.job-card',
        '[data-vacancy]',
        '.vacancy',
        '.collection-item',
        '.item',
        '.card'
      ];
      
      let foundSelectors = [];
      for (const selector of vacancySelectors) {
        const elements = $(selector);
        if (elements.length > 0) {
          foundSelectors.push({ selector, count: elements.length });
        }
      }
      
      if (foundSelectors.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–µ–ª–µ–∫—Ç–æ—Ä—ã:`);
        foundSelectors.forEach(({ selector, count }) => {
          console.log(`   ${selector}: ${count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        });
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        const bestSelector = foundSelectors[0];
        const elements = $(bestSelector.selector);
        const firstElement = elements.first();
        
        console.log(`\nüìã HTML –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (${bestSelector.selector}):`);
        console.log(firstElement.html().substring(0, 800) + '...');
        
        // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
        const vacancyLinks = firstElement.find('a[href*="/vacancy/"], a[href*="/job/"], a[href*="/vacancies/"]');
        console.log(`\nüîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏: ${vacancyLinks.length}`);
        
        vacancyLinks.each((i, link) => {
          const href = $(link).attr('href');
          const text = $(link).text().trim();
          if (href && text) {
            console.log(`   ${i + 1}. "${text}" -> ${href}`);
          }
        });
        
        // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const headings = firstElement.find('h1, h2, h3, h4, h5, h6, .title, .name');
        console.log(`\nüìù –ù–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: ${headings.length}`);
        
        headings.each((i, heading) => {
          const text = $(heading).text().trim();
          if (text) {
            console.log(`   ${i + 1}. "${text}"`);
          }
        });
        
      } else {
        console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π`);
        
        // –ò—â–µ–º –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏
        const allLinks = $('a');
        console.log(`üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${allLinks.length}`);
        
        // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ —Å –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
        const designLinks = $('a').filter((i, el) => {
          const text = $(el).text().toLowerCase();
          return text.includes('–¥–∏–∑–∞–π–Ω') || text.includes('designer') || text.includes('ui') || text.includes('ux');
        });
        
        console.log(`üé® –°—Å—ã–ª–∫–∏ —Å –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏: ${designLinks.length}`);
        designLinks.each((i, link) => {
          const href = $(link).attr('href');
          const text = $(link).text().trim();
          if (href && text) {
            console.log(`   ${i + 1}. "${text}" -> ${href}`);
          }
        });
      }
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ ${source.name}: ${error.message}`);
      if (error.response) {
        console.log(`   –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.log(`   URL: ${error.response.config.url}`);
      }
    }
  }
}

testAllSources();















