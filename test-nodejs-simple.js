#!/usr/bin/env node
/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Node.js –ø–∞—Ä—Å–µ—Ä–∞ —á–µ—Ä–µ–∑ API
 */

const http = require('http');

async function testNodeJSParserViaAPI() {
  console.log('=== –¢–ï–°–¢ NODE.JS –ü–ê–†–°–ï–†–ê –ß–ï–†–ï–ó API ===');
  
  const startTime = Date.now();
  
  try {
    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –ø–∞—Ä—Å–∏–Ω–≥–∞
    const response = await fetch('http://localhost:3000/api/force-parse', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Node.js –ø–∞—Ä—Å–µ—Ä–∞ (—á–µ—Ä–µ–∑ API):`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${data.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}`);
    console.log(`   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
    
    if (data.stats) {
      console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      console.log(`   –í—Å–µ–≥–æ: ${data.stats.total}`);
      console.log(`   –û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: ${data.stats.pending}`);
      console.log(`   –û–¥–æ–±—Ä–µ–Ω–æ: ${data.stats.approved}`);
      
      if (data.stats.sources) {
        console.log(`\nüìã –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:`);
        Object.entries(data.stats.sources).forEach(([source, count]) => {
          console.log(`   ${source}: ${count} –≤–∞–∫–∞–Ω—Å–∏–π`);
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Node.js –ø–∞—Ä—Å–µ—Ä–∞:', error.message);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
async function checkServer() {
  try {
    const response = await fetch('http://localhost:3000/api/health');
    return response.ok;
  } catch {
    return false;
  }
}

async function main() {
  const serverRunning = await checkServer();
  
  if (!serverRunning) {
    console.log('‚ùå Next.js —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:3000');
    console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: npm run dev');
    return;
  }
  
  await testNodeJSParserViaAPI();
}

main().catch(console.error);











