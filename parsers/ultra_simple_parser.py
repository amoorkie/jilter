#!/usr/bin/env python3
"""
–£–ª—å—Ç—Ä–∞-–ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

from bs4 import BeautifulSoup
import re


def test_ultra_simple():
    """
    –£–ª—å—Ç—Ä–∞-–ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
    """
    html = '''
    <div class="vacancy-description">
        <h3>–ù–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É:</h3>
        <ul>
            <li>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –¥–∏–∑–∞–π–Ω–µ –æ—Ç 2 –ª–µ—Ç</li>
            <li>–ó–Ω–∞–Ω–∏–µ Figma, Adobe Creative Suite</li>
        </ul>
        
        <h3>–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:</h3>
        <ul>
            <li>–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞</li>
            <li>–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫</li>
        </ul>
        
        <h3>–ó–∞–¥–∞—á–∏:</h3>
        <p>–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤</p>
    </div>
    '''
    
    soup = BeautifulSoup(html, 'html.parser')
    element = soup.select_one('.vacancy-description')
    
    print('üîç –£–õ–¨–¢–†–ê-–ü–†–û–°–¢–û–ô –¢–ï–°–¢:')
    print('='*50)
    
    if not element:
        print("‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print("‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω")
    print(f"HTML: {str(element)[:200]}...")
    
    # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    headers = element.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])
    print(f"\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {len(headers)}")
    
    for i, header in enumerate(headers):
        print(f"  {i+1}. {header.get_text(strip=True)}")
    
    # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤
    lists = element.find_all(['ul', 'ol'])
    print(f"\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏: {len(lists)}")
    
    for i, list_elem in enumerate(lists):
        items = list_elem.find_all('li')
        print(f"  {i+1}. –°–ø–∏—Å–æ–∫ —Å {len(items)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
        for j, item in enumerate(items):
            print(f"     {j+1}. {item.get_text(strip=True)}")
    
    # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–±–∑–∞—Ü–µ–≤
    paragraphs = element.find_all(['p', 'div'])
    print(f"\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–±–∑–∞—Ü—ã: {len(paragraphs)}")
    
    for i, p in enumerate(paragraphs):
        text = p.get_text(strip=True)
        if text and not any(child.name in ['ul', 'ol'] for child in p.children):
            print(f"  {i+1}. {text[:100]}...")
    
    print("\nüéØ –†–£–ß–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:")
    print('-' * 30)
    
    # –†—É—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–ª–æ–∫–∞–º
    result = {
        'requirements': '',
        'conditions': '',
        'tasks': '',
        'full_description': ''
    }
    
    # –ò—â–µ–º –±–ª–æ–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    for header in headers:
        title = header.get_text(strip=True).lower()
        content = []
        
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        next_elem = header.find_next_sibling()
        while next_elem and next_elem.name not in ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']:
            if next_elem.name in ['ul', 'ol']:
                for li in next_elem.find_all('li'):
                    content.append(f"‚Ä¢ {li.get_text(strip=True)}")
            elif next_elem.name in ['p', 'div']:
                text = next_elem.get_text(strip=True)
                if text:
                    content.append(text)
            next_elem = next_elem.find_next_sibling()
        
        content_text = '\n'.join(content)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if '–ø–æ–∂–µ–ª–∞–Ω–∏—è' in title or '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è' in title:
            result['requirements'] = f"{header.get_text(strip=True)}:\n{content_text}"
            print(f"‚úÖ {header.get_text(strip=True)} ‚Üí requirements")
        elif '–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º' in title or '—É—Å–ª–æ–≤–∏—è' in title:
            result['conditions'] = f"{header.get_text(strip=True)}:\n{content_text}"
            print(f"‚úÖ {header.get_text(strip=True)} ‚Üí conditions")
        elif '–∑–∞–¥–∞—á–∏' in title or '–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏' in title:
            result['tasks'] = f"{header.get_text(strip=True)}:\n{content_text}"
            print(f"‚úÖ {header.get_text(strip=True)} ‚Üí tasks")
        else:
            result['full_description'] += f"{header.get_text(strip=True)}:\n{content_text}\n\n"
            print(f"‚úÖ {header.get_text(strip=True)} ‚Üí full_description")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print('-' * 20)
    
    for key, value in result.items():
        print(f"\nüîπ {key.upper()}:")
        print(f"–î–ª–∏–Ω–∞: {len(value)} —Å–∏–º–≤–æ–ª–æ–≤")
        if value:
            print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
            print(value)
        else:
            print("(–ø—É—Å—Ç–æ)")


if __name__ == "__main__":
    test_ultra_simple()










