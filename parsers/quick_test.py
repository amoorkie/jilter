#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞
"""

from bs4 import BeautifulSoup
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(__file__))

# –ü—Ä–æ—Å—Ç–æ–π HTML –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
html = '''
<div class="vacancy-description">
    <h3>–ù–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É:</h3>
    <ul>
        <li>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –¥–∏–∑–∞–π–Ω–µ –æ—Ç 2 –ª–µ—Ç</li>
        <li>–ó–Ω–∞–Ω–∏–µ Figma, Adobe Creative Suite</li>
        <li>–ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ UX/UI</li>
    </ul>
    
    <h3>–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:</h3>
    <p>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, –¥—Ä—É–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞.</p>
    <ul>
        <li>–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞</li>
        <li>–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫</li>
        <li>–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞</li>
    </ul>
    
    <h3>–ó–∞–¥–∞—á–∏:</h3>
    <p>–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, —Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, —É—á–∞—Å—Ç–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.</p>
</div>
'''

def test_approaches():
    soup = BeautifulSoup(html, 'html.parser')
    element = soup.select_one('.vacancy-description')
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–•–û–î–û–í –ö –ò–ó–í–õ–ï–ß–ï–ù–ò–Æ –¢–ï–ö–°–¢–ê")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    print("\nüîµ –ü–û–î–•–û–î 1: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π (—Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ –±–ª–æ–∫–∏)")
    print("-" * 50)
    try:
        from text_formatter import extract_formatted_text
        result1 = extract_formatted_text(element)
        print(f"üìä –î–ª–∏–Ω–∞: {len(result1)} —Å–∏–º–≤–æ–ª–æ–≤")
        print("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(result1)
        print()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –í–∞—Ä–∏–∞–Ω—Ç 1 (–≤–µ—Å—å —Ç–µ–∫—Å—Ç)
    print("\nüü¢ –ü–û–î–•–û–î 2: –í–µ—Å—å —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–±–∏–µ–Ω–∏—è")
    print("-" * 50)
    try:
        from text_formatter_v1 import extract_simple_text
        result2 = extract_simple_text(element)
        print(f"üìä –î–ª–∏–Ω–∞: {len(result2)} —Å–∏–º–≤–æ–ª–æ–≤")
        print("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(result2)
        print()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –í–∞—Ä–∏–∞–Ω—Ç 2 (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    print("\nüü° –ü–û–î–•–û–î 3: –¢–æ–ª—å–∫–æ –∞–±–∑–∞—Ü—ã –∏ —Å–ø–∏—Å–∫–∏ (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)")
    print("-" * 50)
    try:
        from text_formatter_v2 import extract_content_without_headers
        result3 = extract_content_without_headers(element)
        print(f"üìä –î–ª–∏–Ω–∞: {len(result3)} —Å–∏–º–≤–æ–ª–æ–≤")
        print("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(result3)
        print()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)
    
    results = []
    try:
        results.append(("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π", len(result1) if 'result1' in locals() else 0))
    except:
        results.append(("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π", 0))
    
    try:
        results.append(("–í–∞—Ä–∏–∞–Ω—Ç 1", len(result2) if 'result2' in locals() else 0))
    except:
        results.append(("–í–∞—Ä–∏–∞–Ω—Ç 1", 0))
    
    try:
        results.append(("–í–∞—Ä–∏–∞–Ω—Ç 2", len(result3) if 'result3' in locals() else 0))
    except:
        results.append(("–í–∞—Ä–∏–∞–Ω—Ç 2", 0))
    
    for name, length in results:
        print(f"{name:15}: {length:3} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print("\nüéØ –ê–ù–ê–õ–ò–ó:")
    print("-" * 30)
    print("‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 1 (–≤–µ—Å—å —Ç–µ–∫—Å—Ç) - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
    print("‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 2 (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤) - —É–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏")
    print("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π - —Ä–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏")

if __name__ == "__main__":
    test_approaches()










