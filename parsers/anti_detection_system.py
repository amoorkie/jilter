#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞

–í–∫–ª—é—á–∞–µ—Ç:
- –†–æ—Ç–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏
- –†–æ—Ç–∞—Ü–∏—é User-Agent
- –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏
- –û–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–ø—á–∏
- Browser automation —Å Playwright

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import os
import sys
import time
import random
import json
import logging
import requests
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Any, Tuple
from urllib.parse import urljoin, quote
from bs4 import BeautifulSoup
import hashlib
import base64
from dataclasses import dataclass
from enum import Enum

# Playwright –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
try:
    from playwright.async_api import async_playwright, Browser, BrowserContext, Page
    PLAYWRIGHT_AVAILABLE = True
except ImportError:
    PLAYWRIGHT_AVAILABLE = False
    print("WARNING: Playwright not installed. Install with: pip install playwright")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RequestMethod(Enum):
    REQUESTS = "requests"
    PLAYWRIGHT = "playwright"

@dataclass
class ProxyConfig:
    host: str
    port: int
    username: Optional[str] = None
    password: Optional[str] = None
    protocol: str = "http"
    
    def to_dict(self) -> Dict[str, str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è requests"""
        proxy_url = f"{self.protocol}://"
        if self.username and self.password:
            proxy_url += f"{self.username}:{self.password}@"
        proxy_url += f"{self.host}:{self.port}"
        
        return {
            "http": proxy_url,
            "https": proxy_url
        }

@dataclass
class UserAgentConfig:
    user_agent: str
    accept: str
    accept_language: str
    accept_encoding: str
    connection: str = "keep-alive"
    upgrade_insecure_requests: str = "1"

class AntiDetectionSystem:
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    """
    
    def __init__(self, config_file: str = "anti_detection_config.json"):
        self.config_file = config_file
        self.config = self.load_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.proxies = self.load_proxies()
        self.user_agents = self.load_user_agents()
        self.sessions = {}
        self.request_history = []
        self.blocked_ips = set()
        self.captcha_handlers = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_requests": 0,
            "successful_requests": 0,
            "blocked_requests": 0,
            "proxy_rotations": 0,
            "user_agent_rotations": 0,
            "captcha_encounters": 0
        }
        
        logger.info("üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        default_config = {
            "request_delays": {
                "min": 1.0,
                "max": 3.0,
                "jitter": 0.5
            },
            "proxy_rotation": {
                "enabled": True,
                "rotation_interval": 10,  # –∑–∞–ø—Ä–æ—Å–æ–≤
                "health_check_interval": 30  # —Å–µ–∫—É–Ω–¥
            },
            "user_agent_rotation": {
                "enabled": True,
                "rotation_interval": 5  # –∑–∞–ø—Ä–æ—Å–æ–≤
            },
            "session_management": {
                "enabled": True,
                "session_lifetime": 3600,  # —Å–µ–∫—É–Ω–¥
                "max_requests_per_session": 50
            },
            "captcha_handling": {
                "enabled": True,
                "max_attempts": 3,
                "cooldown_period": 300  # —Å–µ–∫—É–Ω–¥
            },
            "browser_automation": {
                "enabled": True,
                "headless": True,
                "timeout": 30000
            }
        }
        
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                for key, value in default_config.items():
                    if key not in config:
                        config[key] = value
                return config
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        return default_config
    
    def load_proxies(self) -> List[ProxyConfig]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏"""
        proxies = []
        
        # –ü—Ä–æ–∫—Å–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        proxy_list = os.getenv('PROXY_LIST', '')
        if proxy_list:
            for proxy_str in proxy_list.split(','):
                try:
                    parts = proxy_str.strip().split(':')
                    if len(parts) >= 2:
                        host = parts[0]
                        port = int(parts[1])
                        username = parts[2] if len(parts) > 2 else None
                        password = parts[3] if len(parts) > 3 else None
                        proxies.append(ProxyConfig(host, port, username, password))
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–∫—Å–∏ {proxy_str}: {e}")
        
        # –ü—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞
        proxy_file = os.getenv('PROXY_FILE', 'proxies.txt')
        if os.path.exists(proxy_file):
            try:
                with open(proxy_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#'):
                            parts = line.split(':')
                            if len(parts) >= 2:
                                host = parts[0]
                                port = int(parts[1])
                                username = parts[2] if len(parts) > 2 else None
                                password = parts[3] if len(parts) > 3 else None
                                proxies.append(ProxyConfig(host, port, username, password))
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
        
        logger.info(f"üì° –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(proxies)} –ø—Ä–æ–∫—Å–∏")
        return proxies
    
    def load_user_agents(self) -> List[UserAgentConfig]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ User-Agent"""
        user_agents = [
            # Chrome –Ω–∞ Windows (2024-2025)
            UserAgentConfig(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
                accept="text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
                accept_language="ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                accept_encoding="gzip, deflate, br, zstd"
            ),
            UserAgentConfig(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36",
                accept="text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
                accept_language="ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                accept_encoding="gzip, deflate, br, zstd"
            ),
            # Chrome –Ω–∞ macOS
            UserAgentConfig(
                user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
                accept="text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
                accept_language="ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                accept_encoding="gzip, deflate, br, zstd"
            ),
            # Firefox –Ω–∞ Windows (2024-2025)
            UserAgentConfig(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:132.0) Gecko/20100101 Firefox/132.0",
                accept="text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
                accept_language="ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                accept_encoding="gzip, deflate, br, zstd"
            ),
            UserAgentConfig(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0",
                accept="text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
                accept_language="ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                accept_encoding="gzip, deflate, br, zstd"
            ),
            # Safari –Ω–∞ macOS (2024-2025)
            UserAgentConfig(
                user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.1 Safari/605.1.15",
                accept="text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
                accept_language="ru-RU,ru;q=0.9,en;q=0.8",
                accept_encoding="gzip, deflate, br"
            ),
            UserAgentConfig(
                user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15",
                accept="text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
                accept_language="ru-RU,ru;q=0.9,en;q=0.8",
                accept_encoding="gzip, deflate, br"
            ),
            # Edge –Ω–∞ Windows (2024-2025)
            UserAgentConfig(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0",
                accept="text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
                accept_language="ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                accept_encoding="gzip, deflate, br, zstd"
            ),
            UserAgentConfig(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 Edg/130.0.0.0",
                accept="text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
                accept_language="ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                accept_encoding="gzip, deflate, br, zstd"
            ),
            # Opera –Ω–∞ Windows
            UserAgentConfig(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 OPR/116.0.0.0",
                accept="text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
                accept_language="ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                accept_encoding="gzip, deflate, br, zstd"
            ),
            # Chrome –Ω–∞ Linux
            UserAgentConfig(
                user_agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
                accept="text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
                accept_language="ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                accept_encoding="gzip, deflate, br, zstd"
            ),
            # Firefox –Ω–∞ Linux
            UserAgentConfig(
                user_agent="Mozilla/5.0 (X11; Linux x86_64; rv:132.0) Gecko/20100101 Firefox/132.0",
                accept="text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
                accept_language="ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                accept_encoding="gzip, deflate, br, zstd"
            )
        ]
        
        logger.info(f"üåê –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_agents)} User-Agent")
        return user_agents
    
    def get_random_proxy(self) -> Optional[ProxyConfig]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏"""
        if not self.proxies:
            return None
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
        available_proxies = [p for p in self.proxies if p.host not in self.blocked_ips]
        if not available_proxies:
            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            self.blocked_ips.clear()
            available_proxies = self.proxies
        
        return random.choice(available_proxies)
    
    def get_random_user_agent(self) -> UserAgentConfig:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ User-Agent"""
        return random.choice(self.user_agents)
    
    def get_session(self, base_url: str) -> requests.Session:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        if base_url not in self.sessions:
            self.sessions[base_url] = requests.Session()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏
            session = self.sessions[base_url]
            session.headers.update({
                'User-Agent': self.get_random_user_agent().user_agent,
                'Accept': self.get_random_user_agent().accept,
                'Accept-Language': self.get_random_user_agent().accept_language,
                'Accept-Encoding': self.get_random_user_agent().accept_encoding,
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
                'Sec-Fetch-Dest': 'document',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-Site': 'none',
                'Cache-Control': 'max-age=0'
            })
        
        return self.sessions[base_url]
    
    def add_random_delay(self, delay_type: str = 'normal'):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
        delay_config = self.config['request_delays']
        
        if delay_type == 'fast':
            # –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (0.5-2 —Å–µ–∫)
            base_delay = random.uniform(0.5, 2.0)
        elif delay_type == 'slow':
            # –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (3-8 —Å–µ–∫)
            base_delay = random.uniform(3.0, 8.0)
        elif delay_type == 'human':
            # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (1-4 —Å–µ–∫ —Å –ø–∏–∫–∞–º–∏)
            if random.random() < 0.1:  # 10% —à–∞–Ω—Å –Ω–∞ –¥–ª–∏–Ω–Ω—É—é –ø–∞—É–∑—É
                base_delay = random.uniform(5.0, 12.0)
            else:
                base_delay = random.uniform(1.0, 4.0)
        else:  # normal
            base_delay = random.uniform(delay_config['min'], delay_config['max'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º jitter –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        jitter = random.uniform(-delay_config['jitter'], delay_config['jitter'])
        delay = max(0.1, base_delay + jitter)
        
        logger.debug(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ ({delay_type}): {delay:.2f}—Å")
        time.sleep(delay)
    
    def detect_blocking(self, response: requests.Response) -> bool:
        """–î–µ—Ç–µ–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ –æ—Ç–≤–µ—Ç—É"""
        if response.status_code == 403:
            return True
        if response.status_code == 429:
            return True
        if response.status_code == 503:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        content_lower = response.text.lower()
        blocking_indicators = [
            'access denied',
            'blocked',
            'captcha',
            'cloudflare',
            'ddos protection',
            'rate limited',
            'too many requests',
            '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
            '–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
            '–∫–∞–ø—á–∞'
        ]
        
        for indicator in blocking_indicators:
            if indicator in content_lower:
                return True
        
        return False
    
    def handle_captcha(self, response: requests.Response) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ø—á–∏"""
        if 'captcha' in response.text.lower() or '–∫–∞–ø—á–∞' in response.text.lower():
            logger.warning("ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞")
            self.stats['captcha_encounters'] += 1
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏
            # –ù–∞–ø—Ä–∏–º–µ—Ä, 2captcha, Anti-Captcha –∏ —Ç.–¥.
            
            return True
        return False
    
    async def make_request_with_playwright(self, url: str, **kwargs) -> Tuple[bool, str, Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ Playwright"""
        if not PLAYWRIGHT_AVAILABLE:
            logger.error("‚ùå Playwright –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False, "", {}
        
        try:
            async with async_playwright() as p:
                # –í—ã–±–æ—Ä –±—Ä–∞—É–∑–µ—Ä–∞
                browser_type = p.chromium
                
                # –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
                browser = await browser_type.launch(
                    headless=self.config['browser_automation']['headless'],
                    args=[
                        '--no-sandbox',
                        '--disable-blink-features=AutomationControlled',
                        '--disable-web-security',
                        '--disable-features=VizDisplayCompositor'
                    ]
                )
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                context = await browser.new_context(
                    user_agent=self.get_random_user_agent().user_agent,
                    viewport={'width': 1920, 'height': 1080},
                    locale='ru-RU',
                    timezone_id='Europe/Moscow'
                )
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                page = await context.new_page()
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–æ–≤
                await page.route("**/*", lambda route: route.continue_())
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
                response = await page.goto(url, timeout=self.config['browser_automation']['timeout'])
                
                if response:
                    content = await page.content()
                    status_code = response.status
                    
                    await browser.close()
                    
                    return True, content, {
                        'status_code': status_code,
                        'headers': dict(response.headers),
                        'method': 'playwright'
                    }
                else:
                    await browser.close()
                    return False, "", {}
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Playwright: {e}")
            return False, "", {}
    
    def make_request_with_requests(self, url: str, **kwargs) -> Tuple[bool, str, Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ requests"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            session = self.get_session(url)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
            proxy = self.get_random_proxy()
            if proxy:
                session.proxies.update(proxy.to_dict())
                logger.debug(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy.host}:{proxy.port}")
            
            # –†–æ—Ç–∞—Ü–∏—è User-Agent
            if self.stats['total_requests'] % self.config['user_agent_rotation']['rotation_interval'] == 0:
                ua_config = self.get_random_user_agent()
                session.headers.update({
                    'User-Agent': ua_config.user_agent,
                    'Accept': ua_config.accept,
                    'Accept-Language': ua_config.accept_language,
                    'Accept-Encoding': ua_config.accept_encoding
                })
                self.stats['user_agent_rotations'] += 1
                logger.debug("üîÑ –†–æ—Ç–∞—Ü–∏—è User-Agent")
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            response = session.get(url, timeout=30, **kwargs)
            self.stats['total_requests'] += 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if self.detect_blocking(response):
                logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –∫ {url}")
                self.stats['blocked_requests'] += 1
                
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏
                if proxy:
                    self.blocked_ips.add(proxy.host)
                    logger.warning(f"üö´ –ü—Ä–æ–∫—Å–∏ {proxy.host} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                
                return False, "", {}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–ø—á—É
            if self.handle_captcha(response):
                return False, "", {}
            
            self.stats['successful_requests'] += 1
            return True, response.text, {
                'status_code': response.status_code,
                'headers': dict(response.headers),
                'method': 'requests'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ requests: {e}")
            return False, "", {}
    
    async def make_request(self, url: str, method: RequestMethod = RequestMethod.REQUESTS, **kwargs) -> Tuple[bool, str, Dict[str, Any]]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        self.add_random_delay()
        
        # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞
        if method == RequestMethod.PLAYWRIGHT and PLAYWRIGHT_AVAILABLE:
            return await self.make_request_with_playwright(url, **kwargs)
        else:
            return self.make_request_with_requests(url, **kwargs)
    
    def make_request_sync(self, url: str, method: RequestMethod = RequestMethod.REQUESTS, **kwargs) -> requests.Response:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è make_request –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        self.add_random_delay('human')
        
        # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ requests —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π User-Agent
            ua_config = self.get_random_user_agent()
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            session = requests.Session()
            session.headers.update({
                'User-Agent': ua_config.user_agent,
                'Accept': ua_config.accept,
                'Accept-Language': ua_config.accept_language,
                'Accept-Encoding': ua_config.accept_encoding,
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
                'Sec-Fetch-Dest': 'document',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-Site': 'none',
                'Sec-Fetch-User': '?1',
                'Cache-Control': 'max-age=0',
                'DNT': '1',
                'Sec-Ch-Ua': '"Google Chrome";v="131", "Chromium";v="131", "Not_A Brand";v="24"',
                'Sec-Ch-Ua-Mobile': '?0',
                'Sec-Ch-Ua-Platform': '"Windows"'
            })
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = session.get(url, timeout=30, allow_redirects=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if self.detect_blocking(response):
                logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –∫ {url}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–µ–π–∫–æ–≤–æ–≥–æ Response
                return None
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ {url}")
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {e}")
            return None
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        success_rate = 0
        if self.stats['total_requests'] > 0:
            success_rate = (self.stats['successful_requests'] / self.stats['total_requests']) * 100
        
        return {
            **self.stats,
            'success_rate': success_rate,
            'blocked_ips_count': len(self.blocked_ips),
            'active_sessions': len(self.sessions)
        }
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
            logger.info("üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    anti_detection = AntiDetectionSystem()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    test_urls = [
        "https://httpbin.org/ip",
        "https://httpbin.org/user-agent",
        "https://httpbin.org/headers"
    ]
    
    for url in test_urls:
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {url}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º requests
        success, content, info = await anti_detection.make_request(url)
        if success:
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ requests: {info['status_code']}")
        else:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º Playwright
            logger.info("üîÑ –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Playwright...")
            success, content, info = await anti_detection.make_request(url, method=RequestMethod.PLAYWRIGHT)
            if success:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ Playwright: {info['status_code']}")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await asyncio.sleep(2)
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = anti_detection.get_stats()
    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")

if __name__ == "__main__":
    asyncio.run(main())
