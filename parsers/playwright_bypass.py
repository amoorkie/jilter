#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–¥—É–ª—å –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Å Playwright

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç:
- –ü–æ–ª–Ω—É—é —ç–º—É–ª—è—Ü–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
- –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
- –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏
- –û–±—Ö–æ–¥ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
- JavaScript –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import random
import time
import asyncio
from typing import Optional, Dict, Any
import logging
from playwright.async_api import async_playwright, Browser, BrowserContext, Page

logger = logging.getLogger(__name__)

class PlaywrightBypass:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Å Playwright"""
    
    def __init__(self):
        self.user_agents = [
            # –ú–æ–±–∏–ª—å–Ω—ã–µ User-Agent
            'Mozilla/5.0 (iPhone; CPU iPhone OS 17_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Mobile/15E148 Safari/604.1',
            'Mozilla/5.0 (Linux; Android 14; SM-G998B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36',
            
            # –î–µ—Å–∫—Ç–æ–ø–Ω—ã–µ User-Agent
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:132.0) Gecko/20100101 Firefox/132.0',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
        ]
        
        self.viewports = [
            {'width': 1920, 'height': 1080},
            {'width': 1366, 'height': 768},
            {'width': 1440, 'height': 900},
            {'width': 1536, 'height': 864},
            {'width': 1280, 'height': 720},
        ]
        
        self.locales = ['ru-RU', 'en-US', 'en-GB']
        self.timezones = ['Europe/Moscow', 'Europe/London', 'America/New_York']
    
    async def create_stealth_context(self, browser: Browser) -> BrowserContext:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä—ã—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
        user_agent = random.choice(self.user_agents)
        viewport = random.choice(self.viewports)
        locale = random.choice(self.locales)
        timezone = random.choice(self.timezones)
        
        context = await browser.new_context(
            user_agent=user_agent,
            viewport=viewport,
            locale=locale,
            timezone_id=timezone,
            permissions=['geolocation'],
            geolocation={'latitude': 55.7558, 'longitude': 37.6176},  # –ú–æ—Å–∫–≤–∞
            extra_http_headers={
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
                'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                'Accept-Encoding': 'gzip, deflate, br',
                'DNT': '1',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
            }
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
        await context.add_init_script("""
            // –£–¥–∞–ª—è–µ–º webdriver
            Object.defineProperty(navigator, 'webdriver', {
                get: () => undefined,
            });
            
            // –ü–æ–¥–¥–µ–ª—ã–≤–∞–µ–º plugins
            Object.defineProperty(navigator, 'plugins', {
                get: () => [1, 2, 3, 4, 5],
            });
            
            // –ü–æ–¥–¥–µ–ª—ã–≤–∞–µ–º languages
            Object.defineProperty(navigator, 'languages', {
                get: () => ['ru-RU', 'ru', 'en-US', 'en'],
            });
            
            // –ü–æ–¥–¥–µ–ª—ã–≤–∞–µ–º permissions
            const originalQuery = window.navigator.permissions.query;
            window.navigator.permissions.query = (parameters) => (
                parameters.name === 'notifications' ?
                    Promise.resolve({ state: Notification.permission }) :
                    originalQuery(parameters)
            );
        """)
        
        return context
    
    async def human_like_behavior(self, page: Page):
        """–ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
        await page.mouse.move(
            random.randint(100, 800), 
            random.randint(100, 600)
        )
        
        # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        await asyncio.sleep(random.uniform(0.5, 2.0))
        
        # –°–ª—É—á–∞–π–Ω—ã–π —Å–∫—Ä–æ–ª–ª
        if random.random() < 0.3:  # 30% —à–∞–Ω—Å
            await page.mouse.wheel(0, random.randint(100, 500))
            await asyncio.sleep(random.uniform(0.5, 1.5))
    
    async def make_request(self, url: str, max_retries: int = 3) -> Optional[str]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–ª–Ω–æ–π —ç–º—É–ª—è—Ü–∏–µ–π –±—Ä–∞—É–∑–µ—Ä–∞"""
        
        async with async_playwright() as p:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            browser = await p.chromium.launch(
                headless=True,  # –ú–æ–∂–µ–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å False –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                args=[
                    '--no-sandbox',
                    '--disable-blink-features=AutomationControlled',
                    '--disable-web-security',
                    '--disable-features=VizDisplayCompositor',
                    '--disable-dev-shm-usage',
                    '--disable-gpu',
                    '--no-first-run',
                    '--no-default-browser-check',
                    '--disable-default-apps',
                    '--disable-extensions',
                    '--disable-plugins',
                    '--disable-images',  # –£—Å–∫–æ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                    '--disable-javascript',  # –û—Ç–∫–ª—é—á–∞–µ–º JS –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                    '--disable-css',  # –û—Ç–∫–ª—é—á–∞–µ–º CSS –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
                    '--disable-fonts',  # –û—Ç–∫–ª—é—á–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
                    '--disable-background-timer-throttling',
                    '--disable-backgrounding-occluded-windows',
                    '--disable-renderer-backgrounding',
                    '--disable-features=TranslateUI',
                    '--disable-ipc-flooding-protection',
                ]
            )
            
            for attempt in range(max_retries):
                try:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
                    context = await self.create_stealth_context(browser)
                    page = await context.new_page()
                    
                    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
                    await asyncio.sleep(random.uniform(1.0, 3.0))
                    
                    logger.info(f"üîÑ Playwright –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –¥–ª—è {url}")
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–º timeout
                    response = await page.goto(
                        url, 
                        wait_until='domcontentloaded',  # –ñ–¥–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
                        timeout=15000  # –£–º–µ–Ω—å—à–∞–µ–º timeout –¥–æ 15 —Å–µ–∫—É–Ω–¥
                    )
                    
                    if response and response.status == 200:
                        # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                        await self.human_like_behavior(page)
                        
                        # –ü–æ–ª—É—á–∞–µ–º HTML
                        html = await page.content()
                        
                        logger.info(f"‚úÖ Playwright —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                        
                        await context.close()
                        await browser.close()
                        return html
                        
                    elif response and response.status == 403:
                        logger.warning(f"üö´ 403 Forbidden –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                        await context.close()
                        continue
                        
                    elif response and response.status == 429:
                        logger.warning(f"‚è≥ 429 Too Many Requests –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                        await context.close()
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è 429
                        await asyncio.sleep(random.uniform(10.0, 20.0))
                        continue
                        
                    else:
                        logger.warning(f"‚ö†Ô∏è HTTP {response.status if response else 'Unknown'} –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                        await context.close()
                        continue
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Playwright –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                    try:
                        await context.close()
                    except:
                        pass
                    continue
            
            await browser.close()
            logger.error(f"‚ùå –í—Å–µ {max_retries} Playwright –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ —É–¥–∞–ª–∏—Å—å –¥–ª—è {url}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
playwright_bypass = PlaywrightBypass()

async def get_page_with_playwright(url: str) -> Optional[str]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ Playwright"""
    return await playwright_bypass.make_request(url)

def get_page_with_playwright_sync(url: str) -> Optional[str]:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π event loop
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import concurrent.futures
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(asyncio.run, get_page_with_playwright(url))
                return future.result()
        else:
            # –ï—Å–ª–∏ loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run
            return asyncio.run(get_page_with_playwright(url))
    except RuntimeError:
        # Fallback - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
        import concurrent.futures
        with concurrent.futures.ThreadPoolExecutor() as executor:
            future = executor.submit(asyncio.run, get_page_with_playwright(url))
            return future.result()
