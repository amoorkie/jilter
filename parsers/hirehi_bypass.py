#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ HireHi.com

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç:
- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ User-Agent
- –†–æ—Ç–∞—Ü–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
- –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
- –†–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–ø—Ä–æ—Å–æ–≤
- –û–±—Ö–æ–¥ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä—ã

–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import random
import time
import requests
from typing import Optional, Dict, Any
import logging

logger = logging.getLogger(__name__)

class HireHiBypass:
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ HireHi"""
    
    def __init__(self):
        self.session = requests.Session()
        self.user_agents = [
            # –ú–æ–±–∏–ª—å–Ω—ã–µ User-Agent (–º–µ–Ω–µ–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ)
            'Mozilla/5.0 (iPhone; CPU iPhone OS 17_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Mobile/15E148 Safari/604.1',
            'Mozilla/5.0 (Linux; Android 14; SM-G998B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36',
            'Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1',
            
            # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤ (–º–µ–Ω–µ–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ)
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            
            # –ë–æ—Ç—ã –∏ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä—ã (–∏–Ω–æ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç)
            'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)',
            'Mozilla/5.0 (compatible; Bingbot/2.0; +http://www.bing.com/bingbot.htm)',
            'Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)',
            
            # –†–µ–¥–∫–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 OPR/116.0.0.0',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36'
        ]
        
        self.referers = [
            'https://www.google.com/',
            'https://www.bing.com/',
            'https://yandex.ru/',
            'https://duckduckgo.com/',
            'https://www.linkedin.com/',
            'https://github.com/',
            'https://stackoverflow.com/',
            'https://habr.com/',
            'https://vc.ru/'
        ]
        
        self.accept_headers = [
            'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
            'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8'
        ]
    
    def get_random_headers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        user_agent = random.choice(self.user_agents)
        referer = random.choice(self.referers)
        accept = random.choice(self.accept_headers)
        
        headers = {
            'User-Agent': user_agent,
            'Accept': accept,
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Referer': referer,
            'Cache-Control': 'max-age=0'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if random.random() < 0.3:  # 30% —à–∞–Ω—Å
            headers['DNT'] = '1'
        
        if random.random() < 0.5:  # 50% —à–∞–Ω—Å
            headers['Sec-Fetch-Dest'] = 'document'
            headers['Sec-Fetch-Mode'] = 'navigate'
            headers['Sec-Fetch-Site'] = 'cross-site'
        
        return headers
    
    def make_request(self, url: str, max_retries: int = 3) -> Optional[requests.Response]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        
        for attempt in range(max_retries):
            try:
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt > 0:
                    delay = random.uniform(2.0, 8.0)
                    logger.info(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ {delay:.1f}—Å –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π {attempt + 1}")
                    time.sleep(delay)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = self.get_random_headers()
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
                session = requests.Session()
                session.headers.update(headers)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –¥–ª—è {url}")
                logger.debug(f"User-Agent: {headers['User-Agent'][:50]}...")
                
                response = session.get(url, timeout=30, allow_redirects=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
                if response.status_code == 200:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                    return response
                elif response.status_code == 403:
                    logger.warning(f"üö´ 403 Forbidden –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                    continue
                elif response.status_code == 429:
                    logger.warning(f"‚è≥ 429 Too Many Requests –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è 429
                    time.sleep(random.uniform(10.0, 20.0))
                    continue
                else:
                    logger.warning(f"‚ö†Ô∏è HTTP {response.status_code} –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                    continue
                    
            except requests.exceptions.Timeout:
                logger.warning(f"‚è∞ Timeout –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                continue
            except requests.exceptions.ConnectionError:
                logger.warning(f"üîå Connection Error –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                continue
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                continue
        
        logger.error(f"‚ùå –í—Å–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ —É–¥–∞–ª–∏—Å—å –¥–ª—è {url}")
        return None
    
    def test_connectivity(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ HireHi"""
        test_url = "https://hirehi.com/"
        
        try:
            response = self.make_request(test_url, max_retries=1)
            if response and response.status_code == 200:
                logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ HireHi —É—Å–ø–µ—à–µ–Ω")
                return True
            else:
                logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ HireHi –Ω–µ —É–¥–∞–ª—Å—è")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
hirehi_bypass = HireHiBypass()

def get_hirehi_page(url: str) -> Optional[requests.Response]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã HireHi"""
    return hirehi_bypass.make_request(url)

def test_hirehi_access() -> bool:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ HireHi"""
    return hirehi_bypass.test_connectivity()


