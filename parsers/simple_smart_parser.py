#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —É–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –±–ª–æ–∫–∞–º
"""

import re
from bs4 import BeautifulSoup, NavigableString
from typing import Dict, List


def extract_smart_content(element) -> Dict[str, str]:
    """
    –£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –±–ª–æ–∫–∞–º
    """
    if not element:
        return {
            'full_description': '',
            'requirements': '',
            'tasks': '',
            'conditions': ''
        }
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    blocks = extract_blocks_with_headers(element)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    result = {
        'full_description': '',
        'requirements': '',
        'tasks': '',
        'conditions': ''
    }
    
    all_content = []
    
    for title, content in blocks.items():
        if not content.strip():
            continue
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        all_content.append(f"{title}:\n{content}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = categorize_block(title, content)
        
        if category in result:
            if result[category]:
                result[category] += f"\n\n{title}:\n{content}"
            else:
                result[category] = f"{title}:\n{content}"
    
    result['full_description'] = '\n\n'.join(all_content)
    
    return result


def extract_blocks_with_headers(element) -> Dict[str, str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    """
    blocks = {}
    current_title = "–û–ø–∏—Å–∞–Ω–∏–µ"
    current_content = []
    
    def process_element(elem):
        nonlocal current_title, current_content
        
        if isinstance(elem, NavigableString):
            text = str(elem).strip()
            if text:
                current_content.append(text)
            return
        
        tag_name = elem.name if hasattr(elem, 'name') else None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if tag_name in ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫
            if current_content:
                content_text = ' '.join(current_content).strip()
                if content_text:
                    blocks[current_title] = content_text
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫
            current_title = elem.get_text(strip=True)
            current_content = []
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤
        elif tag_name in ['ul', 'ol']:
            for li in elem.find_all('li', recursive=False):
                li_text = li.get_text(strip=True)
                if li_text:
                    current_content.append(f"‚Ä¢ {li_text}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–±–∑–∞—Ü–µ–≤
        elif tag_name in ['p', 'div']:
            text = elem.get_text(strip=True)
            if text and not any(child.name in ['ul', 'ol'] for child in elem.children):
                current_content.append(text)
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        else:
            for child in elem.children:
                process_element(child)
    
    process_element(element)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
    if current_content:
        content_text = ' '.join(current_content).strip()
        if content_text:
            blocks[current_title] = content_text
    
    return blocks


def categorize_block(title: str, content: str) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª–æ–∫–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    """
    title_lower = title.lower()
    content_lower = content.lower()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    requirements_patterns = [
        r'—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
        r'–ø–æ–∂–µ–ª–∞–Ω–∏—è\s+–∫\s+–∫–∞–Ω–¥–∏–¥–∞—Ç—É',
        r'–æ–∂–∏–¥–∞–Ω–∏—è',
        r'—á—Ç–æ\s+–º—ã\s+–∂–¥–µ–º',
        r'–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ\s+–Ω–∞–≤—ã–∫–∏',
        r'–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è',
        r'–æ–ø—ã—Ç\s+—Ä–∞–±–æ—Ç—ã',
        r'–Ω—É–∂–Ω–æ',
        r'–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ',
        r'–∫–æ–≥–æ\s+–º—ã\s+–∏—â–µ–º',
        r'—Ç—ã\s+–Ω–∞–º\s+–ø–æ–¥—Ö–æ–¥–∏—à—å',
        r'–∫–∞–Ω–¥–∏–¥–∞—Ç',
        r'skills?',
        r'–Ω–∞–≤—ã–∫–∏',
        r'–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏'
    ]
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É—Å–ª–æ–≤–∏–π
    conditions_patterns = [
        r'—á—Ç–æ\s+–º—ã\s+–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º',
        r'–º—ã\s+–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º',
        r'—É—Å–ª–æ–≤–∏—è',
        r'—É—Å–ª–æ–≤–∏—è\s+—Ä–∞–±–æ—Ç—ã',
        r'—Ñ–æ—Ä–º–∞—Ç\s+—Ä–∞–±–æ—Ç—ã',
        r'–≥—Ä–∞—Ñ–∏–∫\s+—Ä–∞–±–æ—Ç—ã',
        r'–ª–æ–∫–∞—Ü–∏—è',
        r'–æ—Ñ–∏—Å',
        r'–≥—Ä–∞—Ñ–∏–∫',
        r'—Ä–µ–∂–∏–º\s+—Ä–∞–±–æ—Ç—ã',
        r'–º–µ—Å—Ç–æ\s+—Ä–∞–±–æ—Ç—ã',
        r'—Ä–∞–±–æ—Ç–∞–µ–º',
        r'—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
        r'–ª—å–≥–æ—Ç—ã',
        r'–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞',
        r'–±–æ–Ω—É—Å—ã',
        r'–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ\s+–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
        r'–ø–ª—é—Å—ã',
        r'benefits?',
        r'–ø–µ—Ä–∫–∏',
        r'–∑–∞—Ä–ø–ª–∞—Ç–∞',
        r'–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏',
        r'–æ–ø–ª–∞—Ç–∞',
        r'–¥–æ—Ö–æ–¥'
    ]
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–¥–∞—á
    tasks_patterns = [
        r'–∑–∞–¥–∞—á–∏',
        r'–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏',
        r'—á—Ç–æ\s+–ø—Ä–µ–¥—Å—Ç–æ–∏—Ç',
        r'—Ä–∞–±–æ—Ç–∞\s+–≤–∫–ª—é—á–∞–µ—Ç',
        r'–≤–∞–º\s+–ø—Ä–µ–¥—Å—Ç–æ–∏—Ç',
        r'—Ñ—É–Ω–∫—Ü–∏–∏',
        r'–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    for pattern in requirements_patterns:
        if re.search(pattern, title_lower) or re.search(pattern, content_lower):
            return 'requirements'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É—Å–ª–æ–≤–∏–π
    for pattern in conditions_patterns:
        if re.search(pattern, title_lower) or re.search(pattern, content_lower):
            return 'conditions'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–¥–∞—á
    for pattern in tasks_patterns:
        if re.search(pattern, title_lower) or re.search(pattern, content_lower):
            return 'tasks'
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ–ø–∏—Å–∞–Ω–∏–µ
    return 'full_description'


def test_simple_smart_parser():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —É–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    """
    html = '''
    <div class="vacancy-description">
        <h3>–ù–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É:</h3>
        <ul>
            <li>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –¥–∏–∑–∞–π–Ω–µ –æ—Ç 2 –ª–µ—Ç</li>
            <li>–ó–Ω–∞–Ω–∏–µ Figma, Adobe Creative Suite</li>
        </ul>
        
        <h3>–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:</h3>
        <ul>
            <li>–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞</li>
            <li>–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫</li>
        </ul>
        
        <h3>–ó–∞–¥–∞—á–∏:</h3>
        <p>–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤</p>
    </div>
    '''
    
    soup = BeautifulSoup(html, 'html.parser')
    element = soup.select_one('.vacancy-description')
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print('üîç –û–¢–õ–ê–î–ö–ê:')
    print(f'–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {element is not None}')
    if element:
        print(f'HTML —ç–ª–µ–º–µ–Ω—Ç–∞: {str(element)[:200]}...')
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª–æ–∫–∏
    blocks = extract_blocks_with_headers(element)
    print(f'–ù–∞–π–¥–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏: {list(blocks.keys())}')
    for title, content in blocks.items():
        print(f'  {title}: {content[:100]}...')
    
    result = extract_smart_content(element)
    
    print('\nüß† –ü–†–û–°–¢–û–ô –£–ú–ù–´–ô –ü–ê–†–°–ï–† - –†–ï–ó–£–õ–¨–¢–ê–¢–´:')
    print('='*60)
    
    for key, value in result.items():
        print(f'\nüîπ {key.upper()}:')
        print(f'–î–ª–∏–Ω–∞: {len(value)} —Å–∏–º–≤–æ–ª–æ–≤')
        if value:
            print('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:')
            print(value)
        else:
            print('(–ø—É—Å—Ç–æ)')
    
    print(f'\nüéØ –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–ò:')
    print('-' * 30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    if "–ø–æ–∂–µ–ª–∞–Ω–∏—è" in result['requirements'].lower():
        print("‚úÖ '–ù–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è' ‚Üí requirements")
    else:
        print("‚ùå '–ù–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è' –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ requirements")
    
    if "–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º" in result['conditions'].lower():
        print("‚úÖ '–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º' ‚Üí conditions")
    else:
        print("‚ùå '–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º' –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ conditions")
    
    if "–∑–∞–¥–∞—á–∏" in result['tasks'].lower():
        print("‚úÖ '–ó–∞–¥–∞—á–∏' ‚Üí tasks")
    else:
        print("‚ùå '–ó–∞–¥–∞—á–∏' –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ tasks")


if __name__ == "__main__":
    test_simple_smart_parser()
