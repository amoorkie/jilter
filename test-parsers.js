// –¢–µ—Å—Ç –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
function loadEnvFile() {
  try {
    const envPath = path.join(__dirname, '.env.local');
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
      const [key, ...valueParts] = line.split('=');
      if (key && valueParts.length > 0) {
        const value = valueParts.join('=').trim();
        if (!process.env[key]) {
          process.env[key] = value;
        }
      }
    });
  } catch (error) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env.local:', error.message);
  }
}

loadEnvFile();

async function testParsers() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤');
  
  const parsers = [
    { name: 'HH.ru', url: 'http://localhost:3000/api/test/hh' },
    { name: 'Geekjob', url: 'http://localhost:3000/api/test/geekjob' },
    { name: 'HireHi', url: 'http://localhost:3000/api/test/hirehi' },
    { name: '–•–∞–±—Ä –ö–∞—Ä—å–µ—Ä–∞', url: 'http://localhost:3000/api/test/habr' },
    { name: 'Designer.ru', url: 'http://localhost:3000/api/test/designer-ru' },
    { name: 'GetMatch', url: 'http://localhost:3000/api/test/getmatch' }
  ];
  
  for (const parser of parsers) {
    try {
      console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º ${parser.name}...`);
      const response = await fetch(parser.url);
      
      if (response.ok) {
        const data = await response.json();
        console.log(`‚úÖ ${parser.name}: ${data.vacancies?.length || 0} –≤–∞–∫–∞–Ω—Å–∏–π`);
        if (data.vacancies && data.vacancies.length > 0) {
          console.log(`   –ü—Ä–∏–º–µ—Ä: "${data.vacancies[0].title}" - ${data.vacancies[0].company}`);
        }
      } else {
        console.log(`‚ùå ${parser.name}: –û—à–∏–±–∫–∞ ${response.status}`);
      }
    } catch (error) {
      console.log(`‚ùå ${parser.name}: ${error.message}`);
    }
  }
}

testParsers();














