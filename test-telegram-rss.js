// –¢–µ—Å—Ç Telegram RSS –ø–∞—Ä—Å–∏–Ω–≥–∞
const axios = require('axios');

async function testTelegramRSS() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram RSS –ø–∞—Ä—Å–∏–Ω–≥...');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º RSS URL –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    const channels = [
      'designhunters',
      'designjobs', 
      'uxjobs',
      'productjobs'
    ];
    
    for (const channel of channels) {
      console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª @${channel}:`);
      
      const rssUrls = [
        `https://t.me/s/${channel}/rss`,
        `https://t.me/${channel}/rss`,
        `https://rsshub.app/telegram/channel/${channel}`
      ];
      
      for (const rssUrl of rssUrls) {
        try {
          console.log(`  üì° –ü—Ä–æ–±—É–µ–º: ${rssUrl}`);
          const response = await axios.get(rssUrl, { timeout: 5000 });
          console.log(`  ‚úÖ –°—Ç–∞—Ç—É—Å: ${response.status}`);
          console.log(`  üìä –†–∞–∑–º–µ—Ä: ${response.data.length} —Å–∏–º–≤–æ–ª–æ–≤`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ RSS –∫–æ–Ω—Ç–µ–Ω—Ç
          if (response.data.includes('<item>') || response.data.includes('<entry>')) {
            console.log(`  üéØ RSS –Ω–∞–π–¥–µ–Ω!`);
            break;
          } else {
            console.log(`  ‚ö†Ô∏è RSS –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
          }
        } catch (error) {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
      }
    }
    
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–∞–Ω–∞–ª—ã –ø—É–±–ª–∏—á–Ω—ã–µ');
    console.log('  2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã');
    console.log('  3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ TELEGRAM_BOT_TOKEN –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testTelegramRSS();















