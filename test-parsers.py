#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import sqlite3
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞—Ä—Å–µ—Ä–∞–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from simple_unified_parser import SimpleUnifiedParser

def test_parsers():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = SimpleUnifiedParser(db_path="data/job_filter.db")
    
    print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {parser.db.db_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        with sqlite3.connect(parser.db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("PRAGMA table_info(vacancies)")
            columns = cursor.fetchall()
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {len(columns)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            column_names = [col[1] for col in columns]
            required_columns = ['id', 'external_id', 'source', 'url', 'title', 'company', 'is_approved']
            
            for col in required_columns:
                if col in column_names:
                    print(f"‚úÖ {col}")
                else:
                    print(f"‚ùå {col} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –¥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    print("\n2Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –¥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    try:
        with sqlite3.connect(parser.db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM vacancies")
            count_before = cursor.fetchone()[0]
            print(f"üìä –í–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑–µ: {count_before}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ HH.ru
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ HH.ru...")
    try:
        result = parser.parse_source('hh', '–¥–∏–∑–∞–π–Ω–µ—Ä', pages=1)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç HH.ru: {result}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HH.ru: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    print("\n4Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    try:
        with sqlite3.connect(parser.db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM vacancies")
            count_after = cursor.fetchone()[0]
            print(f"üìä –í–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑–µ: {count_after}")
            print(f"üìà –î–æ–±–∞–≤–ª–µ–Ω–æ: {count_after - count_before}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            if count_after > count_before:
                cursor.execute("""
                    SELECT id, title, company, source, created_at 
                    FROM vacancies 
                    ORDER BY created_at DESC 
                    LIMIT 3
                """)
                recent_vacancies = cursor.fetchall()
                print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")
                for vac in recent_vacancies:
                    print(f"  - {vac[1]} –≤ {vac[2]} ({vac[3]}) - {vac[4]}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

if __name__ == "__main__":
    test_parsers()

