const axios = require('axios');

async function testForceParsing() {
  console.log('üß™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥...');
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
    const currentResponse = await axios.get('http://localhost:3000/api/vacancies?q=–¥–∏–∑–∞–π–Ω–µ—Ä&maxVacancies=10');
    console.log('üìä –¢–µ–∫—É—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π:', currentResponse.data.vacancies.length);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –∞–¥–º–∏–Ω–∫—É
    const adminResponse = await axios.get('http://localhost:3000/api/admin/pending');
    console.log('üìä –í –∞–¥–º–∏–Ω–∫–µ:', adminResponse.data.vacancies.length);
    
    // –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –±–æ–ª—å—à–∏–º –ª–∏–º–∏—Ç–æ–º
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –±–æ–ª—å—à–∏–º –ª–∏–º–∏—Ç–æ–º...');
    const response = await axios.get('http://localhost:3000/api/vacancies?q=–¥–∏–∑–∞–π–Ω–µ—Ä&maxVacancies=300');
    
    console.log('üìä –°—Ç–∞—Ç—É—Å:', response.status);
    console.log('üìä –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π:', response.data.vacancies.length);

    console.log('\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:\n');
    const sources = {};
    response.data.vacancies.forEach(vacancy => {
      const source = vacancy.source || 'Unknown';
      sources[source] = (sources[source] || 0) + 1;
    });
    
    Object.entries(sources).forEach(([source, count]) => {
      console.log(`${source}: ${count} –≤–∞–∫–∞–Ω—Å–∏–π`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –≤–∞–∫–∞–Ω—Å–∏–∏
    const telegramVacancies = response.data.vacancies.filter(v => 
      v.source && v.source.toLowerCase().includes('telegram')
    );
    
    console.log(`\nüìä Telegram –≤–∞–∫–∞–Ω—Å–∏–π: ${telegramVacancies.length}`);
    
    if (telegramVacancies.length > 0) {
      console.log('\nüéâ Telegram –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞–π–¥–µ–Ω—ã!');
      telegramVacancies.slice(0, 3).forEach((vacancy, index) => {
        console.log(`${index + 1}. ${vacancy.title} (${vacancy.source})`);
      });
    } else {
      console.log('\n‚ö†Ô∏è Telegram –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º LinkedIn –≤–∞–∫–∞–Ω—Å–∏–∏
    const linkedinVacancies = response.data.vacancies.filter(v => 
      v.source && v.source.toLowerCase().includes('linkedin')
    );
    
    console.log(`\nüìä LinkedIn –≤–∞–∫–∞–Ω—Å–∏–π: ${linkedinVacancies.length}`);
    
    if (linkedinVacancies.length > 0) {
      console.log('\nüéâ LinkedIn –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞–π–¥–µ–Ω—ã!');
      linkedinVacancies.slice(0, 3).forEach((vacancy, index) => {
        console.log(`${index + 1}. ${vacancy.title} (${vacancy.source})`);
      });
    } else {
      console.log('\n‚ö†Ô∏è LinkedIn –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∫—É –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞...');
    const adminResponseAfter = await axios.get('http://localhost:3000/api/admin/pending');
    console.log('üìä –û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', adminResponseAfter.data.vacancies.length);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
  }
}

testForceParsing();















