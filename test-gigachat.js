// –¢–µ—Å—Ç GigaChat API
require('dotenv').config({ path: '.env.local' });

async function testGigaChat() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º GigaChat API...');
  
  const authKey = process.env.GIGACHAT_AUTH_KEY;
  
  if (!authKey || authKey === '–í–ê–®_GIGACHAT_AUTH_–ö–õ–Æ–ß_–ó–î–ï–°–¨') {
    console.log('‚ùå GigaChat Auth –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
    console.log('üìù –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –º–æ–∂–Ω–æ –Ω–∞: https://developers.sber.ru/');
    return;
  }
  
  console.log('üîë Auth –∫–ª—é—á: –ù–∞–π–¥–µ–Ω');
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º Access Token
    console.log('üîê –ü–æ–ª—É—á–∞–µ–º Access Token...');
    const tokenResponse = await fetch('https://ngw.devices.sberbank.ru:9443/api/v2/oauth', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': '51a30daf-32fb-4a9c-b32a-8b149fc0c702',
        'Authorization': `Basic ${authKey}`
      },
      body: 'scope=GIGACHAT_API_PERS'
    });
    
    if (!tokenResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${tokenResponse.status} ${tokenResponse.statusText}`);
    }
    
    const tokenData = await tokenResponse.json();
    const accessToken = tokenData.access_token;
    console.log('‚úÖ Access Token –ø–æ–ª—É—á–µ–Ω');
    
    // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const response = await fetch('https://gigachat.devices.sberbank.ru/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${accessToken}`
      },
      body: JSON.stringify({
        model: 'GigaChat:latest',
        messages: [
          {
            role: 'user',
            content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?'
          }
        ],
        temperature: 0.3,
        max_tokens: 100
      })
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ GigaChat API —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('üìù –û—Ç–≤–µ—Ç:', data.choices[0].message.content);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ API:', response.status, response.statusText);
      const errorText = await response.text();
      console.log('üìù –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorText);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
  }
}

testGigaChat();
