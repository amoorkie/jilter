// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ–∂–∏–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
function loadEnvFile() {
  try {
    const envPath = path.join(__dirname, '..', '.env.local');
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
      const [key, ...valueParts] = line.split('=');
      if (key && valueParts.length > 0) {
        const value = valueParts.join('=').trim();
        if (!process.env[key]) {
          process.env[key] = value;
        }
      }
    });
  } catch (error) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env.local:', error.message);
  }
}

loadEnvFile();

async function seedDatabase() {
  console.log('üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ–∂–∏–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏...\n');
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ API
    console.log('üì° –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π...');
    const response = await fetch('http://localhost:3000/api/vacancies?q=–¥–∏–∑–∞–π–Ω–µ—Ä&maxVacancies=100');
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data.vacancies?.length || 0} –≤–∞–∫–∞–Ω—Å–∏–π`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    console.log('\nüë®‚Äçüíº –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...');
    const adminResponse = await fetch('http://localhost:3000/api/admin/pending');
    
    if (adminResponse.ok) {
      const adminData = await adminResponse.json();
      console.log(`‚úÖ –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: ${adminData.vacancies?.length || 0} –≤–∞–∫–∞–Ω—Å–∏–π –æ–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏`);
      
      if (adminData.vacancies && adminData.vacancies.length > 0) {
        console.log('\nüìã –ü–µ—Ä–≤—ã–µ 3 –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:');
        adminData.vacancies.slice(0, 3).forEach((vacancy, index) => {
          console.log(`   ${index + 1}. ${vacancy.title} - ${vacancy.company}`);
          console.log(`      –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${vacancy.ai_specialization}`);
          console.log(`      –ó–∞–Ω—è—Ç–æ—Å—Ç—å: ${vacancy.ai_employment?.join(', ')}`);
          console.log(`      –£–¥–∞–ª–µ–Ω–Ω–æ: ${vacancy.ai_remote ? '–î–∞' : '–ù–µ—Ç'}`);
        });
        
        console.log('\nüéØ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:3000/admin –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
      } else {
        console.log('‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
}

seedDatabase();














