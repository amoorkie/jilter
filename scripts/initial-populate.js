// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
function loadEnvFile() {
  try {
    const envPath = path.join(__dirname, '..', '.env.local');
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
      const [key, ...valueParts] = line.split('=');
      if (key && valueParts.length > 0) {
        const value = valueParts.join('=').trim();
        if (!process.env[key]) {
          process.env[key] = value;
        }
      }
    });
  } catch (error) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env.local:', error.message);
  }
}

loadEnvFile();

async function initialPopulate() {
  console.log('üå± –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏');
  console.log('üìÖ –ü–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è —Å–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n');
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ API
    console.log('üì° –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥...');
    const response = await fetch('http://localhost:3000/api/vacancies?q=–¥–∏–∑–∞–π–Ω–µ—Ä&maxVacancies=300');
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data.vacancies?.length || 0} –≤–∞–∫–∞–Ω—Å–∏–π`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    console.log('\nüë®‚Äçüíº –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...');
    const adminResponse = await fetch('http://localhost:3000/api/admin/pending');
    
    if (adminResponse.ok) {
      const adminData = await adminResponse.json();
      console.log(`‚úÖ –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: ${adminData.vacancies?.length || 0} –≤–∞–∫–∞–Ω—Å–∏–π –æ–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏`);
      
      if (adminData.vacancies && adminData.vacancies.length > 0) {
        console.log('\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:');
        const sourceStats = {};
        adminData.vacancies.forEach(vacancy => {
          sourceStats[vacancy.source] = (sourceStats[vacancy.source] || 0) + 1;
        });
        
        Object.entries(sourceStats).forEach(([source, count]) => {
          console.log(`   ${source}: ${count} –≤–∞–∫–∞–Ω—Å–∏–π`);
        });
        
        console.log('\nüéØ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:3000/admin –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
        console.log('üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∞–π—Ç–∞');
      } else {
        console.log('‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    const monitoringResponse = await fetch('http://localhost:3000/api/monitoring/start', {
      method: 'POST'
    });
    
    if (monitoringResponse.ok) {
      console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω');
      console.log('‚è∞ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–∞—Ä—Å–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞');
    } else {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã...');
    const statsResponse = await fetch('http://localhost:3000/api/monitoring/stats');
    
    if (statsResponse.ok) {
      const statsData = await statsResponse.json();
      console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:');
      console.log(`   –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: ${statsData.stats?.totalVacancies || 0}`);
      console.log(`   –û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: ${statsData.stats?.pendingVacancies || 0}`);
      console.log(`   –û–¥–æ–±—Ä–µ–Ω—ã: ${statsData.stats?.approvedVacancies || 0}`);
      console.log(`   –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω: ${statsData.stats?.isRunning ? '–î–∞' : '–ù–µ—Ç'}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
}

initialPopulate();














