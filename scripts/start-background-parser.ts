#!/usr/bin/env tsx

import { backgroundParser } from '../src/lib/parsers/background-parser';
import { vacancyService } from '../src/lib/database/vacancy-service';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
const PARSING_CONFIG = {
  queries: [
    // –¢–û–ü-5 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤
    'ui –¥–∏–∑–∞–π–Ω–µ—Ä', 'ux –¥–∏–∑–∞–π–Ω–µ—Ä', '–¥–∏–∑–∞–π–Ω–µ—Ä', 'figma', 'photoshop'
  ],
  maxPages: 1, // –¢–û–õ–¨–ö–û 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ –∫–∞–∂–¥—ã–π —Ä–µ—Å—É—Ä—Å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
  aiEnabled: false,
  batchSize: 20, // –ú–µ–Ω—å—à–∏–π –±–∞—Ç—á –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
  delayBetweenBatches: 50 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
};

async function startBackgroundParsing() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞...');
  console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', PARSING_CONFIG);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    const activeCount = await vacancyService.getActiveVacanciesCount();
    console.log(`üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –≤ –ë–î: ${activeCount}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    const stats = await backgroundParser.startBackgroundParsing(PARSING_CONFIG);
    
    console.log('üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    
    stats.forEach((stat, index) => {
      console.log(`\nüìã –ó–∞–ø—Ä–æ—Å ${index + 1}: "${stat.query}"`);
      console.log(`  ‚è±Ô∏è  –í—Ä–µ–º—è: ${stat.parsingDurationMs}ms`);
      console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ: ${stat.vacanciesFound}`);
      console.log(`  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stat.vacanciesParsed}`);
      console.log(`  üß† AI —É—Å–ø–µ—à–Ω–æ: ${stat.aiAnalysisSuccess}`);
      console.log(`  ‚ùå AI –æ—à–∏–±–æ–∫: ${stat.aiAnalysisFailed}`);
    });
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const finalCount = await vacancyService.getActiveVacanciesCount();
    const sourceStats = await vacancyService.getSourceStats();
    
    console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:');
    console.log(`  üìà –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: ${finalCount}`);
    console.log(`  üìä –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:`);
    sourceStats.forEach(stat => {
      console.log(`    - ${stat.source}: ${stat.count} (–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥: ${stat.last_parsed})`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
    throw error;
  } finally {
    await vacancyService.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  startBackgroundParsing()
    .then(() => {
      console.log('üéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export { startBackgroundParsing };
