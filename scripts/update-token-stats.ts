// scripts/update-token-stats.ts
import { supabase } from '../src/lib/database/config';

async function updateTokenStats() {
  console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
    const { data: actions, error: actionsError } = await supabase
      .from('user_actions')
      .select(`
        vacancy_id,
        action,
        user_id,
        created_at,
        vacancies!inner(
          matched_tokens
        )
      `)
      .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()); // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞

    if (actionsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π:', actionsError);
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–∫–µ–Ω–∞–º
    const tokenStats = new Map<number, { hides_count: number; unique_users: Set<string> }>();

    for (const action of actions || []) {
      if (action.action === 'hide_vacancy' || action.action === 'thumbs_down') {
        const matchedTokens = Array.isArray(action.vacancies) 
          ? action.vacancies.flatMap((v: any) => v.matched_tokens || [])
          : (action.vacancies as any)?.matched_tokens || [];
        
        for (const token of matchedTokens) {
          const tokenId = token.token_id;
          
          if (!tokenStats.has(tokenId)) {
            tokenStats.set(tokenId, { hides_count: 0, unique_users: new Set() });
          }
          
          const stats = tokenStats.get(tokenId)!;
          stats.hides_count += 1;
          stats.unique_users.add(action.user_id);
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
    for (const [tokenId, stats] of tokenStats) {
      const { error: updateError } = await supabase
        .from('global_token_stats')
        .upsert({
          token_id: tokenId,
          hides_count: stats.hides_count,
          unique_users: stats.unique_users.size,
          last_used_at: new Date().toISOString()
        });

      if (updateError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${tokenId}:`, updateError);
      } else {
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${tokenId}: ${stats.hides_count} —Å–∫—Ä—ã—Ç–∏–π, ${stats.unique_users.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      }
    }

    console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ${tokenStats.size} —Ç–æ–∫–µ–Ω–æ–≤`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
updateTokenStats();

