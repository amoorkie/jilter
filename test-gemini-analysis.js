// –¢–µ—Å—Ç Gemini –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
require('dotenv').config({ path: '.env.local' });

async function testGeminiAnalysis() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏...');
  
  const apiKey = process.env.GEMINI_API_KEY;
  
  if (!apiKey || apiKey === '–í–ê–®_GEMINI_–ö–õ–Æ–ß_–ó–î–ï–°–¨') {
    console.log('‚ùå Gemini API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
    return;
  }
  
  // –¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è
  const testVacancy = {
    title: "UI/UX Designer",
    company: "Tech Company",
    description: "–ò—â–µ–º UI/UX –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –º–æ–±–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Figma, –∑–Ω–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ UX, –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ. –£—Å–ª–æ–≤–∏—è: —É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞."
  };
  
  const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–∞–∫–∞–Ω—Å–∏—é "${testVacancy.title}" –æ—Ç "${testVacancy.company}".

–û–ø–∏—Å–∞–Ω–∏–µ: ${testVacancy.description}

–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
{
  "fullDescription": "–æ–ø–∏—Å–∞–Ω–∏–µ",
  "requirements": "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", 
  "tasks": "–∑–∞–¥–∞—á–∏",
  "conditions": "—É—Å–ª–æ–≤–∏—è",
  "benefits": "–ª—å–≥–æ—Ç—ã",
  "technologies": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"],
  "experienceLevel": "junior|middle|senior|lead|unknown",
  "employmentType": "full_time|part_time|project|freelance|internship|volunteer|unknown",
  "remoteWork": true|false,
  "salaryRange": {"min": —á–∏—Å–ª–æ, "max": —á–∏—Å–ª–æ, "currency": "RUB"}
}`;

  try {
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${apiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.3,
          maxOutputTokens: 1000,
          topP: 1,
          topK: 32
        }
      })
    });
    
    if (response.ok) {
      const data = await response.json();
      const geminiResponse = data.candidates[0].content.parts[0].text.trim();
      
      console.log('‚úÖ Gemini –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('üìù –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:');
      console.log(geminiResponse);
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON (—É–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏)
      try {
        let cleanResponse = geminiResponse;
        if (cleanResponse.includes('```json')) {
          cleanResponse = cleanResponse.replace(/```json\n?/, '').replace(/```\n?$/, '');
        }
        if (cleanResponse.includes('```')) {
          cleanResponse = cleanResponse.replace(/```\n?/, '').replace(/```\n?$/, '');
        }
        
        const parsedResponse = JSON.parse(cleanResponse.trim());
        console.log('\nüéØ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
        console.log('üìã –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', parsedResponse.fullDescription?.substring(0, 100) + '...');
        console.log('üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:', parsedResponse.requirements?.substring(0, 100) + '...');
        console.log('üìã –ó–∞–¥–∞—á–∏:', parsedResponse.tasks?.substring(0, 100) + '...');
        console.log('üìã –£—Å–ª–æ–≤–∏—è:', parsedResponse.conditions?.substring(0, 100) + '...');
        console.log('üìã –õ—å–≥–æ—Ç—ã:', parsedResponse.benefits?.substring(0, 100) + '...');
        console.log('üìã –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:', parsedResponse.technologies);
        console.log('üìã –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞:', parsedResponse.experienceLevel);
        console.log('üìã –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:', parsedResponse.employmentType);
        console.log('üìã –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞:', parsedResponse.remoteWork);
        console.log('üìã –ó–∞—Ä–ø–ª–∞—Ç–∞:', parsedResponse.salaryRange);
      } catch (parseError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError.message);
        console.log('üìù –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', geminiResponse);
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ API:', response.status, response.statusText);
      const errorText = await response.text();
      console.log('üìù –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorText);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
  }
}

testGeminiAnalysis();
