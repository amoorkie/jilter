// –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç GigaChat API
require('dotenv').config({ path: '.env.local' });
const { Buffer } = require('buffer');

async function testGigaChatFinal() {
  console.log('üß™ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç GigaChat API...');
  
  const cadataToken = process.env.GIGACHAT_CADATA_TOKEN;
  const providerKey = process.env.GIGACHAT_PROVIDER_KEY;
  
  console.log('üîë CADATA_TOKEN:', cadataToken ? '–ù–∞–π–¥–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω');
  console.log('üîë PROVIDER_KEY:', providerKey ? '–ù–∞–π–¥–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω');
  
  if (!cadataToken || !providerKey) {
    console.log('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');
    return;
  }
  
  try {
    console.log('üîê –ü–æ–ª—É—á–∞–µ–º Access Token...');
    
    const tokenResponse = await fetch('https://ngw.devices.sberbank.ru:9443/api/v2/oauth', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': `Basic ${Buffer.from(`${providerKey}:`).toString('base64')}`,
      },
      body: 'scope=GIGACHAT_API_PERS',
    });
    
    if (!tokenResponse.ok) {
      const errorText = await tokenResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', tokenResponse.status, errorText);
      return;
    }
    
    const tokenData = await tokenResponse.json();
    const accessToken = tokenData.access_token;
    console.log('‚úÖ Access Token –ø–æ–ª—É—á–µ–Ω');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å
    console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å...');
    
    const apiResponse = await fetch('https://gigachat.devices.sberbank.ru/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${accessToken}`
      },
      body: JSON.stringify({
        model: 'GigaChat:latest',
        messages: [
          {
            role: 'user',
            content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?'
          }
        ],
        temperature: 0.3,
        max_tokens: 100
      })
    });
    
    if (apiResponse.ok) {
      const data = await apiResponse.json();
      console.log('‚úÖ GigaChat API —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('üìù –û—Ç–≤–µ—Ç:', data.choices[0].message.content);
    } else {
      const errorText = await apiResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ API:', apiResponse.status, errorText);
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

testGigaChatFinal();
