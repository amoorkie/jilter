const axios = require('axios');

async function testSpeed() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π...');
  
  const startTime = Date.now();
  
  try {
    const response = await axios.get('http://localhost:3000/api/vacancies?q=–¥–∏–∑–∞–π–Ω–µ—Ä&maxVacancies=50');
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: ${response.data.vacancies.length}`);
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${duration}ms`);
    console.log(`üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(response.data).length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    if (duration < 1000) {
      console.log('‚úÖ –ë—ã—Å—Ç—Ä–æ! (< 1 —Å–µ–∫—É–Ω–¥—ã)');
    } else if (duration < 5000) {
      console.log('‚ö†Ô∏è –ù–æ—Ä–º–∞–ª—å–Ω–æ (1-5 —Å–µ–∫—É–Ω–¥)');
    } else {
      console.log('‚ùå –ú–µ–¥–ª–µ–Ω–Ω–æ (> 5 —Å–µ–∫—É–Ω–¥)');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    const sources = {};
    response.data.vacancies.forEach(vacancy => {
      const source = vacancy.source || 'Unknown';
      sources[source] = (sources[source] || 0) + 1;
    });
    
    console.log('\nüìã –í–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:');
    Object.entries(sources).forEach(([source, count]) => {
      console.log(`${source}: ${count} –≤–∞–∫–∞–Ω—Å–∏–π`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

testSpeed();














