#!/usr/bin/env ts-node
/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Node.js –ø–∞—Ä—Å–µ—Ä–∞ Geekjob
 */

import { parseGeekjobVacancies } from './src/lib/parsers/geekjob/parser';
import { SQLiteService } from './src/lib/database/sqlite-service';

async function testNodeJSParser() {
  console.log('=== –¢–ï–°–¢ NODE.JS –ü–ê–†–°–ï–†–ê ===');
  console.log('–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ Geekjob...');
  
  const startTime = Date.now();
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –Ω–∞ 2 —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    const vacancies = await parseGeekjobVacancies('–¥–∏–∑–∞–π–Ω–µ—Ä', 2);
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Node.js –ø–∞—Ä—Å–µ—Ä–∞:`);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: ${vacancies.length}`);
    console.log(`   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
    
    if (vacancies.length > 0) {
      console.log(`\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:`);
      vacancies.forEach((vacancy, index) => {
        console.log(`${index + 1}. ${vacancy.title}`);
        console.log(`   –ö–æ–º–ø–∞–Ω–∏—è: ${vacancy.company}`);
        console.log(`   URL: ${vacancy.url}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${vacancy.description?.substring(0, 100)}...`);
        console.log('');
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
      const db = new SQLiteService();
      
      let savedCount = 0;
      for (const vacancy of vacancies) {
        try {
          const vacancyData = {
            external_id: vacancy.id,
            source: 'geekjob-nodejs',
            url: vacancy.url,
            title: vacancy.title,
            company: vacancy.company,
            salary: vacancy.salary,
            location: vacancy.location,
            description: vacancy.description,
            full_description: vacancy.full_description,
            requirements: vacancy.requirements,
            tasks: vacancy.tasks,
            benefits: vacancy.benefits,
            conditions: vacancy.conditions,
            published_at: new Date().toISOString(),
            status: 'pending'
          };
          
          const saved = db.saveVacancy(vacancyData);
          if (saved) savedCount++;
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏: ${error}`);
        }
      }
      
      console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount} –∏–∑ ${vacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    } else {
      console.log('‚ö†Ô∏è –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testNodeJSParser().catch(console.error);











