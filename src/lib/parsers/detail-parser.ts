// –ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö
import { chromium } from 'playwright';
import * as cheerio from 'cheerio';

export interface DetailedVacancy {
  id: string;
  title: string;
  company: string;
  salary: string;
  url: string;
  source: string;
  publishedAt: Date;
  // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  fullDescription: string;
  requirements: string;
  tasks: string;
  conditions: string;
  benefits: string;
  companyLogo?: string;
  companyUrl?: string;
  employmentType?: string;
  experienceLevel?: string;
  remoteType?: string;
}

export async function parseVacancyDetails(vacancyUrl: string, source: string): Promise<DetailedVacancy | null> {
  const browser = await chromium.launch({ headless: true });
  const page = await browser.newPage();

  try {
    console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${vacancyUrl}`);
    
    await page.goto(vacancyUrl, { waitUntil: 'networkidle', timeout: 30000 });
    await page.waitForTimeout(2000);

    const html = await page.content();
    const $ = cheerio.load(html);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const title = extractTitle($, source);
    const company = extractCompany($, source);
    const salary = extractSalary($, source);
    
    if (!title || !company) {
      console.log(`‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è ${vacancyUrl}`);
      return null;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const fullDescription = extractFullDescription($, source);
    const requirements = extractRequirements($, source);
    const tasks = extractTasks($, source);
    const conditions = extractConditions($, source);
    const benefits = extractBenefits($, source);
    const companyLogo = extractCompanyLogo($, source);
    const companyUrl = extractCompanyUrl($, source);
    const employmentType = extractEmploymentType($, source);
    const experienceLevel = extractExperienceLevel($, source);
    const remoteType = extractRemoteType($, source);

    const detailedVacancy: DetailedVacancy = {
      id: generateId(vacancyUrl),
      title,
      company,
      salary,
      url: vacancyUrl,
      source,
      publishedAt: new Date(),
      fullDescription,
      requirements,
      tasks,
      conditions,
      benefits,
      companyLogo,
      companyUrl,
      employmentType,
      experienceLevel,
      remoteType
    };

    console.log(`‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞: ${title}`);
    return detailedVacancy;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ${vacancyUrl}:`, error);
    return null;
  } finally {
    await browser.close();
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
function extractTitle($: cheerio.CheerioAPI, source: string): string {
  const selectors = {
    'HH.ru': 'h1[data-qa="vacancy-title"]',
    'Geekjob': 'h1.vacancy-title, .job-title',
    'HireHi': 'h1.job-title, .vacancy-title',
    'GetMatch': 'h1.vacancy-title, .job-title',
    'Habr': 'h1.vacancy-title, .job-title',
    'default': 'h1, .title, .job-title, .vacancy-title'
  };

  const selector = selectors[source as keyof typeof selectors] || selectors.default;
  return $(selector).first().text().trim() || '';
}

function extractCompany($: cheerio.CheerioAPI, source: string): string {
  const selectors = {
    'HH.ru': '[data-qa="vacancy-company-name"]',
    'Geekjob': '.company-name, .employer-name',
    'HireHi': '.company-name, .employer-name',
    'GetMatch': '.company-name, .employer-name',
    'Habr': '.company-name, .employer-name',
    'default': '.company-name, .employer-name, .company'
  };

  const selector = selectors[source as keyof typeof selectors] || selectors.default;
  return $(selector).first().text().trim() || '';
}

function extractSalary($: cheerio.CheerioAPI, source: string): string {
  const selectors = {
    'HH.ru': '[data-qa="vacancy-salary"]',
    'Geekjob': '.salary, .wage',
    'HireHi': '.salary, .wage',
    'GetMatch': '.salary, .wage',
    'Habr': '.salary, .wage',
    'default': '.salary, .wage, .compensation'
  };

  const selector = selectors[source as keyof typeof selectors] || selectors.default;
  return $(selector).first().text().trim() || '–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
}

function extractFullDescription($: cheerio.CheerioAPI, source: string): string {
  const selectors = {
    'HH.ru': '[data-qa="vacancy-description"]',
    'Geekjob': '.job-description, .vacancy-description, .b-vacancy-description',
    'HireHi': '.job-description, .vacancy-description, .b-vacancy-description',
    'GetMatch': '.b-vacancy-description, .job-description, .vacancy-description',
    'Habr': '.job-description, .vacancy-description, .b-vacancy-description',
    'default': '.description, .job-description, .vacancy-description, .b-vacancy-description'
  };

  const selector = selectors[source as keyof typeof selectors] || selectors.default;
  const element = $(selector).first();
  
  if (element.length) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    return element.html() || element.text().trim() || '';
  }
  
  return '';
}

function extractRequirements($: cheerio.CheerioAPI, source: string): string {
  // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è
  const mainBlock = $('.b-vacancy-description, [data-qa="vacancy-description"], .job-description, .vacancy-description').first();
  
  if (mainBlock.length) {
    // –ò—â–µ–º —Å–µ–∫—Ü–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –≤–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞
    const requirementKeywords = ['–æ–∂–∏–¥–∞–Ω–∏—è', 'expectations', '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è', 'requirements', '–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è', '–Ω–∞–≤—ã–∫–∏', 'skills'];
    
    for (const keyword of requirementKeywords) {
      const section = findSectionInBlock(mainBlock, keyword);
      if (section) {
        return section;
      }
    }
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
  const selectors = {
    'HH.ru': '[data-qa="vacancy-requirements"]',
    'Geekjob': '.requirements, .skills, .expectations',
    'HireHi': '.requirements, .skills, .expectations',
    'GetMatch': '.requirements, .skills, .expectations',
    'Habr': '.requirements, .skills, .expectations',
    'default': '.requirements, .skills, .qualifications, .expectations'
  };

  const selector = selectors[source as keyof typeof selectors] || selectors.default;
  const element = $(selector).first();
  
  if (element.length) {
    return element.html() || element.text().trim() || '';
  }
  
  return '';
}

function extractTasks($: cheerio.CheerioAPI, source: string): string {
  // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è
  const mainBlock = $('.b-vacancy-description, [data-qa="vacancy-description"], .job-description, .vacancy-description').first();
  
  if (mainBlock.length) {
    // –ò—â–µ–º —Å–µ–∫—Ü–∏–∏ —Å –∑–∞–¥–∞—á–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞
    const taskKeywords = ['–∑–∞–¥–∞—á–∏', 'tasks', '–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', 'responsibilities', '—á—Ç–æ –¥–µ–ª–∞—Ç—å'];
    
    for (const keyword of taskKeywords) {
      const section = findSectionInBlock(mainBlock, keyword);
      if (section) {
        return section;
      }
    }
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
  const selectors = {
    'HH.ru': '[data-qa="vacancy-tasks"]',
    'Geekjob': '.tasks, .responsibilities',
    'HireHi': '.tasks, .responsibilities',
    'GetMatch': '.tasks, .responsibilities',
    'Habr': '.tasks, .responsibilities',
    'default': '.tasks, .responsibilities, .duties'
  };

  const selector = selectors[source as keyof typeof selectors] || selectors.default;
  const element = $(selector).first();
  
  if (element.length) {
    return element.html() || element.text().trim() || '';
  }
  
  return '';
}

function extractConditions($: cheerio.CheerioAPI, source: string): string {
  // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è
  const mainBlock = $('.b-vacancy-description, [data-qa="vacancy-description"], .job-description, .vacancy-description').first();
  
  if (mainBlock.length) {
    // –ò—â–µ–º —Å–µ–∫—Ü–∏–∏ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –≤–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞
    const conditionKeywords = ['—É—Å–ª–æ–≤–∏—è', 'conditions', '—á—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º', '–º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º'];
    
    for (const keyword of conditionKeywords) {
      const section = findSectionInBlock(mainBlock, keyword);
      if (section) {
        return section;
      }
    }
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
  const selectors = {
    'HH.ru': '[data-qa="vacancy-conditions"]',
    'Geekjob': '.conditions, .benefits',
    'HireHi': '.conditions, .benefits',
    'GetMatch': '.conditions, .benefits',
    'Habr': '.conditions, .benefits',
    'default': '.conditions, .benefits, .offerings'
  };

  const selector = selectors[source as keyof typeof selectors] || selectors.default;
  const element = $(selector).first();
  
  if (element.length) {
    return element.html() || element.text().trim() || '';
  }
  
  return '';
}

function extractBenefits($: cheerio.CheerioAPI, source: string): string {
  // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è
  const mainBlock = $('.b-vacancy-description, [data-qa="vacancy-description"], .job-description, .vacancy-description').first();
  
  if (mainBlock.length) {
    // –ò—â–µ–º —Å–µ–∫—Ü–∏–∏ —Å –ª—å–≥–æ—Ç–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞
    const benefitKeywords = ['–ª—å–≥–æ—Ç—ã', 'benefits', '–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞', 'advantages', '—á—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ'];
    
    for (const keyword of benefitKeywords) {
      const section = findSectionInBlock(mainBlock, keyword);
      if (section) {
        return section;
      }
    }
  }

  return '';
}

function extractCompanyLogo($: cheerio.CheerioAPI, source: string): string {
  const selectors = {
    'HH.ru': '[data-qa="vacancy-company-logo"] img',
    'Geekjob': '.company-logo img, .employer-logo img',
    'HireHi': '.company-logo img, .employer-logo img',
    'GetMatch': '.company-logo img, .employer-logo img',
    'Habr': '.company-logo img, .employer-logo img',
    'default': '.company-logo img, .employer-logo img, .logo img'
  };

  const selector = selectors[source as keyof typeof selectors] || selectors.default;
  const img = $(selector).first();
  return img.attr('src') || img.attr('data-src') || '';
}

function extractCompanyUrl($: cheerio.CheerioAPI, source: string): string {
  const selectors = {
    'HH.ru': '[data-qa="vacancy-company-url"]',
    'Geekjob': '.company-url, .employer-url',
    'HireHi': '.company-url, .employer-url',
    'GetMatch': '.company-url, .employer-url',
    'Habr': '.company-url, .employer-url',
    'default': '.company-url, .employer-url, .company-link'
  };

  const selector = selectors[source as keyof typeof selectors] || selectors.default;
  return $(selector).first().attr('href') || '';
}

function extractEmploymentType($: cheerio.CheerioAPI, source: string): string {
  const employmentKeywords = ['–ø–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å', '—á–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å', '—É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '–ø—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞'];
  
  const text = $('body').text().toLowerCase();
  for (const keyword of employmentKeywords) {
    if (text.includes(keyword)) {
      return keyword;
    }
  }

  return '';
}

function extractExperienceLevel($: cheerio.CheerioAPI, source: string): string {
  const experienceKeywords = ['junior', 'middle', 'senior', 'lead', '–¥–∂—É–Ω–∏–æ—Ä', '–º–∏–¥–¥–ª', '—Å–µ–Ω—å–æ—Ä', '–ª–∏–¥'];
  
  const text = $('body').text().toLowerCase();
  for (const keyword of experienceKeywords) {
    if (text.includes(keyword)) {
      return keyword;
    }
  }

  return '';
}

function extractRemoteType($: cheerio.CheerioAPI, source: string): string {
  const remoteKeywords = ['—É–¥–∞–ª–µ–Ω–Ω–æ', 'remote', '–æ—Ñ–∏—Å', 'office', '–≥–∏–±—Ä–∏–¥', 'hybrid'];
  
  const text = $('body').text().toLowerCase();
  for (const keyword of remoteKeywords) {
    if (text.includes(keyword)) {
      return keyword;
    }
  }

  return '';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ü–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
function findSectionByKeyword($: cheerio.CheerioAPI, keyword: string): string {
  // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
  const headings = $(`h1, h2, h3, h4, h5, h6, .section-title, .block-title`).filter((_, el) => {
    return $(el).text().toLowerCase().includes(keyword.toLowerCase());
  });

  if (headings.length > 0) {
    const heading = headings.first();
    const content = heading.nextUntil('h1, h2, h3, h4, h5, h6, .section-title, .block-title').text().trim();
    if (content) {
      return content;
    }
  }

  // –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const text = $('body').text();
  const keywordIndex = text.toLowerCase().indexOf(keyword.toLowerCase());
  if (keywordIndex !== -1) {
    const start = Math.max(0, keywordIndex - 100);
    const end = Math.min(text.length, keywordIndex + 1000);
    return text.substring(start, end).trim();
  }

  return '';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞
function findSectionInBlock(block: cheerio.Cheerio<cheerio.Element>, keyword: string): string {
  // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
  const headings = block.find(`h1, h2, h3, h4, h5, h6, .section-title, .block-title, strong, b`).filter((_, el) => {
    return block.find(el).text().toLowerCase().includes(keyword.toLowerCase());
  });

  if (headings.length > 0) {
    const heading = headings.first();
    const headingElement = block.find(heading);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    let content = '';
    let nextElement = headingElement.next();
    
    while (nextElement.length > 0) {
      const tagName = nextElement.prop('tagName')?.toLowerCase();
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–µ
      if (tagName && ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tagName)) {
        break;
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º strong/b —ç–ª–µ–º–µ–Ω—Ç–µ
      if (tagName && ['strong', 'b'].includes(tagName)) {
        const text = nextElement.text().toLowerCase();
        if (text.includes('–æ–∂–∏–¥–∞–Ω–∏—è') || text.includes('–∑–∞–¥–∞—á–∏') || text.includes('—É—Å–ª–æ–≤–∏—è') || 
            text.includes('—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è') || text.includes('–ª—å–≥–æ—Ç—ã')) {
          break;
        }
      }
      
      content += nextElement.html() || nextElement.text() + '\n';
      nextElement = nextElement.next();
    }
    
    if (content.trim()) {
      return content.trim();
    }
  }

  // –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –±–ª–æ–∫–∞
  const text = block.text();
  const keywordIndex = text.toLowerCase().indexOf(keyword.toLowerCase());
  if (keywordIndex !== -1) {
    const start = Math.max(0, keywordIndex - 50);
    const end = Math.min(text.length, keywordIndex + 1000);
    return text.substring(start, end).trim();
  }

  return '';
}

function generateId(url: string): string {
  return `detail-${Buffer.from(url).toString('base64').slice(0, 10)}`;
}
