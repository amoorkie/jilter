// –ü–∞—Ä—Å–µ—Ä HH.ru —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —Ç–∏–ø—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
import { chromium } from 'playwright';
import { Vacancy } from './unified-parser';

export async function parseHHWithEmploymentFilter(
  query: string = "javascript",
  employmentType: string = "full_time"
): Promise<Vacancy[]> {
  const browser = await chromium.launch({ headless: true });
  const page = await browser.newPage();

  try {
    await page.setExtraHTTPHeaders({
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
    });

    // –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã HH.ru
    const employmentParams: Record<string, string> = {
      'full_time': 'employment=full',
      'part_time': 'employment=part', 
      'project': 'employment=project',
      'contract': 'employment=contract',
      'internship': 'employment=probation',
      'temporary': 'employment=temporary',
      'freelance': 'employment=freelance',
      'remote': 'schedule=remote'
    };

    const employmentParam = employmentParams[employmentType] || 'employment=full';
    
    // –°—Ç—Ä–æ–∏–º URL —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Ç–∏–ø—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    const url = `https://hh.ru/search/vacancy?text=${encodeURIComponent(query)}&area=1&${employmentParam}`;
    
    console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ HH.ru —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: ${employmentType} (${employmentParam})`);
    console.log(`üìÑ URL: ${url}`);

    await page.goto(url, { waitUntil: 'networkidle' });
    await page.waitForTimeout(2000);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è)
    const vacancies = await page.evaluate((config) => {
      const cards = document.querySelectorAll('[data-qa="vacancy-serp__vacancy"]');
      const results = [];
      
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${cards.length} –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º ${config.employmentType}`);
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 50 –≤–∞–∫–∞–Ω—Å–∏–π
      const limitedCards = Array.from(cards).slice(0, 50);
      
      limitedCards.forEach((card, index) => {
        try {
          const titleElement = card.querySelector('[data-qa="serp-item__title"]');
          const title = titleElement?.textContent?.trim() || '';
          
          const companyElement = card.querySelector('[data-qa="vacancy-serp__vacancy-employer"]');
          const company = companyElement?.textContent?.trim() || '';
          
          const salaryElement = card.querySelector('[data-qa="vacancy-serp__vacancy-compensation"]') || 
                               card.querySelector('.bloko-header-section-2');
          const salary = salaryElement?.textContent?.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
          
          const vacancyLink = card.querySelector('[data-qa="serp-item__title"]') as HTMLAnchorElement;
          const url = vacancyLink?.href || '';
          
          const logoElement = card.querySelector('.vacancy-serp-item__logo img');
          const logo = logoElement?.getAttribute('src') || '';
          
          const companyUrlElement = card.querySelector('[data-qa="vacancy-serp__vacancy-employer"]') as HTMLAnchorElement;
          const companyUrl = companyUrlElement?.href || '';

          if (title && company && url) {
            // –°—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤
            const developerKeywords = [
              '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'developer', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', 'programmer', '–∫–æ–¥–µ—Ä', 'coder',
              'frontend', 'backend', 'fullstack', 'mobile', 'devops', 'sre',
              'javascript', 'python', 'java', 'react', 'node', 'angular', 'vue',
              'php', 'ruby', 'go', 'rust', 'swift', 'kotlin', 'flutter',
              'html', 'css', 'sql', 'nosql', 'api', 'rest', 'graphql',
              'docker', 'kubernetes', 'aws', 'azure', 'gcp', 'terraform',
              'git', 'github', 'gitlab', 'bitbucket', 'ci/cd',
              'linux', 'unix', 'windows', 'macos', 'ios', 'android'
            ];

            const designerKeywords = [
              '–¥–∏–∑–∞–π–Ω–µ—Ä', 'designer', 'ui', 'ux', '–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π', '–≤–µ–±', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π', '–ø—Ä–æ–¥—É–∫—Ç',
              'figma', 'sketch', 'photoshop', 'illustrator', 'adobe'
            ];

            // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
            const excludeKeywords = [
              '–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥', 'marketing', '–º–µ–Ω–µ–¥–∂–µ—Ä', 'manager', '–∞–Ω–∞–ª–∏—Ç–∏–∫', 'analyst',
              '—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', 'tester', 'qa', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä', 'scientist', 'data',
              '–∫–æ–Ω—Ç–µ–Ω—Ç', 'content', '–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä', 'copywriter', 'smm', 'seo',
              '–ø—Ä–æ–¥–∞–∂–∏', 'sales', '—Ä–µ–∫—Ä—É—Ç–µ—Ä', 'hr', '–∫–∞–¥—Ä—ã', '–∫–∞–¥—Ä–æ–≤—ã–π'
            ];

            const isExcluded = excludeKeywords.some(keyword => title.toLowerCase().includes(keyword));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ò–õ–ò –¥–∏–∑–∞–π–Ω–µ—Ä –ò –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è
            const isDeveloper = developerKeywords.some(keyword => title.toLowerCase().includes(keyword));
            const isDesigner = designerKeywords.some(keyword => title.toLowerCase().includes(keyword));
            const isItVacancy = (isDeveloper || isDesigner) && !isExcluded;
            
            if (isItVacancy) {
              results.push({
                id: `hh-filtered-${config.employmentType}-${index}`,
                title,
                salary,
                company,
                url,
                companyLogo: logo ? (logo.startsWith('http') ? logo : `https://hh.ru${logo}`) : undefined,
                companyUrl: companyUrl ? (companyUrl.startsWith('http') ? companyUrl : `https://hh.ru${companyUrl}`) : undefined,
                employment: [config.employmentType] // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–∞
              });
              
              console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ IT-–≤–∞–∫–∞–Ω—Å–∏—è ${index + 1}: ${title} (${config.employmentType})`);
            } else {
              if (isExcluded) {
                console.log(`‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: ${title}`);
              } else {
                console.log(`‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ-IT –≤–∞–∫–∞–Ω—Å–∏—è: ${title}`);
              }
            }
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ${index}:`, error);
        }
      });

      return results;
    }, { employmentType });

    console.log(`üéâ –ù–∞–π–¥–µ–Ω–æ ${vacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ç–∏–ø–æ–º –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: ${employmentType}`);
    return vacancies;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HH.ru —Å —Ñ–∏–ª—å—Ç—Ä–æ–º ${employmentType}:`, error);
    return [];
  } finally {
    await browser.close();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
export async function parseAllEmploymentTypes(query: string = "javascript"): Promise<Vacancy[]> {
  console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}"`);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–∫–∞–Ω—Å–∏–π
  const employmentTypes = ['full_time', 'part_time', 'project', 'contract', 'remote'];
    const allVacancies: Vacancy[] = [];
  
  // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
  for (const employmentType of employmentTypes) {
    try {
      console.log(`\nüìã –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: ${employmentType}`);
      const vacancies = await parseHHWithEmploymentFilter(query, employmentType);
      allVacancies.push(...vacancies);
      
      // –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 500));
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${employmentType}:`, error);
    }
  }
  
  console.log(`\nüìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${allVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏`);
  return allVacancies;
}
