import { vacancyService, VacancyRecord } from '@/lib/database/vacancy-service';
import { analyzeVacancy } from '@/lib/ai/gemini-service';
import { parseAllVacancies } from './unified-parser';
import { Employment, Specialization } from '@/lib/types/employment';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
export interface ParsingStats {
  source: string;
  query: string;
  vacanciesFound: number;
  vacanciesParsed: number;
  aiAnalysisSuccess: number;
  aiAnalysisFailed: number;
  parsingDurationMs: number;
  startedAt: Date;
  completedAt: Date;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
export interface ParsingConfig {
  queries: string[];
  maxPages: number;
  aiEnabled: boolean;
  batchSize: number;
  delayBetweenBatches: number; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
}

export class BackgroundParser {
  private isRunning: boolean = false;
  private stats: ParsingStats[] = [];

  constructor() {
    this.isRunning = false;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   */
  async startBackgroundParsing(config: ParsingConfig): Promise<ParsingStats[]> {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return this.stats;
    }

    this.isRunning = true;
    this.stats = [];

    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...');

    try {
      // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
      for (const query of config.queries) {
        console.log(`üìã –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞: "${query}"`);
        
        const startTime = Date.now();
        const stats: ParsingStats = {
          source: 'all',
          query,
          vacanciesFound: 0,
          vacanciesParsed: 0,
          aiAnalysisSuccess: 0,
          aiAnalysisFailed: 0,
          parsingDurationMs: 0,
          startedAt: new Date(),
          completedAt: new Date()
        };

        try {
          // –ü–∞—Ä—Å–∏–º –≤–∞–∫–∞–Ω—Å–∏–∏
          const rawVacancies = await parseAllVacancies(query, config.maxPages);
          stats.vacanciesFound = rawVacancies.length;
          
          console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${rawVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}"`);

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –±–∞—Ç—á–∞–º–∏
          const batches = this.createBatches(rawVacancies, config.batchSize);
          
          for (let i = 0; i < batches.length; i++) {
            const batch = batches[i];
            console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ ${i + 1}/${batches.length} (${batch.length} –≤–∞–∫–∞–Ω—Å–∏–π)`);
            
            await this.processBatch(batch, config.aiEnabled, stats);
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            if (i < batches.length - 1) {
              await this.delay(config.delayBetweenBatches);
            }
          }

          stats.completedAt = new Date();
          stats.parsingDurationMs = Date.now() - startTime;
          
          console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å "${query}" –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ ${stats.parsingDurationMs}ms`);
          console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –Ω–∞–π–¥–µ–Ω–æ ${stats.vacanciesFound}, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${stats.vacanciesParsed}, AI —É—Å–ø–µ—à–Ω–æ ${stats.aiAnalysisSuccess}, AI –æ—à–∏–±–æ–∫ ${stats.aiAnalysisFailed}`);
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞ "${query}":`, error);
          stats.completedAt = new Date();
          stats.parsingDurationMs = Date.now() - startTime;
        }

        this.stats.push(stats);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if (query !== config.queries[config.queries.length - 1]) {
          await this.delay(config.delayBetweenBatches);
        }
      }

      console.log('üéâ –§–æ–Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!');
      return this.stats;

    } finally {
      this.isRunning = false;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á –≤–∞–∫–∞–Ω—Å–∏–π
   */
  private async processBatch(
    vacancies: any[],
    aiEnabled: boolean,
    stats: ParsingStats
  ): Promise<void> {
    const promises = vacancies.map(async (vacancy) => {
      try {
        let aiAnalysis;
        
        if (aiEnabled) {
          // AI-–∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏
          aiAnalysis = await analyzeVacancy(
            vacancy.title,
            vacancy.description,
            vacancy.company
          );
          stats.aiAnalysisSuccess++;
        } else {
          // Fallback –∞–Ω–∞–ª–∏–∑
          aiAnalysis = this.getFallbackAnalysis(vacancy);
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ë–î
        const vacancyRecord: Omit<VacancyRecord, 'id' | 'created_at' | 'updated_at'> = {
          external_id: vacancy.id || `${vacancy.source}_${Date.now()}_${Math.random()}`,
          title: vacancy.title,
          description: vacancy.description,
          company: vacancy.company,
          location: vacancy.location || '',
          url: vacancy.url,
          source: vacancy.source,
          published_at: vacancy.publishedAt ? new Date(vacancy.publishedAt) : new Date(),
          
          // AI-–∞–Ω–∞–ª–∏–∑
          ai_specialization: aiAnalysis.specialization,
          ai_employment: aiAnalysis.employment,
          ai_experience: aiAnalysis.experience,
          ai_technologies: aiAnalysis.technologies,
          ai_salary_min: aiAnalysis.salary.min,
          ai_salary_max: aiAnalysis.salary.max,
          ai_salary_currency: aiAnalysis.salary.currency,
          ai_remote: aiAnalysis.remote,
          ai_requirements: aiAnalysis.requirements,
          ai_benefits: aiAnalysis.benefits,
          ai_relevance_score: aiAnalysis.relevanceScore,
          ai_summary: aiAnalysis.summary,
          
          is_active: true,
          last_parsed_at: new Date()
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await vacancyService.saveVacancy(vacancyRecord);
        stats.vacanciesParsed++;

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancy.title}:`, error);
        stats.aiAnalysisFailed++;
      }
    });

    await Promise.all(promises);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –±–∞—Ç—á–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞
   */
  private createBatches<T>(array: T[], batchSize: number): T[][] {
    const batches: T[][] = [];
    for (let i = 0; i < array.length; i += batchSize) {
      batches.push(array.slice(i, i + batchSize));
    }
    return batches;
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * Fallback –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  private getFallbackAnalysis(vacancy: any): any {
    return {
      specialization: 'other' as Specialization,
      employment: ['full_time' as Employment],
      experience: 'middle' as const,
      technologies: [],
      salary: { currency: 'RUB' },
      remote: false,
      requirements: [],
      benefits: [],
      relevanceScore: 50,
      summary: '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  getStats(): ParsingStats[] {
    return this.stats;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø–∞—Ä—Å–∏–Ω–≥
   */
  isParsingRunning(): boolean {
    return this.isRunning;
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥
   */
  stopParsing(): void {
    this.isRunning = false;
    console.log('‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–∞—Ä—Å–µ—Ä–∞
export const backgroundParser = new BackgroundParser();



