// –ü–∞—Ä—Å–µ—Ä –¥–ª—è Designer.ru
import axios from 'axios';
import * as cheerio from 'cheerio';
import iconv from 'iconv-lite';

export interface Vacancy {
  id: string;
  title: string;
  company: string;
  salary: string;
  url: string;
  description?: string;
  location?: string;
  source: string;
  publishedAt?: Date;
}

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
const DESIGN_KEYWORDS = [
  '–¥–∏–∑–∞–π–Ω', '–¥–∏–∑–∞–π–Ω–µ—Ä', '–¥–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤', 'ui/ux', 'ux/ui', '–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω',
  '—Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–∏–∑–∞–π–Ω', '–≤–µ–±-–¥–∏–∑–∞–π–Ω', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–π –¥–∏–∑–∞–π–Ω', '–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω',
  '–≤–∏–∑—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω', '–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω', '–¥–∏–∑–∞–π–Ω-–º—ã—à–ª–µ–Ω–∏–µ', 'user experience',
  'user interface', 'ux-–¥–∏–∑–∞–π–Ω–µ—Ä', 'ui-–¥–∏–∑–∞–π–Ω–µ—Ä', '–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä', '–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä',
  '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä', '–≤–µ–±-–¥–∏–∑–∞–π–Ω–µ—Ä', '–≤–∏–∑—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä', 'motion-–¥–∏–∑–∞–π–Ω–µ—Ä',
  'ux-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', '–∞—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä', 'creative director', '–¥–∏–∑–∞–π–Ω–µ—Ä –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π',
  '–¥–∏–∑–∞–π–Ω–µ—Ä –±—Ä–µ–Ω–¥-–∏–¥–µ–Ω—Ç–∏–∫–∏', '–∏–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä', '3d-–¥–∏–∑–∞–π–Ω–µ—Ä', 'designer', 'ui designer',
  'ux designer', 'product designer', 'visual designer', 'graphic designer', 'web designer',
  'interaction designer', 'motion designer', 'ux researcher', 'art director', 'creative director'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
function isRelevantVacancy(title: string, description: string = ''): boolean {
  const text = `${title} ${description}`.toLowerCase();
  
  return DESIGN_KEYWORDS.some(keyword => 
    text.includes(keyword.toLowerCase())
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç –¥—É–±–ª–µ–π
function cleanCompanyName(company: string): string {
  let cleaned = company.replace(/&nbsp;/g, ' ').replace(/\s+/g, ' ').trim();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ—á–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
  const companyLength = cleaned.length;
  if (companyLength > 10) {
    const halfLength = Math.floor(companyLength / 2);
    const firstHalf = cleaned.substring(0, halfLength);
    const secondHalf = cleaned.substring(halfLength);

    // –ï—Å–ª–∏ –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –¢–û–ß–ù–û –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–µ—Ä–≤—É—é
    if (firstHalf === secondHalf && firstHalf.length > 5) {
      cleaned = firstHalf;
    }
  }
  
  return cleaned;
}

export async function parseDesignerRuVacancies(query: string = '–¥–∏–∑–∞–π–Ω–µ—Ä', pages: number = 3): Promise<Vacancy[]> {
  const vacancies: Vacancy[] = [];
  
  console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Designer.ru –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π`);
  console.log(`üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${query}"`);
  console.log(`üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${pages}`);
  
  for (let i = 0; i < pages; i++) {
      const url = `https://designer.ru/`;
    try {
      console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ Designer.ru —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${i + 1}: ${url}`);
      
      const response = await axios.get(url, { 
        responseType: 'arraybuffer',
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
          'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
          'Accept-Encoding': 'gzip, deflate, br',
          'Connection': 'keep-alive',
          'Upgrade-Insecure-Requests': '1'
        }
      });
      
      const html = iconv.decode(Buffer.from(response.data), 'utf-8');
      const $ = cheerio.load(html);

      let pageVacancies = 0;
      let relevantVacancies = 0;

      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π
      const vacancySelectors = [
        '.vacancy-card',
        '.vacancy-item',
        '.job-card',
        '[data-vacancy]',
        '.vacancy',
        '.post'
      ];

      let $vacancies = $();
      for (const selector of vacancySelectors) {
        $vacancies = $(selector);
        if ($vacancies.length > 0) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector} (${$vacancies.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`);
          break;
        }
      }

      if ($vacancies.length === 0) {
        console.log(`‚ö†Ô∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${i + 1} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π`);
        continue;
      }

      $vacancies.each((index, element) => {
        try {
          // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
          const titleSelectors = [
            'a[href*="/vacancy/"]',
            'a[href*="/job/"]',
            '.vacancy-title',
            '.job-title',
            'h3 a',
            'h2 a',
            'a'
          ];
          
          let title = '';
          let url = '';
          for (const selector of titleSelectors) {
            const titleElement = $(element).find(selector).first();
            title = titleElement.text().trim();
            url = titleElement.attr('href') || '';
            if (title && url) break;
          }

          if (!title || !url) {
            console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é ${index}: –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∏`);
            return;
          }

          // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
          const companySelectors = [
            '.company-name',
            '.vacancy-company',
            '.job-company',
            'a[href*="/company/"]',
            '.employer-name'
          ];
          
          let company = '';
          for (const selector of companySelectors) {
            const companyElement = $(element).find(selector);
            company = companyElement.text().trim();
            if (company) break;
          }

          if (!company) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            company = '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
            console.log(`‚ö†Ô∏è –í–∞–∫–∞–Ω—Å–∏—è "${title}": –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É`);
          }

          company = cleanCompanyName(company);

          // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã
          const salarySelectors = [
            '.salary',
            '.vacancy-salary',
            '.job-salary',
            '[class*="salary"]',
            '[class*="money"]'
          ];
          
          let salary = '';
          for (const selector of salarySelectors) {
            const salaryElement = $(element).find(selector);
            salary = salaryElement.text().trim();
            if (salary) break;
          }

          // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
          if (!salary) {
            const allText = $(element).text();
            const salaryMatch = allText.match(/\d+[\s,]*\d*\s*[‚ÇΩ—Ä—É–±]/);
            if (salaryMatch) {
              salary = salaryMatch[0];
            }
          }

          if (!salary) {
            salary = '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
          }

          // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
          const descriptionSelectors = [
            '.vacancy-description',
            '.job-description',
            '.description',
            '.snippet',
            'p'
          ];
          
          let description = '';
          for (const selector of descriptionSelectors) {
            const descElement = $(element).find(selector);
            description = descElement.text().trim();
            if (description) break;
          }

          // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
          const locationSelectors = [
            '.location',
            '.city',
            '.vacancy-location',
            '.job-location',
            '[class*="location"]'
          ];
          
          let location = '';
          for (const selector of locationSelectors) {
            const locElement = $(element).find(selector);
            location = locElement.text().trim();
            if (location) break;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
          if (!isRelevantVacancy(title, description)) {
            console.log(`‚ùå –ù–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: "${title}"`);
            return;
          }

          pageVacancies++;
          relevantVacancies++;

          vacancies.push({
            id: `designer-ru-${i}-${index}`,
            title,
            company,
            salary,
            url: url.startsWith('http') ? url : `https://designer.ru${url}`,
            description,
            location,
            source: 'designer-ru',
            publishedAt: new Date()
          });

          console.log(`‚úÖ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: "${title}" - ${company}`);

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ ${index}:`, error);
        }
      });

      console.log(`üìä Designer.ru —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${i + 1}: ${pageVacancies} –≤–∞–∫–∞–Ω—Å–∏–π, ${relevantVacancies} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö`);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Designer.ru —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${i + 1}:`, error);
    }
  }

  console.log(`üéØ Designer.ru –∏—Ç–æ–≥–æ: ${vacancies.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π`);
  return vacancies;
}
