// src/lib/parsers/unified-parser.ts
import { parseGeekjobVacancies } from './geekjob';
import { parseHHVacancies } from './hh';
import { parseEnhancedVacancies } from './enhanced-parser';
import { parseAllWithPagination } from './pagination-parser';
import { parseHireHiVacancies } from './hirehi/parser';
import { saveVacancy } from '../database/service';

export interface Vacancy {
  id: string;
  title: string;
  salary: string;
  company: string;
  url: string;
  companyLogo?: string;
  companyUrl?: string;
  source: 'geekjob' | 'hh' | 'hirehi';
  employment?: string[]; // –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
  score?: number; // Added for soft filtering
  reasons?: string[]; // Added for soft filtering
}

export const parseAllVacancies = async (query: string = "javascript", maxVacancies: number = 200): Promise<Vacancy[]> => {
  console.log(`üîç –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}"`);
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const [geekjobVacancies, hhVacancies, hirehiVacancies] = await Promise.all([
      parseEnhancedVacancies('geekjob', query, Math.floor(maxVacancies / 3)).catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Geekjob:', error);
        return [];
      }),
      parseEnhancedVacancies('hh', query, Math.floor(maxVacancies / 3)).catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HH.ru:', error);
        return [];
      }),
      parseHireHiVacancies(query, 3).catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HireHi:', error);
        return [];
      })
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
    const geekjobWithSource = geekjobVacancies.map(vacancy => ({
      ...vacancy,
      source: 'geekjob' as const
    }));

    const hhWithSource = hhVacancies.map(vacancy => ({
      ...vacancy,
      source: 'hh' as const
    }));

    const hirehiWithSource = hirehiVacancies.map(vacancy => ({
      ...vacancy,
      source: 'hirehi' as const
    }));

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    const allVacancies = [...geekjobWithSource, ...hhWithSource, ...hirehiWithSource];

    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:`);
    console.log(`   Geekjob: ${geekjobVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    console.log(`   HH.ru: ${hhVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    console.log(`   HireHi: ${hirehiVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    console.log(`   –í—Å–µ–≥–æ: ${allVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    const savedVacancies = [];
    
    for (const vacancy of allVacancies) {
      try {
        const savedVacancy = await saveVacancy({
          source: vacancy.source,
          url: vacancy.url,
          title: vacancy.title,
          company: vacancy.company,
          companyUrl: vacancy.companyUrl,
          description: `–í–∞–∫–∞–Ω—Å–∏—è: ${vacancy.title}\n–ö–æ–º–ø–∞–Ω–∏—è: ${vacancy.company}\n–ó–∞—Ä–ø–ª–∞—Ç–∞: ${vacancy.salary}`,
          // TODO: –î–æ–±–∞–≤–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –∏–∑ –ø–∞—Ä—Å–µ—Ä–æ–≤
        });
        
        if (savedVacancy) {
          savedVacancies.push(savedVacancy);
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancy.id}:`, error);
      }
    }

    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: ${savedVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);

    return allVacancies;

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:', error);
    return [];
  }
};

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (—Å–æ–±–∏—Ä–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
 */
export const parseAllVacanciesWithPagination = async (
  query: string = "javascript", 
  maxPages: number = 5
): Promise<Vacancy[]> => {
  console.log(`üîç –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}" (–º–∞–∫—Å–∏–º—É–º ${maxPages} —Å—Ç—Ä–∞–Ω–∏—Ü)`);
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—Å–µ—Ä —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const allVacancies = await parseAllWithPagination(query, maxPages);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    const savedVacancies = [];
    
    for (const vacancy of allVacancies) {
      try {
        const savedVacancy = await saveVacancy({
          source: vacancy.source,
          url: vacancy.url,
          title: vacancy.title,
          company: vacancy.company,
          companyUrl: vacancy.companyUrl,
          description: `–í–∞–∫–∞–Ω—Å–∏—è: ${vacancy.title}\n–ö–æ–º–ø–∞–Ω–∏—è: ${vacancy.company}\n–ó–∞—Ä–ø–ª–∞—Ç–∞: ${vacancy.salary}`,
        });
        
        if (savedVacancy) {
          savedVacancies.push(savedVacancy);
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancy.id}:`, error);
      }
    }

    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: ${savedVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);

    return allVacancies;

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π:', error);
    return [];
  }
};
