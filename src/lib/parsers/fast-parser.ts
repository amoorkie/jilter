// –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è Habr (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
import { parseHabrVacancies } from './habr/parser';

export interface Vacancy {
  id: string;
  title: string;
  company: string;
  salary: string;
  url: string;
  description?: string;
  location?: string;
  source: string;
  publishedAt?: Date;
}

export async function parseFastDesignVacancies(maxVacancies: number = 20): Promise<Vacancy[]> {
  console.log(`üöÄ –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ Habr (–º–∞–∫—Å–∏–º—É–º ${maxVacancies} –≤–∞–∫–∞–Ω—Å–∏–π)`);
  
  try {
    // –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ Habr (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
    const habrVacancies = await parseHabrVacancies('–¥–∏–∑–∞–π–Ω–µ—Ä', 1);
    console.log(`üìä Habr: ${habrVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    
    return habrVacancies.slice(0, maxVacancies);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:`, error);
    return [];
  }
}







