// –†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤–∞–∫–∞–Ω—Å–∏–π
import { chromium } from 'playwright';
import { Vacancy } from './unified-parser';

export async function parseRealEmployment(vacancyUrl: string): Promise<string[]> {
  const browser = await chromium.launch({ headless: true });
  const page = await browser.newPage();

  try {
    await page.setExtraHTTPHeaders({
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
    });

    console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∞–∫–∞–Ω—Å–∏–∏: ${vacancyUrl}`);
    
    await page.goto(vacancyUrl, { waitUntil: 'networkidle' });
    await page.waitForTimeout(2000);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    const employmentInfo = await page.evaluate(() => {
      const employmentTypes: string[] = [];
      
      // –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
      const selectors = [
        '[data-qa="vacancy-view-employment-mode"]',
        '[data-qa="vacancy-view-schedule"]', 
        '.vacancy-employment-mode',
        '.vacancy-schedule',
        '.bloko-text_strong',
        '.bloko-text_secondary'
      ];
      
      for (const selector of selectors) {
        const elements = document.querySelectorAll(selector);
        elements.forEach(el => {
          const text = el.textContent?.trim() || '';
          if (text && text.length < 100) {
            console.log(`–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: "${text}" (—Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector})`);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
            if (text.includes('–ø–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å') || text.includes('full-time')) {
              employmentTypes.push('full_time');
            }
            if (text.includes('—á–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å') || text.includes('part-time')) {
              employmentTypes.push('part_time');
            }
            if (text.includes('–ø—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞') || text.includes('–∑–∞ –ø—Ä–æ–µ–∫—Ç')) {
              employmentTypes.push('project');
            }
            if (text.includes('–∫–æ–Ω—Ç—Ä–∞–∫—Ç')) {
              employmentTypes.push('contract');
            }
            if (text.includes('—Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞') || text.includes('—Å—Ç–∞–∂–µ—Ä')) {
              employmentTypes.push('internship');
            }
            if (text.includes('–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞')) {
              employmentTypes.push('temporary');
            }
            if (text.includes('—Ñ—Ä–∏–ª–∞–Ω—Å') || text.includes('–∑–∞ —É—Å–ª—É–≥—É')) {
              employmentTypes.push('freelance');
            }
            if (text.includes('—É–¥–∞–ª—ë–Ω–Ω–æ') || text.includes('—É–¥–∞–ª–µ–Ω–Ω–æ') || text.includes('remote')) {
              employmentTypes.push('remote');
            }
          }
        });
      }
      
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (employmentTypes.length === 0) {
        const allText = document.body.textContent || '';
        console.log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        
        if (allText.includes('–ø–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å') || allText.includes('full-time')) {
          employmentTypes.push('full_time');
        }
        if (allText.includes('—á–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å') || allText.includes('part-time')) {
          employmentTypes.push('part_time');
        }
        if (allText.includes('–ø—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞') || allText.includes('–∑–∞ –ø—Ä–æ–µ–∫—Ç')) {
          employmentTypes.push('project');
        }
        if (allText.includes('–∫–æ–Ω—Ç—Ä–∞–∫—Ç')) {
          employmentTypes.push('contract');
        }
        if (allText.includes('—Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞') || allText.includes('—Å—Ç–∞–∂–µ—Ä')) {
          employmentTypes.push('internship');
        }
        if (allText.includes('–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞')) {
          employmentTypes.push('temporary');
        }
        if (allText.includes('—Ñ—Ä–∏–ª–∞–Ω—Å') || allText.includes('–∑–∞ —É—Å–ª—É–≥—É')) {
          employmentTypes.push('freelance');
        }
        if (allText.includes('—É–¥–∞–ª—ë–Ω–Ω–æ') || allText.includes('—É–¥–∞–ª–µ–Ω–Ω–æ') || allText.includes('remote')) {
          employmentTypes.push('remote');
        }
      }
      
      return employmentTypes;
    });

    console.log(`üéØ –†–µ–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –¥–ª—è ${vacancyUrl}: [${employmentInfo.join(', ')}]`);
    return employmentInfo;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ ${vacancyUrl}:`, error);
    return ['full_time']; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  } finally {
    await browser.close();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
export async function updateVacanciesWithRealEmployment(vacancies: Vacancy[]): Promise<Vacancy[]> {
  console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º ${vacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏...`);
  
  // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –∑–∞–º–µ–¥–ª—è—Ç—å —Å–∏—Å—Ç–µ–º—É
  // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
  console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è`);
  
  return vacancies;
}
