// –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
import { parseAllEmploymentTypes } from './hh-filtered-parser';
import { parseAllWithPagination } from './pagination-parser';
import { updateVacanciesWithRealEmployment } from './real-employment-parser';
import { parseHabrVacancies } from './habr/parser';
import { parseDesignerRuVacancies } from './designer-ru/parser';
import { parseGetMatchVacancies } from './getmatch/parser';
import { parseTelegramChannels } from './telegram/enhanced-parser';
import { parseHHVacancies } from './hh/parser';
import { parseLinkedInVacancies } from './linkedin/parser';

export interface Vacancy {
  id: string;
  title: string;
  company: string;
  salary: string;
  url: string;
  description?: string;
  location?: string;
  source: string;
  publishedAt?: Date;
}

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
const DESIGN_QUERIES = [
  '–¥–∏–∑–∞–π–Ω–µ—Ä',
  'ui/ux –¥–∏–∑–∞–π–Ω–µ—Ä',
  'ux/ui –¥–∏–∑–∞–π–Ω–µ—Ä', 
  '–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä',
  '–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä',
  '–≤–µ–±-–¥–∏–∑–∞–π–Ω–µ—Ä',
  '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä',
  '–≤–∏–∑—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä',
  'motion –¥–∏–∑–∞–π–Ω–µ—Ä',
  'ux –¥–∏–∑–∞–π–Ω–µ—Ä',
  'ui –¥–∏–∑–∞–π–Ω–µ—Ä',
  '–¥–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤',
  '–¥–∏–∑–∞–π–Ω–µ—Ä –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π',
  '–∞—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä',
  'creative director',
  'product designer',
  'ui designer',
  'ux designer',
  'visual designer',
  'graphic designer',
  'web designer',
  'interaction designer',
  'motion designer',
  'ux researcher',
  'art director'
];

export async function parseAllDesignVacancies(maxVacancies: number = 200): Promise<Vacancy[]> {
  console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π —Å–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤`);
  console.log(`üìä –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${maxVacancies}`);
  
  const allVacancies: Vacancy[] = [];
  
  try {
    console.log(`\nüîç –ü–∞—Ä—Å–∏–Ω–≥ —Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...`);
    
    // –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ —Å –±—ã—Å—Ç—Ä—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const [habrVacancies, getmatchVacancies] = await Promise.all([
      parseHabrVacancies('–¥–∏–∑–∞–π–Ω–µ—Ä', 2).catch(error => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –•–∞–±—Ä –ö–∞—Ä—å–µ—Ä–∞:`, error);
        return [];
      }),
      parseGetMatchVacancies('–¥–∏–∑–∞–π–Ω–µ—Ä', 1).catch(error => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GetMatch:`, error);
        return [];
      })
    ]);
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
    const hhVacancies: any[] = [];
    const geekjobVacancies: any[] = [];
    const hirehiVacancies: any[] = [];
    const designerRuVacancies: any[] = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    allVacancies.push(...hhVacancies, ...geekjobVacancies, ...hirehiVacancies, ...habrVacancies, ...designerRuVacancies, ...getmatchVacancies);
    
    // –ü–∞—Ä—Å–∏–º LinkedIn (–Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
    try {
      console.log(`\nüîç –ü–∞—Ä—Å–∏–Ω–≥ LinkedIn...`);
      const linkedinVacancies = await parseLinkedInVacancies('–¥–∏–∑–∞–π–Ω–µ—Ä', 2);
      allVacancies.push(...linkedinVacancies);
      console.log(`üìä LinkedIn: ${linkedinVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    } catch (error) {
      console.log(`‚ö†Ô∏è LinkedIn –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω: ${error}`);
    }
    
    console.log(`üìä –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: ${allVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    
  // –ü–∞—Ä—Å–∏–º Telegram-–∫–∞–Ω–∞–ª—ã (—É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥)
  try {
    console.log(`\nüîç –ü–∞—Ä—Å–∏–Ω–≥ Telegram-–∫–∞–Ω–∞–ª–æ–≤...`);
    const telegramVacancies = await parseTelegramChannels([
      'designhunters',  // ‚úÖ RSS —Ä–∞–±–æ—Ç–∞–µ—Ç (20 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
      'designjobs',     // ‚úÖ RSS —Ä–∞–±–æ—Ç–∞–µ—Ç (20 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)  
      'itjobs',         // ‚úÖ RSS —Ä–∞–±–æ—Ç–∞–µ—Ç (20 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
      'startupjobs'     // ‚úÖ RSS —Ä–∞–±–æ—Ç–∞–µ—Ç (20 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    ], 20);
    allVacancies.push(...telegramVacancies);
    console.log(`üìä Telegram: ${telegramVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
  } catch (error) {
    console.log(`‚ö†Ô∏è Telegram –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω: ${error}`);
  }
    
    // –ï—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –ø—Ä–æ–±—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if (allVacancies.length < maxVacancies) {
      console.log(`\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã...`);
      
      for (const query of DESIGN_QUERIES.slice(0, 5)) { // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤
        try {
          const [hhVacancies, habrVacancies] = await Promise.all([
            parseHHVacancies(query, 1).catch(() => []),
            parseHabrVacancies(query, 1).catch(() => [])
          ]);
          
          const queryVacancies = [...hhVacancies, ...habrVacancies];
          console.log(`üìä –ó–∞–ø—Ä–æ—Å "${query}": ${queryVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
          
          allVacancies.push(...queryVacancies);
          
          // –ï—Å–ª–∏ —É–∂–µ –Ω–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
          if (allVacancies.length >= maxVacancies) {
            console.log(`‚úÖ –ù–∞–±—Ä–∞–ª–∏ ${allVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥`);
            break;
          }
          
          // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 1000));
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${query}":`, error);
        }
      }
    }
    
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:`, error);
  }
  
  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –ø–æ URL
  const uniqueVacancies = allVacancies.reduce((acc, vacancy) => {
    const existingIndex = acc.findIndex(v => v.url === vacancy.url);
    if (existingIndex === -1) {
      acc.push(vacancy);
    } else {
      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥—É–±–ª—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é
      if (vacancy.description && !acc[existingIndex].description) {
        acc[existingIndex] = vacancy;
      }
    }
    return acc;
  }, [] as Vacancy[]);
  
  console.log(`\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!`);
  console.log(`üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${allVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
  console.log(`üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${uniqueVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
  console.log(`üìä –£–±—Ä–∞–Ω–æ –¥—É–±–ª–µ–π: ${allVacancies.length - uniqueVacancies.length}`);
  
  return uniqueVacancies.slice(0, maxVacancies);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
export async function parseDesignVacancies(query: string, maxVacancies: number = 50): Promise<Vacancy[]> {
  console.log(`üéØ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}"`);
  
  try {
    const [hhVacancies, geekjobVacancies, hirehiVacancies] = await Promise.all([
      parseHHVacancies(query, 2).catch(error => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HH.ru:`, error);
        return [];
      }),
      parseGeekjobVacancies(query, 1).catch(error => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Geekjob:`, error);
        return [];
      }),
      parseHireHiVacancies(query, 1).catch(error => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HireHi:`, error);
        return [];
      })
    ]);
    
    const allVacancies = [...hhVacancies, ...geekjobVacancies, ...hirehiVacancies];
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –ø–æ URL
    const uniqueVacancies = allVacancies.reduce((acc, vacancy) => {
      const existingIndex = acc.findIndex(v => v.url === vacancy.url);
      if (existingIndex === -1) {
        acc.push(vacancy);
      }
      return acc;
    }, [] as Vacancy[]);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${allVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${uniqueVacancies.length}`);
    
    return uniqueVacancies.slice(0, maxVacancies);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:`, error);
    return [];
  }
}