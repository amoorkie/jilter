// src/lib/parsers/hh/api-parser.ts
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API HH.ru –≤–º–µ—Å—Ç–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML

import axios from 'axios';

export interface HHVacancy {
  id: string;
  name: string;
  salary: {
    from?: number;
    to?: number;
    currency: string;
    gross: boolean;
  } | null;
  employer: {
    id: string;
    name: string;
    logo_urls?: {
      original?: string;
    };
  };
  area: {
    id: string;
    name: string;
  };
  url: string;
  published_at: string;
  snippet: {
    requirement?: string;
    responsibility?: string;
  };
}

export interface HHResponse {
  items: HHVacancy[];
  found: number;
  pages: number;
  per_page: number;
  page: number;
}

export const parseHHVacanciesAPI = async (query: string = "javascript", maxPages: number = 5): Promise<any[]> => {
  const allVacancies: any[] = [];
  
  try {
    console.log(`üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API HH.ru –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}"`);
    
    for (let page = 0; page < maxPages; page++) {
      const apiUrl = `https://api.hh.ru/vacancies`;
      
      const params = {
        text: query,
        area: 1, // –ú–æ—Å–∫–≤–∞
        page: page,
        per_page: 20,
        order_by: 'publication_time',
        only_with_salary: false
      };
      
      console.log(`üìÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page + 1}...`);
      
      const response = await axios.get(apiUrl, {
        params,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          'Accept': 'application/json',
        },
        timeout: 10000
      });
      
      const data: HHResponse = response.data;
      
      if (!data.items || data.items.length === 0) {
        console.log(`‚ö†Ô∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page + 1} –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥`);
        break;
      }
      
      const pageVacancies = data.items.map((vacancy: HHVacancy) => ({
        id: `hh-api-${vacancy.id}`,
        title: vacancy.name,
        salary: vacancy.salary 
          ? `${vacancy.salary.from || ''} - ${vacancy.salary.to || ''} ${vacancy.salary.currency}`.trim()
          : '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        company: vacancy.employer.name,
        url: vacancy.url,
        description: `${vacancy.snippet.requirement || ''} ${vacancy.snippet.responsibility || ''}`.trim() || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        companyLogo: vacancy.employer.logo_urls?.original,
        companyUrl: `https://hh.ru/employer/${vacancy.employer.id}`,
        location: vacancy.area.name,
        publishedAt: vacancy.published_at
      }));
      
      console.log(`üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}: –Ω–∞–π–¥–µ–Ω–æ ${pageVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
      allVacancies.push(...pageVacancies);
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log(`üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π —á–µ—Ä–µ–∑ API: ${allVacancies.length}`);
    return allVacancies;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API HH.ru:', error);
    return [];
  }
};




