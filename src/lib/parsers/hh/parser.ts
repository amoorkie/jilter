// lib/hh-parser.ts
import { chromium } from 'playwright';

export interface Vacancy {
  id: string;
  title: string;
  salary: string;
  company: string;
  url: string;
  companyLogo?: string;
  companyUrl?: string;
  description?: string;
  city?: string;
  salary_from?: number;
  salary_to?: number;
  is_remote?: boolean;
}

export const parseHHVacancies = async (query: string = "javascript"): Promise<Vacancy[]> => {
  const browser = await chromium.launch({ headless: true });
  const page = await browser.newPage();

  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent –∏ –¥—Ä—É–≥–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    await page.setExtraHTTPHeaders({
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
    });

    console.log(`üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º HH.ru: https://hh.ru/search/vacancy?text=${query}`);
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
    await page.goto(`https://hh.ru/search/vacancy?text=${encodeURIComponent(query)}&area=1`, {
      waitUntil: 'networkidle',
    });

    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
    await page.waitForSelector('[data-qa="vacancy-serp__vacancy"]', { timeout: 10000 });

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
    await page.waitForTimeout(2000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
    const vacancyCount = await page.evaluate(() => {
      return document.querySelectorAll('[data-qa="vacancy-serp__vacancy"]').length;
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${vacancyCount}`);

    if (vacancyCount === 0) {
      console.log('‚ö†Ô∏è –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
      return [];
    }

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const vacancies = await page.evaluate(() => {
      const cards = document.querySelectorAll('[data-qa="vacancy-serp__vacancy"]');
      const results = [];

      console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${cards.length} –∫–∞—Ä—Ç–æ—á–µ–∫...`);

      cards.forEach((card, index) => {
        try {
          // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–∏
          const titleElement = card.querySelector('[data-qa="serp-item__title"]');
          const title = titleElement?.textContent?.trim() || '';

          // –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é - –∏—â–µ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
          const allLinks = Array.from(card.querySelectorAll('a'));
          const vacancyLink = allLinks.find(link => 
            link.getAttribute('href')?.includes('/vacancy/')
          );
          const url = vacancyLink?.getAttribute('href') || '';

          // –ö–æ–º–ø–∞–Ω–∏—è - –∏—â–µ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
          const companyLinks = allLinks.filter(link => 
            link.getAttribute('href')?.includes('/employer/')
          );
          const companyElement = companyLinks.find(link => link.textContent?.trim()) || companyLinks[0];
          const company = companyElement?.textContent?.trim() || '';

          // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é
          const companyUrl = companyElement?.getAttribute('href') || '';

          // –õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏
          const logoElement = card.querySelector('img[src*="employer-logo"]');
          const logo = logoElement?.getAttribute('src') || '';

          // –ó–∞—Ä–ø–ª–∞—Ç–∞ - –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏
          const salaryText = Array.from(card.querySelectorAll('*')).find(el => {
            const text = el.textContent || '';
            return text.includes('‚ÇΩ') || 
                   text.includes('—Ä—É–±') ||
                   text.match(/\d+\s*[‚ÇΩ—Ä—É–±]/) ||
                   text.includes('–∑–∞ –º–µ—Å—è—Ü') ||
                   text.includes('–∑–∞ –≥–æ–¥');
          });

          const salary = salaryText?.textContent?.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';

          if (title && company && url) {
            results.push({
              id: `hh-${index}`,
              title,
              salary,
              company,
              url: url.startsWith('http') ? url : `https://hh.ru${url}`,
              companyLogo: logo ? (logo.startsWith('http') ? logo : `https://hh.ru${logo}`) : undefined,
              companyUrl: companyUrl ? (companyUrl.startsWith('http') ? companyUrl : `https://hh.ru${companyUrl}`) : undefined
            });
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è ${index + 1}: ${title} –≤ ${company}`);
          } else {
            console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É ${index}: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (title: ${!!title}, company: ${!!company}, url: ${!!url})`);
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ${index}:`, error);
        }
      });

      console.log(`üìä –ò—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${cards.length}, —É—Å–ø–µ—à–Ω–æ: ${results.length}`);
      return results;
    });

    console.log(`‚úÖ –°–æ–±—Ä–∞–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: ${vacancies.length}`);
    return vacancies;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HH.ru:', error);
    return [];
  } finally {
    await browser.close();
  }
};
