// LinkedIn –ø–∞—Ä—Å–µ—Ä –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
import axios from 'axios';
import * as cheerio from 'cheerio';

export interface LinkedInVacancy {
  id: string;
  title: string;
  company: string;
  salary: string;
  url: string;
  description?: string;
  location?: string;
  source: string;
  publishedAt?: Date;
}

const DESIGN_KEYWORDS = [
  '–¥–∏–∑–∞–π–Ω', '–¥–∏–∑–∞–π–Ω–µ—Ä', '–¥–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤', 'ui/ux', 'ux/ui', '–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω',
  '—Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–∏–∑–∞–π–Ω', '–≤–µ–±-–¥–∏–∑–∞–π–Ω', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–π –¥–∏–∑–∞–π–Ω', '–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω',
  '–≤–∏–∑—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω', '–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω', '–¥–∏–∑–∞–π–Ω-–º—ã—à–ª–µ–Ω–∏–µ', 'user experience',
  'user interface', 'ux-–¥–∏–∑–∞–π–Ω–µ—Ä', 'ui-–¥–∏–∑–∞–π–Ω–µ—Ä', '–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä', '–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä',
  '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä', '–≤–µ–±-–¥–∏–∑–∞–π–Ω–µ—Ä', '–≤–∏–∑—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä', 'motion-–¥–∏–∑–∞–π–Ω–µ—Ä',
  'ux-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', '–∞—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä', 'creative director', '–¥–∏–∑–∞–π–Ω–µ—Ä –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π',
  '–¥–∏–∑–∞–π–Ω–µ—Ä –±—Ä–µ–Ω–¥-–∏–¥–µ–Ω—Ç–∏–∫–∏', '–∏–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä', '3d-–¥–∏–∑–∞–π–Ω–µ—Ä', 'designer', 'ui designer',
  'ux designer', 'product designer', 'visual designer', 'graphic designer', 'web designer',
  'interaction designer', 'motion designer', 'ux researcher', 'art director', 'creative director'
];

function isRelevantVacancy(title: string, description: string = ''): boolean {
  const text = `${title} ${description}`.toLowerCase();
  return DESIGN_KEYWORDS.some(keyword => text.includes(keyword.toLowerCase()));
}

function cleanCompanyName(company: string): string {
  let cleaned = company.replace(/&nbsp;/g, ' ').replace(/\s+/g, ' ').trim();
  const companyLength = cleaned.length;
  if (companyLength > 10) {
    const halfLength = Math.floor(companyLength / 2);
    const firstHalf = cleaned.substring(0, halfLength);
    const secondHalf = cleaned.substring(halfLength);
    if (firstHalf === secondHalf && firstHalf.length > 5) {
      cleaned = firstHalf;
    }
  }
  return cleaned;
}

export async function parseLinkedInVacancies(query: string = '–¥–∏–∑–∞–π–Ω–µ—Ä', pages: number = 2): Promise<LinkedInVacancy[]> {
  const allVacancies: LinkedInVacancy[] = [];

  try {
    console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ LinkedIn –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π`);
    console.log(`üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${query}"`);
    console.log(`üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${pages}`);

    for (let i = 0; i < pages; i++) {
      const url = `https://www.linkedin.com/jobs/search/?keywords=${encodeURIComponent(query)}&start=${i * 25}`;
      console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ LinkedIn —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${i + 1}: ${url}`);

      try {
        const response = await axios.get(url, {
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1'
          },
          timeout: 30000
        });

        const $ = cheerio.load(response.data);
        
        // –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ LinkedIn
        const jobCards = $('.jobs-search__results-list li, .job-card-container, .job-card');
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${i + 1}: ${jobCards.length}`);

        jobCards.each((index, card) => {
          try {
            const $card = $(card);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            const titleElement = $card.find('a[data-control-name="job_card_title_link"], .job-card-list__title a, .job-card-container__link');
            const title = titleElement.text().trim();
            const url = titleElement.attr('href') || '';

            const companyElement = $card.find('.job-card-container__company-name, .job-card-list__company-name, .job-card-container__metadata-item a');
            let company = companyElement.text().trim();
            company = cleanCompanyName(company);

            const locationElement = $card.find('.job-card-container__metadata-item, .job-card-list__location');
            const location = locationElement.text().trim() || '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞';

            const salaryElement = $card.find('.job-card-container__salary, .job-card-list__salary');
            const salary = salaryElement.text().trim() || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';

            const descriptionElement = $card.find('.job-card-container__description, .job-card-list__description');
            const description = descriptionElement.text().trim() || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';

            if (!isRelevantVacancy(title, description)) {
              console.log(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é: "${title}"`);
              return;
            }

            if (title && company && url) {
              allVacancies.push({
                id: `linkedin-${i}-${index}`,
                title,
                company,
                salary,
                url: url.startsWith('http') ? url : `https://www.linkedin.com${url}`,
                description,
                location,
                source: 'LinkedIn',
                publishedAt: new Date()
              });
            } else {
              console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É ${index}: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`);
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ ${index} –Ω–∞ LinkedIn:`, error);
          }
        });

        if (jobCards.length === 0 && i > 0) {
          console.log(`‚ö†Ô∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${i + 1} –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥`);
          break;
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ LinkedIn —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${i + 1}:`, error);
      }
    }

    console.log(`üéØ LinkedIn –∏—Ç–æ–≥–æ: ${allVacancies.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π`);
    return allVacancies;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ LinkedIn:', error);
    return [];
  }
}















