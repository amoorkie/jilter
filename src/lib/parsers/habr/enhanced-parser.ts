import axios from 'axios';
import * as cheerio from 'cheerio';
import iconv from 'iconv-lite';

export interface EnhancedVacancyData {
  external_id: string;
  source: string;
  url: string;
  title: string;
  company: string;
  location: string;
  description: string;
  salary_min?: number;
  salary_max?: number;
  salary_currency?: string;
  published_at: string;
  // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è
  full_description: string;
  requirements: string;
  tasks: string;
  benefits: string;
  conditions: string;
  company_logo?: string;
  company_url?: string;
  employment_type?: string;
  experience_level?: string;
  remote_type?: string;
}

export class EnhancedHabrParser {
  private headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
    'Accept-Encoding': 'gzip, deflate, br',
    'Connection': 'keep-alive',
    'Upgrade-Insecure-Requests': '1'
  };

  async init(): Promise<void> {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Habr –ø–∞—Ä—Å–µ—Ä–∞...');
    console.log('‚úÖ Habr –ø–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  async close(): Promise<void> {
    console.log('üîí Habr –ø–∞—Ä—Å–µ—Ä –∑–∞–∫—Ä—ã—Ç');
  }

  async parseDesignVacancies(limit: number = 10): Promise<EnhancedVacancyData[]> {
    console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ –¥–∏–∑–∞–π–Ω –≤–∞–∫–∞–Ω—Å–∏–π —Å Habr (–ª–∏–º–∏—Ç: ${limit})...`);
    
    const vacancies: EnhancedVacancyData[] = [];
    
    try {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ –¥–∏–∑–∞–π–Ω –≤–∞–∫–∞–Ω—Å–∏–π
      const searchUrl = 'https://career.habr.com/vacancies?q=–¥–∏–∑–∞–π–Ω–µ—Ä&type=all';
      console.log(`üìÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞: ${searchUrl}`);
      
      const response = await axios.get(searchUrl, { 
        responseType: 'arraybuffer',
        headers: this.headers
      });
      
      const html = iconv.decode(Buffer.from(response.data), 'utf-8');
      const $ = cheerio.load(html);

      // –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      const vacancyLinks = $('.vacancy-card__title a').map((i, link) => ({
        href: $(link).attr('href'),
        title: $(link).text().trim()
      })).get().filter(item => item.href);

      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${vacancyLinks.length} –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ
      if (vacancyLinks.length === 0) {
        console.log('üîç –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã...');
        const altLinks = $('a[href*="/vacancies/"]').not('[href*="/companies/"]').map((i, link) => ({
          href: $(link).attr('href'),
          title: $(link).text().trim()
        })).get().filter(item => item.href && item.title);
        
        console.log(`üìã –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏: ${altLinks.length}`);
        if (altLinks.length > 0) {
          vacancyLinks.push(...altLinks);
        }
      }

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const limitedLinks = vacancyLinks.slice(0, limit);
      
      for (let i = 0; i < limitedLinks.length; i++) {
        const link = limitedLinks[i];
        console.log(`\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é ${i + 1}/${limitedLinks.length}: ${link.title}`);
        
        try {
          const vacancyData = await this.parseSingleVacancy(link.href!);
          if (vacancyData) {
            vacancies.push(vacancyData);
            console.log(`‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: ${vacancyData.title}`);
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ${link.href}:`, error);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Habr:', error);
    }

    console.log(`\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${vacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    return vacancies;
  }

  private async parseSingleVacancy(vacancyUrl: string): Promise<EnhancedVacancyData | null> {
    try {
      console.log(`üìÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∞–∫–∞–Ω—Å–∏–∏: ${vacancyUrl}`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∞–∫–∞–Ω—Å–∏–∏ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º URL
      const fullUrl = vacancyUrl.startsWith('http') ? vacancyUrl : `https://career.habr.com${vacancyUrl}`;
      console.log(`üìÑ –ü–æ–ª–Ω—ã–π URL: ${fullUrl}`);
      
      const response = await axios.get(fullUrl, { 
        responseType: 'arraybuffer',
        headers: this.headers
      });
      
      const html = iconv.decode(Buffer.from(response.data), 'utf-8');
      const $ = cheerio.load(html);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –æ–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      const title = $('h1').text().trim() || '';
      
      // –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
      const companyLinks = $('a[href*="/companies/"]');
      let company = '';
      if (companyLinks.length > 0) {
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é
        company = companyLinks.first().text().trim();
      }
      
      // –ò—â–µ–º –ª–æ–∫–∞—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const pageText = $('body').text();
      const locationMatch = pageText.match(/–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏[\s\S]*?(?=–ö–æ–º–ø–∞–Ω–∏—è|$)/);
      const location = locationMatch ? locationMatch[0].trim() : '';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É
      let salary_min: number | undefined;
      let salary_max: number | undefined;
      let salary_currency: string | undefined;
      
      try {
        // –ò—â–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - —É–ª—É—á—à–µ–Ω–Ω—ã–π regex
        const salaryMatch = pageText.match(/–æ—Ç (\d+)\s*‚ÇΩ/);
        if (salaryMatch) {
          salary_min = parseInt(salaryMatch[1]);
          salary_currency = '‚ÇΩ';
        }
      } catch (e) {
        // –ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - —É–ª—É—á—à–µ–Ω–Ω—ã–π regex
      const dateMatch = pageText.match(/(\d{1,2} \w+)/);
      const published_at = dateMatch ? dateMatch[0] : '';

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      const full_description = this.extractFullDescription($);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const company_logo = this.extractCompanyLogo($);
      const company_url = this.extractCompanyUrl($);
      const employment_type = this.extractEmploymentType($);
      const experience_level = this.extractExperienceLevel($);
      const remote_type = this.extractRemoteType($);

      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
      const description = this.createBasicDescription(title, company, full_description);

      const vacancyData: EnhancedVacancyData = {
        external_id: this.generateExternalId(vacancyUrl),
        source: 'habr',
        url: vacancyUrl,
        title,
        company,
        location,
        description,
        salary_min,
        salary_max,
        salary_currency,
        published_at,
        full_description,
        requirements: '', // –£–±–∏—Ä–∞–µ–º –¥—Ä–æ–±–ª–µ–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        tasks: '',
        benefits: '',
        conditions: '',
        company_logo,
        company_url,
        employment_type,
        experience_level,
        remote_type
      };

      return vacancyData;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancyUrl}:`, error);
      return null;
    }
  }

  private extractFullDescription($: cheerio.CheerioAPI): string {
    try {
      // –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      const selectors = [
        '.basic-section--appearance-vacancy-description',
        '.vacancy-description',
        '.vacancy-details',
        '[class*="vacancy-description"]',
        '[class*="vacancy-details"]',
        '.style-ugc',
        '.vacancy-card__description',
        '.description'
      ];

      for (const selector of selectors) {
        const descriptionElement = $(selector);
        if (descriptionElement.length > 0) {
          const description = descriptionElement.text().trim();
          if (description && description.length > 100) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector} (${description.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
            return description;
          }
        }
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const pageText = $('body').text();
      const descriptionMatch = pageText.match(/–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏[\s\S]*?(?=–ü–æ–¥–µ–ª–∏—Ç—å—Å—è|–°–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë|$)/);
      if (descriptionMatch) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ (${descriptionMatch[0].length} —Å–∏–º–≤–æ–ª–æ–≤)`);
        return descriptionMatch[0].trim();
      }

      console.log('‚ö†Ô∏è –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return '';
    } catch (e) {
      console.log('‚ö†Ô∏è –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return '';
    }
  }

  private extractRequirements($: cheerio.CheerioAPI): string {
    try {
      // –ò—â–µ–º –±–ª–æ–∫ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ø–æ —Ç–µ–∫—Å—Ç—É - —É–ª—É—á—à–µ–Ω–Ω—ã–π regex
      const pageText = $('body').text();
      const requirementsMatch = pageText.match(/–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:[\s\S]*?(?=–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:|–ó–∞–¥–∞—á–∏:|–£—Å–ª–æ–≤–∏—è:|$)/);
      if (requirementsMatch) {
        return requirementsMatch[0].trim();
      }
      return '';
    } catch (e) {
      console.log('‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return '';
    }
  }

  private extractTasks($: cheerio.CheerioAPI): string {
    try {
      // –ò—â–µ–º –±–ª–æ–∫ —Å –∑–∞–¥–∞—á–∞–º–∏ –ø–æ —Ç–µ–∫—Å—Ç—É - —É–ª—É—á—à–µ–Ω–Ω—ã–π regex
      const pageText = $('body').text();
      const tasksMatch = pageText.match(/–ó–∞–¥–∞—á–∏:[\s\S]*?(?=–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:|–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:|–£—Å–ª–æ–≤–∏—è:|$)/);
      if (tasksMatch) {
        return tasksMatch[0].trim();
      }
      return '';
    } catch (e) {
      console.log('‚ö†Ô∏è –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return '';
    }
  }

  private extractBenefits($: cheerio.CheerioAPI): string {
    try {
      // –ò—â–µ–º –±–ª–æ–∫ —Å –ª—å–≥–æ—Ç–∞–º–∏ –ø–æ —Ç–µ–∫—Å—Ç—É - —É–ª—É—á—à–µ–Ω–Ω—ã–π regex
      const pageText = $('body').text();
      const benefitsMatch = pageText.match(/–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:[\s\S]*?(?=–ü–æ–¥–µ–ª–∏—Ç—å—Å—è|–°–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë|–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:|–ó–∞–¥–∞—á–∏:|$)/);
      if (benefitsMatch) {
        return benefitsMatch[0].trim();
      }
      return '';
    } catch (e) {
      console.log('‚ö†Ô∏è –õ—å–≥–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return '';
    }
  }

  private extractConditions($: cheerio.CheerioAPI): string {
    try {
      // –ò—â–µ–º –±–ª–æ–∫ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
      const pageText = $('body').text();
      const conditionsMatch = pageText.match(/–£—Å–ª–æ–≤–∏—è:[\s\S]*?(?=–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:|–ü–æ–¥–µ–ª–∏—Ç—å—Å—è|$)/);
      if (conditionsMatch) {
        return conditionsMatch[0].trim();
      }
      return '';
    } catch (e) {
      console.log('‚ö†Ô∏è –£—Å–ª–æ–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return '';
    }
  }

  private extractCompanyLogo($: cheerio.CheerioAPI): string {
    try {
      const logoUrl = $('.vacancy-card__company-logo img').attr('src') || '';
      return logoUrl || '';
    } catch (e) {
      return '';
    }
  }

  private extractCompanyUrl($: cheerio.CheerioAPI): string {
    try {
      const companyUrl = $('.vacancy-card__company-name a').attr('href') || '';
      return companyUrl || '';
    } catch (e) {
      return '';
    }
  }

  private extractEmploymentType($: cheerio.CheerioAPI): string {
    try {
      const employmentType = $('.vacancy-card__employment-type').text().trim();
      return employmentType || '';
    } catch (e) {
      return '';
    }
  }

  private extractExperienceLevel($: cheerio.CheerioAPI): string {
    try {
      const experienceLevel = $('.vacancy-card__experience-level').text().trim();
      return experienceLevel || '';
    } catch (e) {
      return '';
    }
  }

  private extractRemoteType($: cheerio.CheerioAPI): string {
    try {
      const remoteType = $('.vacancy-card__remote-type').text().trim();
      return remoteType || '';
    } catch (e) {
      return '';
    }
  }

  private createBasicDescription(title: string, company: string, fullDescription: string): string {
    if (fullDescription) {
      return fullDescription.substring(0, 200) + '...';
    }
    return `–í–∞–∫–∞–Ω—Å–∏—è: ${title} –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ${company}. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–∞–∫–∞–Ω—Å–∏–∏.`;
  }

  private generateExternalId(url: string): string {
    const urlParts = url.split('/');
    const lastPart = urlParts[urlParts.length - 1];
    return `habr_${lastPart}`;
  }
}
