// –£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram –ø–∞—Ä—Å–µ—Ä —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
import axios from 'axios';
import * as cheerio from 'cheerio';

export interface TelegramVacancy {
  id: string;
  title: string;
  company: string;
  salary: string;
  url: string;
  description?: string;
  location?: string;
  source: string;
  publishedAt?: Date;
}

const DESIGN_KEYWORDS = [
  '–¥–∏–∑–∞–π–Ω', '–¥–∏–∑–∞–π–Ω–µ—Ä', '–¥–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤', 'ui/ux', 'ux/ui', '–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω',
  '—Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–∏–∑–∞–π–Ω', '–≤–µ–±-–¥–∏–∑–∞–π–Ω–µ—Ä', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–π –¥–∏–∑–∞–π–Ω', '–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω',
  '–≤–∏–∑—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω', '–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω', '–¥–∏–∑–∞–π–Ω-–º—ã—à–ª–µ–Ω–∏–µ', 'user experience',
  'user interface', 'ux-–¥–∏–∑–∞–π–Ω–µ—Ä', 'ui-–¥–∏–∑–∞–π–Ω–µ—Ä', '–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä', '–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä',
  '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä', '–≤–µ–±-–¥–∏–∑–∞–π–Ω–µ—Ä', '–≤–∏–∑—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä', 'motion-–¥–∏–∑–∞–π–Ω–µ—Ä',
  'ux-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', '–∞—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä', 'creative director', '–¥–∏–∑–∞–π–Ω–µ—Ä –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π',
  '–¥–∏–∑–∞–π–Ω–µ—Ä –±—Ä–µ–Ω–¥-–∏–¥–µ–Ω—Ç–∏–∫–∏', '–∏–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä', '3d-–¥–∏–∑–∞–π–Ω–µ—Ä', 'designer', 'ui designer',
  'ux designer', 'product designer', 'visual designer', 'graphic designer', 'web designer',
  'interaction designer', 'motion designer', 'ux researcher', 'art director', 'creative director'
];

function isRelevantVacancy(text: string): boolean {
  const lowerText = text.toLowerCase();
  return DESIGN_KEYWORDS.some(keyword => lowerText.includes(keyword.toLowerCase()));
}

function extractVacancyInfo(text: string): Partial<TelegramVacancy> {
  const lines = text.split('\n').map(line => line.trim()).filter(line => line);
  const title = lines[0] || '';

  const salaryMatch = text.match(/(\d+[\s,]*\d*)\s*(‚ÇΩ|—Ä—É–±|—Ä—É–±–ª–µ–π|USD|\$)/i);
  const salary = salaryMatch ? salaryMatch[0] : '–ù–µ —É–∫–∞–∑–∞–Ω–∞';

  const companyMatch = text.match(/(?:–≤|–æ—Ç|–∫–æ–º–ø–∞–Ω–∏—è|company)\s+([–ê-–Ø–∞-—èA-Za-z\s&.,-]+)/i);
  const company = companyMatch ? companyMatch[1].trim() : '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞';

  const urlMatch = text.match(/(https?:\/\/[^\s]+)/);
  const url = urlMatch ? urlMatch[1] : '';

  return {
    title,
    company,
    salary,
    url,
    description: text
  };
}

// –ú–µ—Ç–æ–¥ 1: RSS –ø–∞—Ä—Å–∏–Ω–≥
export async function parseTelegramRSS(
  channelUsername: string,
  limit: number = 20
): Promise<TelegramVacancy[]> {
  const allVacancies: TelegramVacancy[] = [];

  try {
    console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º RSS –ø–∞—Ä—Å–∏–Ω–≥ Telegram-–∫–∞–Ω–∞–ª–∞ @${channelUsername}`);
    
    const rssUrls = [
      `https://t.me/s/${channelUsername}/rss`,
      `https://t.me/${channelUsername}/rss`,
      `https://rsshub.app/telegram/channel/${channelUsername}`,
      `https://t.me/s/${channelUsername}`,
      `https://t.me/${channelUsername}`
    ];

    for (const rssUrl of rssUrls) {
      try {
        console.log(`üîç –ü—Ä–æ–±—É–µ–º RSS: ${rssUrl}`);
        const response = await axios.get(rssUrl, { 
          timeout: 10000,
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
          }
        });

        if (response.data && response.data.length > 1000) {
          console.log(`‚úÖ RSS –¥–æ—Å—Ç—É–ø–µ–Ω: ${response.data.length} —Å–∏–º–≤–æ–ª–æ–≤`);
          
          const $ = cheerio.load(response.data);
          const items = $('item, entry, .tgme_widget_message');
          
          console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${items.length}`);
          
          items.slice(0, limit).each((index, element) => {
            try {
              // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
              let title = $(element).find('title').text().trim();
              let description = $(element).find('description').text().trim();
              let link = $(element).find('link').attr('href') || $(element).find('a').attr('href') || '';
              
              // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–ª—è—Ö, –∏—â–µ–º –≤ Telegram –≤–∏–¥–∂–µ—Ç–∞—Ö
              if (!title) {
                title = $(element).find('.tgme_widget_message_text').text().trim();
              }
              if (!description) {
                description = $(element).find('.tgme_widget_message_text').text().trim();
              }
              
              // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
              if (!title && !description) {
                const fullText = $(element).text().trim();
                title = fullText.substring(0, 100);
                description = fullText;
              }
              
              const combinedText = `${title} ${description}`.trim();
              
              if (combinedText && isRelevantVacancy(combinedText)) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: "${title}"`);
                const vacancyInfo = extractVacancyInfo(combinedText);
                
                allVacancies.push({
                  id: `telegram-rss-${channelUsername}-${index}`,
                  title: vacancyInfo.title || title || '–í–∞–∫–∞–Ω—Å–∏—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞',
                  company: vacancyInfo.company || '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
                  salary: vacancyInfo.salary || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
                  url: vacancyInfo.url || link,
                  description: vacancyInfo.description || description,
                  source: `Telegram RSS @${channelUsername}`,
                  publishedAt: new Date()
                });
              }
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ RSS —ç–ª–µ–º–µ–Ω—Ç–∞ ${index}:`, error);
            }
          });
          
          if (allVacancies.length > 0) {
            console.log(`‚úÖ RSS –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: ${allVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
            break;
          }
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è RSS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${rssUrl} - ${error.message}`);
      }
    }

    console.log(`üéØ RSS –ø–∞—Ä—Å–∏–Ω–≥ @${channelUsername} –∏—Ç–æ–≥–æ: ${allVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    return allVacancies;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ RSS –ø–∞—Ä—Å–∏–Ω–≥–∞ @${channelUsername}:`, error);
    return [];
  }
}

// –ú–µ—Ç–æ–¥ 2: –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
export async function parseTelegramWeb(
  channelUsername: string,
  limit: number = 20
): Promise<TelegramVacancy[]> {
  const allVacancies: TelegramVacancy[] = [];
  
  const urls = [
    `https://t.me/s/${channelUsername}`,
    `https://t.me/${channelUsername}`,
    `https://t.me/s/${channelUsername}?embed=1`,
    `https://t.me/${channelUsername}?embed=1`
  ];

  for (const url of urls) {
    try {
      console.log(`üéØ –ü—Ä–æ–±—É–µ–º –≤–µ–±-–ø–∞—Ä—Å–∏–Ω–≥ @${channelUsername}: ${url}`);

      const response = await axios.get(url, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        },
        timeout: 20000
      });

      const $ = cheerio.load(response.data);
      
      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Telegram
      const selectors = [
        '.tgme_widget_message',
        '.tgme_widget_message_wrap',
        '.tgme_widget_message_inner',
        '.tgme_widget_message_bubble',
        '.tgme_widget_message_text',
        '.tgme_widget_message_text_wrap',
        '.message',
        '.post',
        '[data-post]',
        'article',
        '.tgme_widget_message_date'
      ];
      
      let messages = $();
      for (const selector of selectors) {
        messages = $(selector);
        if (messages.length > 0) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector} (${messages.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`);
          break;
        }
      }
      
      if (messages.length === 0) {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
        const allText = $.text();
        const lines = allText.split('\n').map(line => line.trim()).filter(line => line.length > 20);
        
        console.log(`üìã –ò—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É: ${lines.length} —Å—Ç—Ä–æ–∫`);
        
        let foundKeywords = 0;
        lines.forEach((line, index) => {
          const lowerLine = line.toLowerCase();
          const hasDesignKeyword = DESIGN_KEYWORDS.some(keyword => lowerLine.includes(keyword.toLowerCase()));
          
          if (hasDesignKeyword && isRelevantVacancy(line)) {
            foundKeywords++;
            const vacancyInfo = extractVacancyInfo(line);
            
            allVacancies.push({
              id: `telegram-text-${channelUsername}-${index}`,
              title: vacancyInfo.title || line.substring(0, 100),
              company: vacancyInfo.company || '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
              salary: vacancyInfo.salary || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
              url: vacancyInfo.url || '',
              description: vacancyInfo.description,
              source: `Telegram Text @${channelUsername}`,
              publishedAt: new Date()
            });
          }
        });
        
        console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–∏–∑–∞–π–Ω–∞: ${foundKeywords}`);
      } else {
        messages.slice(0, limit).each((index, element) => {
          try {
            const text = $(element).find('.tgme_widget_message_text').text().trim() || 
                        $(element).text().trim();
            const link = $(element).find('a').attr('href') || '';
            const time = $(element).find('.tgme_widget_message_date').text().trim();

            if (text && isRelevantVacancy(text)) {
              const vacancyInfo = extractVacancyInfo(text);
              
              allVacancies.push({
                id: `telegram-web-${channelUsername}-${index}`,
                title: vacancyInfo.title || text.substring(0, 100),
                company: vacancyInfo.company || '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
                salary: vacancyInfo.salary || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
                url: vacancyInfo.url || link,
                description: vacancyInfo.description,
                source: `Telegram Web @${channelUsername}`,
                publishedAt: new Date()
              });
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${index}:`, error);
          }
        });
      }

      if (allVacancies.length > 0) {
        console.log(`‚úÖ –í–µ–±-–ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: ${allVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
        break;
      }

    } catch (error) {
      console.log(`‚ö†Ô∏è –í–µ–±-–ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${url} - ${error.message}`);
    }
  }

  console.log(`üéØ –í–µ–±-–ø–∞—Ä—Å–∏–Ω–≥ @${channelUsername} –∏—Ç–æ–≥–æ: ${allVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
  return allVacancies;
}

// –ú–µ—Ç–æ–¥ 3: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
export async function parseTelegramChannel(
  channelUsername: string, 
  limit: number = 20
): Promise<TelegramVacancy[]> {
  console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Telegram-–∫–∞–Ω–∞–ª–∞ @${channelUsername}`);
  
  // –ü—Ä–æ–±—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  const [rssVacancies, webVacancies] = await Promise.all([
    parseTelegramRSS(channelUsername, limit).catch(() => []),
    parseTelegramWeb(channelUsername, limit).catch(() => [])
  ]);

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
  const allVacancies = [...rssVacancies, ...webVacancies];
  const uniqueVacancies = allVacancies.filter((vacancy, index, self) => 
    index === self.findIndex(v => v.title === vacancy.title && v.company === vacancy.company)
  );

  console.log(`üéØ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ @${channelUsername} –∏—Ç–æ–≥–æ: ${uniqueVacancies.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π`);
  return uniqueVacancies;
}

export async function parseTelegramChannels(
  channelUsernames: string[], 
  limit: number = 20
): Promise<TelegramVacancy[]> {
  let allVacancies: TelegramVacancy[] = [];
  
  for (const username of channelUsernames) {
    try {
      const channelVacancies = await parseTelegramChannel(username, limit);
      allVacancies = allVacancies.concat(channelVacancies);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ @${username}:`, error);
    }
  }
  
  return allVacancies;
}
