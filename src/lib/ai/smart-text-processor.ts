// –£–º–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ AI
export interface SmartAnalysisResult {
  fullDescription: string;
  requirements: string;
  tasks: string;
  conditions: string;
  benefits: string;
  technologies: string[];
  experienceLevel: 'junior' | 'middle' | 'senior' | 'lead' | 'unknown';
  employmentType: 'full_time' | 'part_time' | 'project' | 'freelance' | 'internship' | 'volunteer' | 'unknown';
  remoteWork: boolean;
  salaryRange?: {
    min: number | null;
    max: number | null;
    currency: string;
  };
}

export function processVacancySmart(text: string): SmartAnalysisResult {
  console.log('üß† –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏...');
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç
  const normalizedText = text
    .replace(/\s+/g, ' ')
    .replace(/\n+/g, ' ')
    .trim();
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
  const requirements = extractRequirements(normalizedText);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏/–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
  const tasks = extractTasks(normalizedText);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Å–ª–æ–≤–∏—è
  const conditions = extractConditions(normalizedText);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ª—å–≥–æ—Ç—ã
  const benefits = extractBenefits(normalizedText);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
  const technologies = extractTechnologies(normalizedText);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞
  const experienceLevel = determineExperienceLevel(normalizedText);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
  const employmentType = determineEmploymentType(normalizedText);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É
  const remoteWork = determineRemoteWork(normalizedText);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É
  const salaryRange = extractSalary(normalizedText);
  
  return {
    fullDescription: normalizedText,
    requirements,
    tasks,
    conditions,
    benefits,
    technologies,
    experienceLevel,
    employmentType,
    remoteWork,
    salaryRange
  };
}

function extractRequirements(text: string): string {
  const patterns = [
    /—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è?[:\s]*([^.]*)/i,
    /—Ç—Ä–µ–±—É–µ—Ç—Å—è[:\s]*([^.]*)/i,
    /–Ω—É–∂–Ω–æ[:\s]*([^.]*)/i,
    /–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ[:\s]*([^.]*)/i,
    /–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ[:\s]*([^.]*)/i
  ];
  
  for (const pattern of patterns) {
    const match = text.match(pattern);
    if (match && match[1]) {
      return match[1].trim();
    }
  }
  
  return '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã';
}

function extractTasks(text: string): string {
  const patterns = [
    /–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏?[:\s]*([^.]*)/i,
    /–∑–∞–¥–∞—á–∏?[:\s]*([^.]*)/i,
    /—Ñ—É–Ω–∫—Ü–∏–∏?[:\s]*([^.]*)/i,
    /–±—É–¥–µ—Ç–µ[:\s]*([^.]*)/i,
    /–∑–∞–Ω–∏–º–∞—Ç—å—Å—è[:\s]*([^.]*)/i
  ];
  
  for (const pattern of patterns) {
    const match = text.match(pattern);
    if (match && match[1]) {
      return match[1].trim();
    }
  }
  
  return '–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã';
}

function extractConditions(text: string): string {
  const patterns = [
    /—É—Å–ª–æ–≤–∏—è?[:\s]*([^.]*)/i,
    /–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º[:\s]*([^.]*)/i,
    /–æ–±–µ—â–∞–µ–º[:\s]*([^.]*)/i,
    /–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º[:\s]*([^.]*)/i
  ];
  
  for (const pattern of patterns) {
    const match = text.match(pattern);
    if (match && match[1]) {
      return match[1].trim();
    }
  }
  
  return '–£—Å–ª–æ–≤–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã';
}

function extractBenefits(text: string): string {
  const patterns = [
    /–ª—å–≥–æ—Ç—ã?[:\s]*([^.]*)/i,
    /–±–æ–Ω—É—Å—ã?[:\s]*([^.]*)/i,
    /–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞?[:\s]*([^.]*)/i,
    /–ø–ª—é—Å—ã?[:\s]*([^.]*)/i
  ];
  
  for (const pattern of patterns) {
    const match = text.match(pattern);
    if (match && match[1]) {
      return match[1].trim();
    }
  }
  
  return '–õ—å–≥–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã';
}

function extractTechnologies(text: string): string[] {
  const techKeywords = [
    'Figma', 'Sketch', 'Adobe', 'Photoshop', 'Illustrator', 'InDesign',
    'Framer', 'Principle', 'After Effects', 'Blender', 'Maya', 'Cinema 4D',
    'React', 'Vue', 'Angular', 'JavaScript', 'TypeScript', 'HTML', 'CSS',
    'Figma', 'Sketch', 'Adobe XD', 'InVision', 'Zeplin', 'Abstract'
  ];
  
  const found = techKeywords.filter(tech => 
    text.toLowerCase().includes(tech.toLowerCase())
  );
  
  return found;
}

function determineExperienceLevel(text: string): 'junior' | 'middle' | 'senior' | 'lead' | 'unknown' {
  const lowerText = text.toLowerCase();
  
  if (lowerText.includes('senior') || lowerText.includes('—Å—Ç–∞—Ä—à–∏–π') || lowerText.includes('–≤–µ–¥—É—â–∏–π')) {
    return 'senior';
  }
  
  if (lowerText.includes('lead') || lowerText.includes('—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å') || lowerText.includes('–∞—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä')) {
    return 'lead';
  }
  
  if (lowerText.includes('junior') || lowerText.includes('–º–ª–∞–¥—à–∏–π') || lowerText.includes('–Ω–∞—á–∏–Ω–∞—é—â–∏–π')) {
    return 'junior';
  }
  
  if (lowerText.includes('middle') || lowerText.includes('—Å—Ä–µ–¥–Ω–∏–π') || lowerText.includes('–æ–ø—ã—Ç –æ—Ç 2')) {
    return 'middle';
  }
  
  return 'unknown';
}

function determineEmploymentType(text: string): 'full_time' | 'part_time' | 'project' | 'freelance' | 'internship' | 'volunteer' | 'unknown' {
  const lowerText = text.toLowerCase();
  
  if (lowerText.includes('—É–¥–∞–ª–µ–Ω–Ω') || lowerText.includes('remote')) {
    return 'full_time';
  }
  
  if (lowerText.includes('–ø—Ä–æ–µ–∫—Ç') || lowerText.includes('project')) {
    return 'project';
  }
  
  if (lowerText.includes('—Ñ—Ä–∏–ª–∞–Ω—Å') || lowerText.includes('freelance')) {
    return 'freelance';
  }
  
  if (lowerText.includes('—Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞') || lowerText.includes('internship')) {
    return 'internship';
  }
  
  if (lowerText.includes('–≤–æ–ª–æ–Ω—Ç–µ—Ä') || lowerText.includes('volunteer')) {
    return 'volunteer';
  }
  
  return 'full_time';
}

function determineRemoteWork(text: string): boolean {
  const lowerText = text.toLowerCase();
  return lowerText.includes('—É–¥–∞–ª–µ–Ω–Ω') || lowerText.includes('remote') || lowerText.includes('–∏–∑ –¥–æ–º–∞');
}

function extractSalary(text: string): { min: number | null; max: number | null; currency: string } | undefined {
  const salaryPatterns = [
    /(\d+)\s*-\s*(\d+)\s*(—Ä—É–±|‚ÇΩ|usd|\$|eur|‚Ç¨)/i,
    /–æ—Ç\s*(\d+)\s*(—Ä—É–±|‚ÇΩ|usd|\$|eur|‚Ç¨)/i,
    /–¥–æ\s*(\d+)\s*(—Ä—É–±|‚ÇΩ|usd|\$|eur|‚Ç¨)/i
  ];
  
  for (const pattern of salaryPatterns) {
    const match = text.match(pattern);
    if (match) {
      const currency = match[3] || match[2] || '—Ä—É–±';
      if (match[1] && match[2]) {
        return {
          min: parseInt(match[1]),
          max: parseInt(match[2]),
          currency: currency.toLowerCase()
        };
      } else if (match[1]) {
        return {
          min: parseInt(match[1]),
          max: null,
          currency: currency.toLowerCase()
        };
      }
    }
  }
  
  return undefined;
}







