// AI-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –≤–∞–∫–∞–Ω—Å–∏–π
import { GigaChatService } from './gigachat-service';
import { Employment } from '@/lib/types/employment';

export interface StructuredVacancyData {
  fullDescription: string;
  requirements: string;
  tasks: string;
  conditions: string;
  benefits: string;
  technologies: string[];
  experienceLevel: 'junior' | 'middle' | 'senior' | 'lead' | 'unknown';
  employmentType: Employment;
  remoteWork: boolean;
  salaryRange?: {
    min?: number;
    max?: number;
    currency: string;
  };
}

export class VacancyAnalyzer {
  private gigachatService: GigaChatService;

  constructor() {
    this.gigachatService = new GigaChatService();
  }

  async analyze(vacancyText: string): Promise<StructuredVacancyData | null> {
    if (!vacancyText) {
      console.warn('VacancyAnalyzer: –ü–µ—Ä–µ–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.');
      return null;
    }

    console.log('VacancyAnalyzer: –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏...');

    try {
      const rawJsonString = await this.gigachatService.analyzeVacancy(vacancyText);

      if (!rawJsonString) {
        console.error('VacancyAnalyzer: GigaChat –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.');
        return null;
      }

      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ —Å—Ç—Ä–æ–∫–∏, –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω–æ–π GigaChat
      let parsedData: any;
      try {
        parsedData = JSON.parse(rawJsonString);
      } catch (parseError) {
        console.error('VacancyAnalyzer: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ GigaChat:', parseError);
        console.error('–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', rawJsonString);
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω–æ–≥–æ JSON
      if (parsedData && typeof parsedData === 'object' && parsedData.full_description !== undefined && parsedData.requirements !== undefined && parsedData.tasks !== undefined) {
        console.log('VacancyAnalyzer: –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.');
        return {
          fullDescription: parsedData.full_description || '',
          requirements: parsedData.requirements || '',
          tasks: parsedData.tasks || '',
          conditions: '',
          benefits: '',
          technologies: [],
          experienceLevel: 'unknown',
          employmentType: 'unknown',
          remoteWork: false,
          salaryRange: undefined
        };
      } else {
        console.error('VacancyAnalyzer: –û—Ç–≤–µ—Ç GigaChat –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.', parsedData);
        return null;
      }

    } catch (error) {
      console.error('VacancyAnalyzer: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
      return null;
    }
  }
}

export async function analyzeVacancyWithAI(
  title: string,
  company: string,
  description: string,
  url: string
): Promise<StructuredVacancyData> {
  console.log(`üß† –ó–∞–ø—É—Å–∫–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏: "${title}" –æ—Ç "${company}"`);

  const analyzer = new VacancyAnalyzer();
  const vacancyText = `${title} - ${company}\n\n${description}`;
  
  try {
    const result = await analyzer.analyze(vacancyText);
    
    if (result) {
      console.log(`‚úÖ AI-–∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è "${title}"`);
      return result;
    } else {
      console.log(`‚ö†Ô∏è AI-–∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è "${title}", –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ`);
      return {
        fullDescription: description,
        requirements: '',
        tasks: '',
        conditions: '',
        benefits: '',
        technologies: [],
        experienceLevel: 'unknown',
        employmentType: 'unknown',
        remoteWork: false,
        salaryRange: undefined
      };
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ AI-–∞–Ω–∞–ª–∏–∑–µ –≤–∞–∫–∞–Ω—Å–∏–∏ "${title}":`, error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ AI
    return {
      fullDescription: description,
      requirements: '',
      tasks: '',
      conditions: '',
      benefits: '',
      technologies: [],
      experienceLevel: 'unknown',
      employmentType: 'unknown',
      remoteWork: false,
      salaryRange: undefined
    };
  }
}