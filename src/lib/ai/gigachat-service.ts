// GigaChat API —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–π
// –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.sber.ru/docs/ru/gigachat/api/overview
import * as https from 'https';

export interface GigaChatAnalysisResult {
  fullDescription: string;
  requirements: string;
  tasks: string;
  conditions: string;
  benefits: string;
  technologies: string[];
  experienceLevel: 'junior' | 'middle' | 'senior' | 'lead' | 'unknown';
  employmentType: 'full_time' | 'part_time' | 'project' | 'freelance' | 'internship' | 'volunteer' | 'unknown';
  remoteWork: boolean;
  salaryRange?: {
    min: number | null;
    max: number | null;
    currency: string;
  };
}

interface GigaChatCompletionRequest {
  model: string;
  messages: Array<{
    role: string;
    content: string;
  }>;
  stream: boolean;
  max_tokens: number;
  temperature: number;
}

interface GigaChatCompletionResponse {
  choices: Array<{
    message: {
      content: string;
    };
  }>;
}

export class GigaChatService {
  private authorizationKey: string;
  private baseUrl: string;
  private authUrl: string;
  private model: string;

  constructor() {
    // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: https://developers.sber.ru/docs/ru/gigachat/api/reference/rest/post-token
    // –ù—É–∂–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª—é—á (Base64 –æ—Ç Client ID:Client Secret)
    this.authorizationKey = process.env.GIGACHAT_AUTHORIZATION_KEY || '';
    this.baseUrl = 'https://gigachat.devices.sberbank.ru/api/v1';
    this.authUrl = 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth';
    this.model = 'GigaChat:latest';

    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ GigaChat —Å–µ—Ä–≤–∏—Å–∞:');
    console.log('üìù GIGACHAT_AUTHORIZATION_KEY:', this.authorizationKey ? '–£–°–¢–ê–ù–û–í–õ–ï–ù' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
    console.log('üìù –î–ª–∏–Ω–∞ –∫–ª—é—á–∞:', this.authorizationKey.length);
    console.log('üìù –ü–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤:', this.authorizationKey.substring(0, 20) + '...');

    if (!this.authorizationKey) {
      console.error('GigaChatService: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GIGACHAT_AUTHORIZATION_KEY');
      console.log('üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –º–æ–∂–Ω–æ –Ω–∞: https://developers.sber.ru/');
    } else {
      console.log('üîë GigaChat –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –Ω–∞–π–¥–µ–Ω');
    }
  }

  private async makeHttpsRequest(url: string, options: any): Promise<any> {
    return new Promise((resolve, reject) => {
      const urlObj = new URL(url);
      const requestOptions = {
        hostname: urlObj.hostname,
        port: urlObj.port || 443,
        path: urlObj.pathname + urlObj.search,
        method: options.method || 'GET',
        headers: options.headers || {},
        rejectUnauthorized: false // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
      };

      const req = https.request(requestOptions, (res) => {
        let data = '';
        res.on('data', (chunk) => {
          data += chunk;
        });
        res.on('end', () => {
          resolve({
            ok: res.statusCode >= 200 && res.statusCode < 300,
            status: res.statusCode,
            statusText: res.statusMessage,
            text: () => Promise.resolve(data),
            json: () => Promise.resolve(JSON.parse(data))
          });
        });
      });

      req.on('error', (error) => {
        reject(error);
      });

      if (options.body) {
        req.write(options.body);
      }
      req.end();
    });
  }

  private async getAccessToken(): Promise<string> {
    try {
      console.log('üîê –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ GigaChat...');
      
      // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è GigaChat API
      process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = "0";
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ (RqUID) –≤ —Ñ–æ—Ä–º–∞—Ç–µ UUID4
      const rqUID = crypto.randomUUID();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º https –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å SSL
      const response = await this.makeHttpsRequest(this.authUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Accept': 'application/json',
          'RqUID': rqUID,
          'Authorization': `Basic ${this.authorizationKey}`,
        },
        body: 'scope=GIGACHAT_API_PERS',
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${response.status} ${response.statusText}`);
        console.error(`üìù –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${errorText}`);
        console.error(`üîë RqUID: ${rqUID}`);
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${response.status} ${response.statusText}. ${errorText}`);
      }

      const data = await response.json();
      console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ GigaChat –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log(`‚è∞ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${new Date(data.expires_at * 1000).toLocaleString()}`);
      return data.access_token;
    } catch (error) {
      console.error('GigaChatService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      throw error;
    }
  }

  async analyzeVacancy(vacancyText: string): Promise<string | null> {
    if (!this.authorizationKey) {
      console.error('GigaChatService: GIGACHAT_AUTHORIZATION_KEY –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞.');
      return null;
    }

    try {
      const accessToken = await this.getAccessToken();

      const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:

{
  "fullDescription": "–ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
  "requirements": "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É",
  "tasks": "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –∑–∞–¥–∞—á–∏",
  "conditions": "—É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã",
  "benefits": "–ª—å–≥–æ—Ç—ã –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞",
  "technologies": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"],
  "experienceLevel": "junior|middle|senior|lead|unknown",
  "employmentType": "full_time|part_time|project|freelance|internship|volunteer|unknown",
  "remoteWork": true/false,
  "salaryRange": {"min": —á–∏—Å–ª–æ, "max": —á–∏—Å–ª–æ, "currency": "–≤–∞–ª—é—Ç–∞"}
}

–í–∞–∫–∞–Ω—Å–∏—è: ${vacancyText}`;

      const requestBody: GigaChatCompletionRequest = {
        model: this.model,
        messages: [
          {
            role: 'user',
            content: prompt,
          },
        ],
        stream: false,
        max_tokens: 1024,
        temperature: 0.7,
      };

      const response = await this.makeHttpsRequest(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${accessToken}`,
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ API GigaChat: ${response.status} ${response.statusText}. ${errorText}`);
      }

      const data: GigaChatCompletionResponse = await response.json();

      if (data.choices && data.choices.length > 0) {
        const content = data.choices[0].message.content.trim();
        return content;
      } else {
        console.warn('GigaChatService: API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏.');
        return null;
      }
    } catch (error) {
      console.error('GigaChatService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∞–∫–∞–Ω—Å–∏–∏:', error);
      return null;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å GigaChat
export async function analyzeVacancyWithGigaChat(vacancyText: string): Promise<GigaChatAnalysisResult> {
  const service = new GigaChatService();
  
  try {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑ —Å GigaChat...');
    const result = await service.analyzeVacancy(vacancyText);
    
    if (result) {
      try {
        const parsed = JSON.parse(result);
        console.log('‚úÖ GigaChat –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        return parsed;
      } catch (parseError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç GigaChat, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        return {
          fullDescription: vacancyText,
          requirements: '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
          tasks: '–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
          conditions: '–£—Å–ª–æ–≤–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
          benefits: '–õ—å–≥–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
          technologies: [],
          experienceLevel: 'middle',
          employmentType: 'full_time',
          remoteWork: false,
          salaryRange: undefined
        };
      }
    } else {
      console.warn('‚ö†Ô∏è GigaChat –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
      return {
        fullDescription: vacancyText,
        requirements: '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
        tasks: '–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
        conditions: '–£—Å–ª–æ–≤–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
        benefits: '–õ—å–≥–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
        technologies: [],
        experienceLevel: 'middle',
        employmentType: 'full_time',
        remoteWork: false,
        salaryRange: undefined
      };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ GigaChat –∞–Ω–∞–ª–∏–∑–∞:', error);
    return {
      fullDescription: vacancyText,
      requirements: '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
      tasks: '–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
      conditions: '–£—Å–ª–æ–≤–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
      benefits: '–õ—å–≥–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
      technologies: [],
      experienceLevel: 'middle',
      employmentType: 'full_time',
      remoteWork: false,
      salaryRange: undefined
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π —Å GigaChat
export async function filterVacanciesWithGigaChat(vacancies: any[]): Promise<any[]> {
  const service = new GigaChatService();
  
  if (!service['authorizationKey']) {
    console.log('‚ö†Ô∏è GigaChat –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é');
    return vacancies;
  }
  
  try {
    console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º AI-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å GigaChat...');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    return vacancies;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ GigaChat —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', error);
    return vacancies;
  }
}

