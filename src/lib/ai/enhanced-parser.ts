import { analyzeVacancy, analyzeSearchQuery, matchVacancyToQuery, VacancyAnalysis, SearchQueryAnalysis } from './gemini-service';
import { Employment, Specialization } from '@/lib/types/employment';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∞–∫–∞–Ω—Å–∏–∏ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º
export interface EnhancedVacancy {
  id: string;
  title: string;
  description: string;
  company: string;
  location: string;
  salary: {
    min?: number;
    max?: number;
    currency: string;
  };
  url: string;
  source: string;
  publishedAt: string;
  
  // AI-–∞–Ω–∞–ª–∏–∑
  aiAnalysis: VacancyAnalysis;
  relevanceScore: number;
  matchReasons: string[];
  missingRequirements: string[];
  extraBenefits: string[];
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
export interface SmartSearchResult {
  vacancies: EnhancedVacancy[];
  total: number;
  queryAnalysis: SearchQueryAnalysis;
  recommendations: {
    toLearn: string[];
    careerPath: string[];
  };
  filters: {
    applied: string[];
    suggested: string[];
  };
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º
 */
export class EnhancedVacancyParser {
  private aiEnabled: boolean;
  
  constructor(aiEnabled: boolean = true) {
    this.aiEnabled = aiEnabled;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é AI
   */
  async parseAndAnalyzeVacancies(
    rawVacancies: Array<{
      id: string;
      title: string;
      description: string;
      company: string;
      location: string;
      salary?: { min?: number; max?: number; currency?: string };
      url: string;
      source: string;
      publishedAt: string;
    }>,
    searchQuery: string
  ): Promise<EnhancedVacancy[]> {
    console.log(`üß† –ù–∞—á–∏–Ω–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑ ${rawVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π...`);
    
    const enhancedVacancies: EnhancedVacancy[] = [];
    
    for (const vacancy of rawVacancies) {
      try {
        // AI-–∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏
        const aiAnalysis = this.aiEnabled 
          ? await analyzeVacancy(vacancy.title, vacancy.description, vacancy.company)
          : this.getFallbackAnalysis(vacancy);
        
        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        const match = this.aiEnabled
          ? await matchVacancyToQuery(vacancy, searchQuery)
          : this.getFallbackMatch();
        
        const enhancedVacancy: EnhancedVacancy = {
          ...vacancy,
          salary: typeof vacancy.salary === 'string' 
            ? vacancy.salary 
            : { ...vacancy.salary, currency: vacancy.salary?.currency || 'RUB' },
          aiAnalysis,
          relevanceScore: match.relevanceScore,
          matchReasons: match.matchReasons,
          missingRequirements: match.missingRequirements,
          extraBenefits: match.extraBenefits
        };
        
        enhancedVacancies.push(enhancedVacancy);
        
        console.log(`‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è: ${vacancy.title} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${match.relevanceScore}%)`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancy.title}:`, error);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é —Å fallback –¥–∞–Ω–Ω—ã–º–∏
        const fallbackVacancy: EnhancedVacancy = {
          ...vacancy,
          salary: typeof vacancy.salary === 'string' 
            ? vacancy.salary 
            : { ...vacancy.salary, currency: vacancy.salary?.currency || 'RUB' },
          aiAnalysis: this.getFallbackAnalysis(vacancy),
          relevanceScore: 50,
          matchReasons: [],
          missingRequirements: [],
          extraBenefits: []
        };
        
        enhancedVacancies.push(fallbackVacancy);
      }
    }
    
    console.log(`üéâ AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${enhancedVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    return enhancedVacancies;
  }

  /**
   * –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º
   */
  async smartSearch(
    query: string,
    rawVacancies: Array<{
      id: string;
      title: string;
      description: string;
      company: string;
      location: string;
      salary?: { min?: number; max?: number; currency?: string };
      url: string;
      source: string;
      publishedAt: string;
    }>,
    filters?: {
      specialization?: Specialization[];
      employment?: Employment[];
      experience?: string[];
      technologies?: string[];
      minSalary?: number;
      maxSalary?: number;
      remote?: boolean;
    }
  ): Promise<SmartSearchResult> {
    console.log(`üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫: "${query}"`);
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const queryAnalysis = this.aiEnabled
      ? await analyzeSearchQuery(query)
      : this.getFallbackQueryAnalysis(query);
    
    // –ü–∞—Ä—Å–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π
    const enhancedVacancies = await this.parseAndAnalyzeVacancies(rawVacancies, query);
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    let filteredVacancies = enhancedVacancies;
    
    if (filters) {
      filteredVacancies = this.applyFilters(enhancedVacancies, filters);
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    filteredVacancies.sort((a, b) => b.relevanceScore - a.relevanceScore);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    const recommendations = await this.generateSearchRecommendations(
      queryAnalysis,
      filteredVacancies.slice(0, 10) // –¢–æ–ø-10 –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    );
    
    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const suggestedFilters = this.generateFilterSuggestions(queryAnalysis, filteredVacancies);
    
    return {
      vacancies: filteredVacancies,
      total: filteredVacancies.length,
      queryAnalysis,
      recommendations,
      filters: {
        applied: this.getAppliedFilters(filters),
        suggested: suggestedFilters
      }
    };
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º
   */
  private applyFilters(
    vacancies: EnhancedVacancy[],
    filters: {
      specialization?: Specialization[];
      employment?: Employment[];
      experience?: string[];
      technologies?: string[];
      minSalary?: number;
      maxSalary?: number;
      remote?: boolean;
    }
  ): EnhancedVacancy[] {
    return vacancies.filter(vacancy => {
      // –§–∏–ª—å—Ç—Ä –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      if (filters.specialization && filters.specialization.length > 0) {
        if (!filters.specialization.includes(vacancy.aiAnalysis.specialization)) {
          return false;
        }
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
      if (filters.employment && filters.employment.length > 0) {
        const hasMatchingEmployment = filters.employment.some(emp => 
          vacancy.aiAnalysis.employment.includes(emp)
        );
        if (!hasMatchingEmployment) {
          return false;
        }
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –æ–ø—ã—Ç—É
      if (filters.experience && filters.experience.length > 0) {
        if (!filters.experience.includes(vacancy.aiAnalysis.experience)) {
          return false;
        }
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º
      if (filters.technologies && filters.technologies.length > 0) {
        const hasMatchingTech = filters.technologies.some(tech =>
          vacancy.aiAnalysis.technologies.some(vacancyTech =>
            vacancyTech.toLowerCase().includes(tech.toLowerCase())
          )
        );
        if (!hasMatchingTech) {
          return false;
        }
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ
      if (filters.minSalary && vacancy.aiAnalysis.salary.min) {
        if (vacancy.aiAnalysis.salary.min < filters.minSalary) {
          return false;
        }
      }
      
      if (filters.maxSalary && vacancy.aiAnalysis.salary.max) {
        if (vacancy.aiAnalysis.salary.max > filters.maxSalary) {
          return false;
        }
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ
      if (filters.remote !== undefined) {
        if (vacancy.aiAnalysis.remote !== filters.remote) {
          return false;
        }
      }
      
      return true;
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
   */
  private async generateSearchRecommendations(
    queryAnalysis: SearchQueryAnalysis,
    topVacancies: EnhancedVacancy[]
  ): Promise<{ toLearn: string[]; careerPath: string[] }> {
    if (!this.aiEnabled) {
      return { toLearn: [], careerPath: [] };
    }
    
    try {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      const technologies = topVacancies.flatMap(v => v.aiAnalysis.technologies);
      const experiences = topVacancies.map(v => v.aiAnalysis.experience);
      
      // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
      const uniqueTechnologies = [...new Set(technologies)].slice(0, 5);
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º—É –ø—É—Ç–∏
      const careerPath = this.generateCareerPath(experiences, queryAnalysis.specialization);
      
      return {
        toLearn: uniqueTechnologies,
        careerPath
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
      return { toLearn: [], careerPath: [] };
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
   */
  private generateFilterSuggestions(
    queryAnalysis: SearchQueryAnalysis,
    vacancies: EnhancedVacancy[]
  ): string[] {
    const suggestions: string[] = [];
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const specializations = vacancies.map(v => v.aiAnalysis.specialization);
    const specializationCounts = specializations.reduce((acc, spec) => {
      acc[spec] = (acc[spec] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    const topSpecializations = Object.entries(specializationCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 3)
      .map(([spec]) => spec);
    
    suggestions.push(...topSpecializations.map(spec => `–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${spec}`));
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    const technologies = vacancies.flatMap(v => v.aiAnalysis.technologies);
    const techCounts = technologies.reduce((acc, tech) => {
      acc[tech] = (acc[tech] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    const topTechnologies = Object.entries(techCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 3)
      .map(([tech]) => tech);
    
    suggestions.push(...topTechnologies.map(tech => `–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è: ${tech}`));
    
    return suggestions;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å
   */
  private generateCareerPath(experiences: string[], specializations: Specialization[]): string[] {
    const paths: string[] = [];
    
    if (specializations.includes('frontend')) {
      paths.push('Junior Frontend ‚Üí Middle Frontend ‚Üí Senior Frontend ‚Üí Tech Lead');
    }
    
    if (specializations.includes('backend')) {
      paths.push('Junior Backend ‚Üí Middle Backend ‚Üí Senior Backend ‚Üí Architect');
    }
    
    if (specializations.includes('fullstack')) {
      paths.push('Junior Fullstack ‚Üí Middle Fullstack ‚Üí Senior Fullstack ‚Üí CTO');
    }
    
    return paths;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
   */
  private getAppliedFilters(filters?: any): string[] {
    if (!filters) return [];
    
    const applied: string[] = [];
    
    if (filters.specialization) applied.push(`–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${filters.specialization.join(', ')}`);
    if (filters.employment) applied.push(`–ó–∞–Ω—è—Ç–æ—Å—Ç—å: ${filters.employment.join(', ')}`);
    if (filters.experience) applied.push(`–û–ø—ã—Ç: ${filters.experience.join(', ')}`);
    if (filters.technologies) applied.push(`–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: ${filters.technologies.join(', ')}`);
    if (filters.minSalary) applied.push(`–ú–∏–Ω. –∑–∞—Ä–ø–ª–∞—Ç–∞: ${filters.minSalary}`);
    if (filters.maxSalary) applied.push(`–ú–∞–∫—Å. –∑–∞—Ä–ø–ª–∞—Ç–∞: ${filters.maxSalary}`);
    if (filters.remote !== undefined) applied.push(`–£–¥–∞–ª–µ–Ω–∫–∞: ${filters.remote ? '–î–∞' : '–ù–µ—Ç'}`);
    
    return applied;
  }

  /**
   * Fallback –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  private getFallbackAnalysis(vacancy: any): VacancyAnalysis {
    return {
      specialization: 'other',
      employment: ['full_time'],
      experience: 'middle',
      technologies: [],
      salary: { currency: 'RUB' },
      remote: false,
      requirements: [],
      benefits: [],
      relevanceScore: 50,
      summary: '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
    };
  }

  /**
   * Fallback –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
   */
  private getFallbackQueryAnalysis(query: string): SearchQueryAnalysis {
    return {
      intent: query,
      specialization: ['other'],
      employment: ['full_time'],
      experience: ['middle'],
      technologies: [],
      location: '',
      salary: {},
      remote: false
    };
  }

  /**
   * Fallback —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
   */
  private getFallbackMatch(): any {
    return {
      relevanceScore: 50,
      matchReasons: [],
      missingRequirements: [],
      extraBenefits: []
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export const enhancedParser = new EnhancedVacancyParser();

