// Google Gemini Service –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–π
import { Employment } from '@/lib/types/employment';

export interface GeminiAnalysisResult {
  fullDescription: string;
  requirements: string;
  tasks: string;
  conditions: string;
  benefits: string;
  technologies: string[];
  experienceLevel: 'junior' | 'middle' | 'senior' | 'lead' | 'unknown';
  employmentType: Employment;
  remoteWork: boolean;
  salaryRange?: {
    min?: number;
    max?: number;
    currency: string;
  };
}

export async function analyzeVacancyWithGemini(
  title: string,
  company: string,
  description: string,
  url: string
): Promise<GeminiAnalysisResult> {
  console.log(`ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Gemini-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏: "${title}" –æ—Ç "${company}"`);

  const apiKey = process.env.GEMINI_API_KEY;
  
  if (!apiKey || apiKey === '–í–ê–®_GEMINI_–ö–õ–Æ–ß_–ó–î–ï–°–¨') {
    throw new Error('Gemini API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }

  const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é –∏ –∏–∑–≤–ª–µ–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.

–í–∞–∫–∞–Ω—Å–∏—è:
–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}
–ö–æ–º–ø–∞–Ω–∏—è: ${company}
URL: ${url}
–û–ø–∏—Å–∞–Ω–∏–µ:
${description}

–û–∂–∏–¥–∞–µ–º—ã–π JSON —Ñ–æ—Ä–º–∞—Ç:
{
  "fullDescription": "–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –æ—á–∏—â–µ–Ω–Ω–æ–µ –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –°–æ—Ö—Ä–∞–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å–ø–∏—Å–∫–∏, –∞–±–∑–∞—Ü—ã).",
  "requirements": "–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å, –≤ –≤–∏–¥–µ HTML –∏–ª–∏ Markdown.",
  "tasks": "–°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π –∏ –∑–∞–¥–∞—á, –µ—Å–ª–∏ –µ—Å—Ç—å, –≤ –≤–∏–¥–µ HTML –∏–ª–∏ Markdown.",
  "conditions": "–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã, –≥—Ä–∞—Ñ–∏–∫, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å, –≤ –≤–∏–¥–µ HTML –∏–ª–∏ Markdown.",
  "benefits": "–õ—å–≥–æ—Ç—ã –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ –µ—Å—Ç—å, –≤ –≤–∏–¥–µ HTML –∏–ª–∏ Markdown.",
  "technologies": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è1", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è2"],
  "experienceLevel": "junior" | "middle" | "senior" | "lead" | "unknown",
  "employmentType": "full_time" | "part_time" | "project" | "freelance" | "internship" | "volunteer" | "unknown",
  "remoteWork": true | false,
  "salaryRange": {
    "min": 100000,
    "max": 200000,
    "currency": "RUB"
  }
}

–ü—Ä–∏–º–µ—Ä –¥–ª—è employmentType:
- "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å" -> "full_time"
- "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å" -> "part_time"
- "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞" -> "project"
- "–§—Ä–∏–ª–∞–Ω—Å" -> "freelance"
- "–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞" -> "internship"
- "–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ" -> "volunteer"

–ü—Ä–∏–º–µ—Ä –¥–ª—è experienceLevel:
- "–ë–µ–∑ –æ–ø—ã—Ç–∞" -> "junior"
- "–û—Ç 1 –≥–æ–¥–∞ –¥–æ 3 –ª–µ—Ç" -> "middle"
- "–û—Ç 3 –¥–æ 6 –ª–µ—Ç" -> "senior"
- "–ë–æ–ª–µ–µ 6 –ª–µ—Ç" -> "lead"

–ï—Å–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ USD, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –≤ RUB –ø–æ –∫—É—Ä—Å—É 90.
–ï—Å–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ KZT, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –≤ RUB –ø–æ –∫—É—Ä—Å—É 0.2.
–ï—Å–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ EUR, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –≤ RUB –ø–æ –∫—É—Ä—Å—É 100.

–ò–∑–≤–ª–µ–∫–∞–π —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.
–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç.
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω–∏ –≤–∞–ª–∏–¥–Ω—ã–π JSON.
`;

  try {
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${apiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.3,
          maxOutputTokens: 1000,
          topP: 1,
          topK: 32
        }
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`Gemini API –æ—à–∏–±–∫–∞: ${response.status} - ${errorData.error?.message || response.statusText}`);
    }

    const data = await response.json();
    const geminiResponse = data.candidates[0].content.parts[0].text.trim();
    
    console.log(`üìù Gemini –æ—Ç–≤–µ—Ç: ${geminiResponse.substring(0, 200)}...`);
    
    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç (—É–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏)
    let cleanResponse = geminiResponse;
    if (cleanResponse.includes('```json')) {
      cleanResponse = cleanResponse.replace(/```json\n?/, '').replace(/```\n?$/, '');
    }
    if (cleanResponse.includes('```')) {
      cleanResponse = cleanResponse.replace(/```\n?/, '').replace(/```\n?$/, '');
    }
    
    const parsedResponse = JSON.parse(cleanResponse.trim());
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
    const result: GeminiAnalysisResult = {
      fullDescription: typeof parsedResponse.fullDescription === 'string' ? parsedResponse.fullDescription : description,
      requirements: typeof parsedResponse.requirements === 'string' ? parsedResponse.requirements : '',
      tasks: typeof parsedResponse.tasks === 'string' ? parsedResponse.tasks : '',
      conditions: typeof parsedResponse.conditions === 'string' ? parsedResponse.conditions : '',
      benefits: typeof parsedResponse.benefits === 'string' ? parsedResponse.benefits : '',
      technologies: Array.isArray(parsedResponse.technologies) ? parsedResponse.technologies.filter(item => typeof item === 'string') : [],
      experienceLevel: ['junior', 'middle', 'senior', 'lead'].includes(parsedResponse.experienceLevel) ? parsedResponse.experienceLevel : 'unknown',
      employmentType: ['full_time', 'part_time', 'project', 'freelance', 'internship', 'volunteer'].includes(parsedResponse.employmentType) ? parsedResponse.employmentType : 'unknown',
      remoteWork: typeof parsedResponse.remoteWork === 'boolean' ? parsedResponse.remoteWork : false,
      salaryRange: parsedResponse.salaryRange && typeof parsedResponse.salaryRange === 'object' ? {
        min: typeof parsedResponse.salaryRange.min === 'number' ? parsedResponse.salaryRange.min : undefined,
        max: typeof parsedResponse.salaryRange.max === 'number' ? parsedResponse.salaryRange.max : undefined,
        currency: typeof parsedResponse.salaryRange.currency === 'string' ? parsedResponse.salaryRange.currency : 'RUB'
      } : undefined
    };

    console.log(`‚úÖ Gemini-–∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è "${title}"`);
    return result;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ Gemini-–∞–Ω–∞–ª–∏–∑–µ –≤–∞–∫–∞–Ω—Å–∏–∏ "${title}":`, error);
    throw error;
  }
}