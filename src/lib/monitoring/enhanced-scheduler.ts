// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
import { spawn } from 'child_process';
import path from 'path';
import { SQLiteService } from '../database/sqlite-service';

export interface EnhancedMonitoringConfig {
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
  fullScanInterval: number; // –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4 —á–∞—Å–∞)
  quickScanInterval: number; // –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —á–∞—Å)
  healthCheckInterval: number; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 –º–∏–Ω—É—Ç)
  
  // –õ–∏–º–∏—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
  maxPagesPerSource: number;
  maxVacanciesPerRun: number;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
  enableCaching: boolean;
  cacheTimeoutMinutes: number;
  enablePlaywright: boolean; // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Playwright –¥–ª—è HH.ru
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  enableHealthMonitoring: boolean;
  alertThresholds: {
    maxResponseTime: number; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    minSuccessRate: number; // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    maxConsecutiveFailures: number; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á –ø–æ–¥—Ä—è–¥
  };
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  enableNotifications: boolean;
  notificationThreshold: number; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  
  // –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
  enabledSources: string[];
}

const DEFAULT_ENHANCED_CONFIG: EnhancedMonitoringConfig = {
  fullScanInterval: 4 * 60 * 60 * 1000, // 4 —á–∞—Å–∞
  quickScanInterval: 60 * 60 * 1000, // 1 —á–∞—Å
  healthCheckInterval: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  maxPagesPerSource: 3,
  maxVacanciesPerRun: 200,
  enableCaching: true,
  cacheTimeoutMinutes: 30,
  enablePlaywright: false,
  enableHealthMonitoring: true,
  alertThresholds: {
    maxResponseTime: 10.0,
    minSuccessRate: 80.0,
    maxConsecutiveFailures: 5
  },
  enableNotifications: true,
  notificationThreshold: 5,
  enabledSources: ['habr', 'hh']
};

export interface ParsingStats {
  runtime: number;
  totalFound: number;
  totalSaved: number;
  totalFiltered: number;
  totalCached: number;
  successRate: number;
  bySource: Record<string, {
    found: number;
    saved: number;
    filtered: number;
    avgQuality: number;
  }>;
  cacheStats: {
    hitRatio: number;
    activeEntries: number;
    cacheSize: number;
  };
  healthStatus: {
    overallStatus: string;
    activeAlerts: number;
    successRate: number;
  };
}

export class EnhancedVacancyMonitor {
  private config: EnhancedMonitoringConfig;
  private isRunning: boolean = false;
  private intervals: NodeJS.Timeout[] = [];
  private db: SQLiteService;
  private lastHealthCheck: Date | null = null;
  private consecutiveFailures: number = 0;

  constructor(config: Partial<EnhancedMonitoringConfig> = {}) {
    this.config = { ...DEFAULT_ENHANCED_CONFIG, ...config };
    this.db = new SQLiteService();
  }

  /**
   * –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public start(): void {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–π');
    console.log(`üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`, {
      ...this.config,
      enabledSources: this.config.enabledSources.join(', '),
      caching: this.config.enableCaching ? `${this.config.cacheTimeoutMinutes}min` : 'disabled',
      playwright: this.config.enablePlaywright ? 'enabled' : 'disabled'
    });

    this.isRunning = true;

    // –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
    const fullScanInterval = setInterval(() => {
      this.performEnhancedFullScan();
    }, this.config.fullScanInterval);

    // –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–π —á–∞—Å
    const quickScanInterval = setInterval(() => {
      this.performEnhancedQuickScan();
    }, this.config.quickScanInterval);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    const healthCheckInterval = setInterval(() => {
      this.performHealthCheck();
    }, this.config.healthCheckInterval);

    this.intervals.push(fullScanInterval, quickScanInterval, healthCheckInterval);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –∏ –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    this.performHealthCheck();
    setTimeout(() => this.performEnhancedFullScan(), 5000); // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥

    console.log('‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public stop(): void {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
    
    this.intervals.forEach(interval => clearInterval(interval));
    this.intervals = [];
    this.isRunning = false;

    console.log('‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Python —Å–∏—Å—Ç–µ–º—ã
   */
  private async performEnhancedFullScan(): Promise<void> {
    console.log('\nüîç –ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
    const startTime = Date.now();

    try {
      const stats = await this.runUltimateParser({
        query: '–¥–∏–∑–∞–π–Ω–µ—Ä',
        pages: this.config.maxPagesPerSource,
        sources: this.config.enabledSources,
        extractDetails: true,
        usePlaywright: this.config.enablePlaywright,
        cacheTtl: this.config.cacheTimeoutMinutes * 60
      });

      if (stats.error) {
        throw new Error(stats.error);
      }

      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:`);
      console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${stats.totalFound}`);
      console.log(`   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${stats.totalSaved}`);
      console.log(`   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: ${stats.totalFiltered}`);
      console.log(`   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${stats.successRate}%`);
      console.log(`   –í—Ä–µ–º—è: ${stats.runtime}—Å`);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ
      this.consecutiveFailures = 0;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (this.config.enableNotifications && stats.totalSaved >= this.config.notificationThreshold) {
        await this.sendEnhancedNotification(stats);
      }

      const duration = Date.now() - startTime;
      console.log(`‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${Math.round(duration / 1000)}—Å`);

    } catch (error) {
      this.consecutiveFailures++;
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
      if (this.consecutiveFailures >= this.config.alertThresholds.maxConsecutiveFailures) {
        await this.sendAlert('consecutive_failures', `${this.consecutiveFailures} consecutive parsing failures`);
      }
    }
  }

  /**
   * –£–ª—É—á—à–µ–Ω–Ω—ã–π –±—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥
   */
  private async performEnhancedQuickScan(): Promise<void> {
    console.log('\n‚ö° –£–ª—É—á—à–µ–Ω–Ω—ã–π –±—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
    const startTime = Date.now();

    try {
      const stats = await this.runUltimateParser({
        query: '–¥–∏–∑–∞–π–Ω–µ—Ä',
        pages: 1, // –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        sources: ['habr'], // –¢–æ–ª—å–∫–æ —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        extractDetails: false, // –ë–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        usePlaywright: false,
        cacheTtl: this.config.cacheTimeoutMinutes * 60
      });

      if (stats.error) {
        throw new Error(stats.error);
      }

      console.log(`üìä –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥: –Ω–∞–π–¥–µ–Ω–æ ${stats.totalFound}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${stats.totalSaved}`);

      const duration = Date.now() - startTime;
      console.log(`‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${Math.round(duration / 1000)}—Å`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
   */
  private async performHealthCheck(): Promise<void> {
    if (!this.config.enableHealthMonitoring) {
      return;
    }

    console.log('\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞');
    
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —á–µ—Ä–µ–∑ Python —Å–∏—Å—Ç–µ–º—É
      const healthStats = await this.getSystemHealth();
      
      this.lastHealthCheck = new Date();
      
      console.log(`üè• –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: ${healthStats.overallStatus}`);
      console.log(`üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${healthStats.successRate}%`);
      console.log(`‚ö†Ô∏è  –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: ${healthStats.activeAlerts}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      if (healthStats.successRate < this.config.alertThresholds.minSuccessRate) {
        await this.sendAlert('low_success_rate', `Success rate ${healthStats.successRate}% below threshold`);
      }

      if (healthStats.overallStatus === 'critical') {
        await this.sendAlert('system_critical', 'System health is critical');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã:', error.message);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ Ultimate Parser —á–µ—Ä–µ–∑ Python subprocess
   */
  private async runUltimateParser(options: {
    query: string;
    pages: number;
    sources: string[];
    extractDetails: boolean;
    usePlaywright: boolean;
    cacheTtl: number;
  }): Promise<ParsingStats> {
    return new Promise((resolve, reject) => {
      const parsersPath = path.join(process.cwd(), 'parsers');
      const scriptPath = path.join(parsersPath, 'ultimate_unified_parser.py');
      
      const args = [
        scriptPath,
        '--query', options.query,
        '--pages', options.pages.toString(),
        '--sources', ...options.sources,
        '--cache-ttl', options.cacheTtl.toString()
      ];

      if (options.extractDetails) {
        args.push('--extract-details');
      }

      if (options.usePlaywright) {
        args.push('--use-playwright');
      }

      console.log(`üêç –ó–∞–ø—É—Å–∫–∞–µ–º Python –ø–∞—Ä—Å–µ—Ä: python ${args.join(' ')}`);

      const pythonProcess = spawn('python', args, {
        cwd: parsersPath,
        stdio: ['pipe', 'pipe', 'pipe'],
        env: { ...process.env, PYTHONPATH: parsersPath }
      });

      let stdout = '';
      let stderr = '';

      pythonProcess.stdout.on('data', (data) => {
        stdout += data.toString();
      });

      pythonProcess.stderr.on('data', (data) => {
        stderr += data.toString();
      });

      pythonProcess.on('close', (code) => {
        console.log(`üêç Python –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
        console.log(`üì§ stdout: ${stdout}`);
        if (stderr) console.log(`üì§ stderr: ${stderr}`);
        
        if (code === 0) {
          try {
            // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ stdout
            const stats = this.parseParsingResults(stdout);
            resolve(stats);
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${error.message}`);
            reject(new Error(`Failed to parse results: ${error.message}`));
          }
        } else {
          reject(new Error(`Python parser failed with code ${code}: ${stderr}`));
        }
      });

      pythonProcess.on('error', (error) => {
        reject(new Error(`Failed to start Python parser: ${error.message}`));
      });
    });
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –≤—ã–≤–æ–¥–∞ Python —Å–∫—Ä–∏–ø—Ç–∞
   */
  private parseParsingResults(output: string): ParsingStats {
    console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –≤—ã–≤–æ–¥–∞ Python:`);
    console.log(output);
    
    // –ò—â–µ–º JSON –≤ –≤—ã–≤–æ–¥–µ –∏–ª–∏ –ø–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    const lines = output.split('\n');
    
    // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    let totalFound = 0;
    let totalSaved = 0;
    let totalFiltered = 0;
    let runtime = 0;
    let successRate = 0;

    for (const line of lines) {
      // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "Found: 25 | Saved: 0 | Filtered: 9"
      if (line.includes('Found:') && line.includes('Saved:') && line.includes('Filtered:')) {
        const foundMatch = line.match(/Found:\s*(\d+)/);
        const savedMatch = line.match(/Saved:\s*(\d+)/);
        const filteredMatch = line.match(/Filtered:\s*(\d+)/);
        
        if (foundMatch) totalFound = parseInt(foundMatch[1]);
        if (savedMatch) totalSaved = parseInt(savedMatch[1]);
        if (filteredMatch) totalFiltered = parseInt(filteredMatch[1]);
      }
      
      // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "Runtime: 0.1s"
      if (line.includes('Runtime:') && line.includes('s')) {
        const match = line.match(/Runtime:\s*([\d.]+)s/);
        if (match) runtime = parseFloat(match[1]);
      }
      
      // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –≤–∏–¥–∞ "habr        :  25 found ->   0 saved ( 9 filtered) OK 87.6%"
      if (line.includes('found ->') && line.includes('saved')) {
        const successMatch = line.match(/([\d.]+)%/);
        if (successMatch) {
          const rate = parseFloat(successMatch[1]);
          if (rate > successRate) successRate = rate; // –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Å–ø–µ—Ö
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ success rate, –≤—ã—á–∏—Å–ª—è–µ–º —Å–∞–º–∏
    if (successRate === 0 && totalFound > 0) {
      successRate = ((totalFound - totalFiltered) / totalFound) * 100;
    }

    const result = {
      runtime,
      totalFound,
      totalSaved,
      totalFiltered,
      totalCached: 0,
      successRate,
      bySource: {},
      cacheStats: {
        hitRatio: 0,
        activeEntries: 0,
        cacheSize: 0
      },
      healthStatus: {
        overallStatus: totalSaved > 0 ? 'healthy' : 'warning',
        activeAlerts: totalSaved === 0 ? 1 : 0,
        successRate
      }
    };

    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:`, result);
    return result;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
   */
  private async getSystemHealth(): Promise<any> {
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É Python —Å–∏—Å—Ç–µ–º—ã
    return {
      overallStatus: this.consecutiveFailures > 0 ? 'degraded' : 'healthy',
      successRate: Math.max(0, 100 - (this.consecutiveFailures * 20)),
      activeAlerts: this.consecutiveFailures > 0 ? 1 : 0
    };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private async sendEnhancedNotification(stats: ParsingStats): Promise<void> {
    console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:`);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${stats.totalFound} –≤–∞–∫–∞–Ω—Å–∏–π`);
    console.log(`   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${stats.totalSaved} –Ω–æ–≤—ã—Ö`);
    console.log(`   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${stats.successRate}%`);
    console.log(`   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${stats.runtime}—Å`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram, email, Slack –∏ —Ç.–¥.
    const message = `üéØ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n` +
                   `üìä –ù–∞–π–¥–µ–Ω–æ: ${stats.totalFound}\n` +
                   `üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${stats.totalSaved}\n` +
                   `üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${stats.successRate}%\n` +
                   `‚è±Ô∏è –í—Ä–µ–º—è: ${stats.runtime}—Å`;
    
    console.log(`üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${message}`);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
   */
  private async sendAlert(type: string, message: string): Promise<void> {
    console.log(`üö® ALERT [${type.toUpperCase()}]: ${message}`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    // PagerDuty, Slack, Telegram –∏ —Ç.–¥.
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public async getEnhancedStats(): Promise<any> {
    try {
      const dbStats = await this.db.getVacancies('', 'design', [], '', undefined, undefined, undefined, 1, 0);
      
      return {
        isRunning: this.isRunning,
        lastHealthCheck: this.lastHealthCheck,
        consecutiveFailures: this.consecutiveFailures,
        totalVacancies: dbStats.total,
        pendingVacancies: dbStats.vacancies.filter(v => !v.is_approved && !v.is_rejected).length,
        approvedVacancies: dbStats.vacancies.filter(v => v.is_approved).length,
        config: this.config,
        systemHealth: await this.getSystemHealth(),
        message: this.isRunning ? '–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω' : '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {
        isRunning: this.isRunning,
        lastHealthCheck: this.lastHealthCheck,
        consecutiveFailures: this.consecutiveFailures,
        totalVacancies: 0,
        pendingVacancies: 0,
        approvedVacancies: 0,
        config: this.config,
        systemHealth: { overallStatus: 'unknown', successRate: 0, activeAlerts: 0 },
        error: error.message
      };
    }
  }

  /**
   * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  public async runManualParsing(options: {
    sources?: string[];
    pages?: number;
    extractDetails?: boolean;
  } = {}): Promise<ParsingStats> {
    console.log('üîß –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞');
    
    return await this.runUltimateParser({
      query: '–¥–∏–∑–∞–π–Ω–µ—Ä',
      pages: options.pages || 2,
      sources: options.sources || this.config.enabledSources,
      extractDetails: options.extractDetails !== false,
      usePlaywright: this.config.enablePlaywright,
      cacheTtl: this.config.cacheTimeoutMinutes * 60
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const enhancedVacancyMonitor = new EnhancedVacancyMonitor();
