// –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
import { parseAllDesignVacancies } from '../parsers/enhanced-parser';
import { analyzeVacancyWithDeepSeek } from '../ai/deepseek-service';
import { SQLiteService } from '../database/sqlite-service';

export interface MonitoringConfig {
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
  fullScanInterval: number; // –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4 —á–∞—Å–∞)
  quickScanInterval: number; // –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —á–∞—Å)
  
  // –õ–∏–º–∏—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
  maxVacanciesPerSource: number;
  maxTotalVacancies: number;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI –∞–Ω–∞–ª–∏–∑–∞
  enableAIAnalysis: boolean;
  aiAnalysisBatchSize: number;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  enableNotifications: boolean;
  notificationThreshold: number; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
}

const DEFAULT_CONFIG: MonitoringConfig = {
  fullScanInterval: 4 * 60 * 60 * 1000, // 4 —á–∞—Å–∞
  quickScanInterval: 60 * 60 * 1000, // 1 —á–∞—Å
  maxVacanciesPerSource: 50,
  maxTotalVacancies: 200,
  enableAIAnalysis: true,
  aiAnalysisBatchSize: 10,
  enableNotifications: true,
  notificationThreshold: 5
};

export class VacancyMonitor {
  private config: MonitoringConfig;
  private isRunning: boolean = false;
  private intervals: NodeJS.Timeout[] = [];
  private db: SQLiteService;

  constructor(config: Partial<MonitoringConfig> = {}) {
    this.config = { ...DEFAULT_CONFIG, ...config };
    this.db = new SQLiteService();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public start(): void {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–π');
    console.log(`üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`, this.config);

    this.isRunning = true;

    // –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
    const fullScanInterval = setInterval(() => {
      this.performFullScan();
    }, this.config.fullScanInterval);

    // –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–π —á–∞—Å
    const quickScanInterval = setInterval(() => {
      this.performQuickScan();
    }, this.config.quickScanInterval);

    this.intervals.push(fullScanInterval, quickScanInterval);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ä–∞–∑—É
    this.performFullScan();

    console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public stop(): void {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
    
    this.intervals.forEach(interval => clearInterval(interval));
    this.intervals = [];
    this.isRunning = false;

    console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   */
  private async performFullScan(): Promise<void> {
    console.log('\nüîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
    const startTime = Date.now();

    try {
      // –ü–∞—Ä—Å–∏–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      const vacancies = await parseAllDesignVacancies(this.config.maxTotalVacancies);
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${vacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);

      if (vacancies.length === 0) {
        console.log('‚ö†Ô∏è –ù–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é AI
      if (this.config.enableAIAnalysis) {
        await this.analyzeVacanciesWithAI(vacancies);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.saveVacanciesToDatabase(vacancies);

      const duration = Date.now() - startTime;
      console.log(`‚úÖ –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${Math.round(duration / 1000)}—Å`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (this.config.enableNotifications && vacancies.length >= this.config.notificationThreshold) {
        await this.sendNotification(vacancies.length);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏)
   */
  private async performQuickScan(): Promise<void> {
    console.log('\n‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
    const startTime = Date.now();

    try {
      // –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ —Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      const { parseHHVacancies } = await import('../parsers/hh/parser');
      const { parseHabrVacancies } = await import('../parsers/habr/parser');
      
      const [hhVacancies, habrVacancies] = await Promise.all([
        parseHHVacancies('–¥–∏–∑–∞–π–Ω–µ—Ä', 1).catch(() => []),
        parseHabrVacancies('–¥–∏–∑–∞–π–Ω–µ—Ä', 1).catch(() => [])
      ]);

      const vacancies = [...hhVacancies, ...habrVacancies];
      console.log(`üìä –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥: ${vacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);

      if (vacancies.length > 0) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        await this.saveNewVacanciesOnly(vacancies);
      }

      const duration = Date.now() - startTime;
      console.log(`‚úÖ –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${Math.round(duration / 1000)}—Å`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
    }
  }

  /**
   * AI –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π
   */
  private async analyzeVacanciesWithAI(vacancies: any[]): Promise<void> {
    console.log(`ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ ${vacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    
    const batchSize = this.config.aiAnalysisBatchSize;
    const batches = [];
    
    for (let i = 0; i < vacancies.length; i += batchSize) {
      batches.push(vacancies.slice(i, i + batchSize));
    }

    for (let i = 0; i < batches.length; i++) {
      const batch = batches[i];
      console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ${i + 1}/${batches.length} (${batch.length} –≤–∞–∫–∞–Ω—Å–∏–π)`);
      
      await Promise.all(batch.map(async (vacancy) => {
        try {
          const analysis = await analyzeVacancyWithDeepSeek(
            vacancy.title,
            vacancy.description || '',
            vacancy.company
          );
          
          // –î–æ–±–∞–≤–ª—è–µ–º AI –∞–Ω–∞–ª–∏–∑ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏
          vacancy.aiAnalysis = analysis;
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancy.id}:`, error);
        }
      }));

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
      if (i < batches.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }

    console.log(`‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω`);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  private async saveVacanciesToDatabase(vacancies: any[]): Promise<void> {
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º ${vacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
    
    let savedCount = 0;
    let skippedCount = 0;

    for (const vacancy of vacancies) {
      try {
        const vacancyData = {
          external_id: vacancy.id,
          source: vacancy.source,
          url: vacancy.url,
          title: vacancy.title,
          company: vacancy.company,
          location: vacancy.location || '',
          description: vacancy.description || '',
          published_at: new Date(vacancy.publishedAt || new Date()).toISOString(),
          ai_specialization: vacancy.aiAnalysis?.specialization || 'design',
          ai_employment: JSON.stringify(vacancy.aiAnalysis?.employment || ['full_time']),
          ai_experience: vacancy.aiAnalysis?.experience || 'middle',
          ai_technologies: JSON.stringify(vacancy.aiAnalysis?.technologies || []),
          ai_salary_min: vacancy.aiAnalysis?.salary?.min,
          ai_salary_max: vacancy.aiAnalysis?.salary?.max,
          ai_salary_currency: vacancy.aiAnalysis?.salary?.currency || 'RUB',
          ai_remote: vacancy.aiAnalysis?.remote || false,
          ai_relevance_score: vacancy.aiAnalysis?.relevanceScore || 0,
          ai_summary: vacancy.aiAnalysis?.summary || '',
          is_approved: false,
          is_rejected: false,
          moderation_notes: '',
          moderated_at: undefined,
          moderated_by: ''
        };

        await this.db.saveVacancy(vacancyData);
        savedCount++;
      } catch (error) {
        if (error.message?.includes('UNIQUE constraint failed')) {
          skippedCount++;
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancy.id}:`, error);
        }
      }
    }

    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${savedCount}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
   */
  private async saveNewVacanciesOnly(vacancies: any[]): Promise<void> {
    console.log(`üíæ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ ${vacancies.length}`);
    
    let newCount = 0;
    
    for (const vacancy of vacancies) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è
        const existing = await this.db.getVacancies('', 'design', [], '', undefined, undefined, undefined, 1, 0);
        const exists = existing.vacancies.some(v => v.url === vacancy.url);
        
        if (!exists) {
          const vacancyData = {
            external_id: vacancy.id,
            source: vacancy.source,
            url: vacancy.url,
            title: vacancy.title,
            company: vacancy.company,
            location: vacancy.location || '',
            description: vacancy.description || '',
            published_at: new Date(vacancy.publishedAt || new Date()).toISOString(),
            ai_specialization: 'design',
            ai_employment: JSON.stringify(['full_time']),
            ai_experience: 'middle',
            ai_technologies: JSON.stringify([]),
            ai_salary_min: undefined,
            ai_salary_max: undefined,
            ai_salary_currency: 'RUB',
            ai_remote: false,
            ai_relevance_score: 0,
            ai_summary: '',
            is_approved: false,
            is_rejected: false,
            moderation_notes: '',
            moderated_at: undefined,
            moderated_by: ''
          };

          await this.db.saveVacancy(vacancyData);
          newCount++;
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancy.id}:`, error);
      }
    }

    console.log(`‚úÖ –ù–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: ${newCount}`);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private async sendNotification(vacancyCount: number): Promise<void> {
    console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –Ω–∞–π–¥–µ–Ω–æ ${vacancyCount} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram, email, Slack –∏ —Ç.–¥.
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    console.log(`üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –ù–∞–π–¥–µ–Ω–æ ${vacancyCount} –Ω–æ–≤—ã—Ö –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public async getStats(): Promise<any> {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      return {
        isRunning: this.isRunning,
        totalVacancies: 0,
        pendingVacancies: 0,
        approvedVacancies: 0,
        config: this.config,
        message: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω'
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {
        isRunning: this.isRunning,
        totalVacancies: 0,
        pendingVacancies: 0,
        approvedVacancies: 0,
        config: this.config,
        error: error.message
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const vacancyMonitor = new VacancyMonitor();
