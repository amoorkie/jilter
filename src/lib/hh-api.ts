// lib/hh-api.ts

interface Vacancy {
  id: string;
  title: string;
  salary: string;
  company: string;
  url: string;
  experience: string;
  schedule: string;
  employment: string;
  description: string;
  skills: string[];
  area: string;
  publishedAt: string;
  companyLogo?: string;
  companyUrl?: string;
}

interface HHVacancy {
  id: string;
  name: string;
  salary: {
    from: number | null;
    to: number | null;
    currency: string;
  } | null;
  employer: {
    name: string;
    logo_urls?: {
      original?: string;
    };
    alternate_url?: string;
  };
  experience: {
    name: string;
  };
  schedule: {
    name: string;
  };
  employment: {
    name: string;
  };
  snippet: {
    requirement?: string;
    responsibility?: string;
  };
  key_skills: Array<{
    name: string;
  }>;
  area: {
    name: string;
  };
  published_at: string;
  alternate_url: string;
}

interface HHResponse {
  items: HHVacancy[];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π
function processVacancies(items: HHVacancy[]): Vacancy[] {
  console.log('üîÑ processVacancies –≤—ã–∑–≤–∞–Ω–∞ —Å', items.length, '—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏');
  
  if (!Array.isArray(items)) {
    console.error('‚ùå processVacancies: items –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', typeof items);
    return [];
  }
  
  if (items.length === 0) {
    console.log('‚ö†Ô∏è processVacancies: –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ items');
    return [];
  }
  
  console.log('üìã –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', {
    id: items[0].id,
    name: items[0].name,
    hasSalary: !!items[0].salary,
    hasEmployer: !!items[0].employer
  });
  
  return items.map((item: HHVacancy, index: number) => {
    let salaryText = '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    
    if (item.salary) {
      const { from, to, currency } = item.salary;
      const currencySymbol = currency === 'RUR' ? '‚ÇΩ' : currency;
      
      if (from && to) {
        salaryText = `${from.toLocaleString('ru-RU')} - ${to.toLocaleString('ru-RU')} ${currencySymbol}`;
      } else if (from) {
        salaryText = `–æ—Ç ${from.toLocaleString('ru-RU')} ${currencySymbol}`;
      } else if (to) {
        salaryText = `–¥–æ ${to.toLocaleString('ru-RU')} ${currencySymbol}`;
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ snippet
    const description = [
      item.snippet.responsibility && `–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: ${item.snippet.responsibility}`,
      item.snippet.requirement && `–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${item.snippet.requirement}`
    ].filter(Boolean).join('\n\n');

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    const publishedDate = new Date(item.published_at);
    const publishedAt = publishedDate.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });

    return {
      id: item.id,
      title: item.name,
      salary: salaryText,
      company: item.employer.name,
      url: item.alternate_url,
      experience: item.experience.name,
      schedule: item.schedule.name,
      employment: item.employment.name,
      description: description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
      skills: item.key_skills.map(skill => skill.name),
      area: item.area.name,
      publishedAt: publishedAt,
      companyLogo: item.employer.logo_urls?.original,
      companyUrl: item.employer.alternate_url,
    };
  });
  
  console.log('‚úÖ processVacancies –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ', items.length, '–≤–∞–∫–∞–Ω—Å–∏–π');
}

export async function fetchVacancies(query: string, salary: boolean = true): Promise<Vacancy[]> {
  console.log('üöÄ fetchVacancies –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { query, salary });
  
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ HH.ru API —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const baseUrl = 'https://api.hh.ru/vacancies';
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ HH.ru API
    // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: https://github.com/hhru/api
    const searchParams = new URLSearchParams();
    searchParams.append('text', query); // URLSearchParams –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–¥–∏—Ä—É–µ—Ç
    searchParams.append('per_page', '100'); // –ú–∞–∫—Å–∏–º—É–º 100 –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞ –∑–∞–ø—Ä–æ—Å
    searchParams.append('area', '113'); // –†–æ—Å—Å–∏—è (113)
    searchParams.append('order_by', 'publication_time'); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    searchParams.append('search_field', 'name'); // –ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
    if (salary) {
      searchParams.append('only_with_salary', 'true');
    }

    const fullUrl = `${baseUrl}?${searchParams}`;
    console.log('üîç –ó–∞–ø—Ä–æ—Å –∫ HH.ru API:', fullUrl);
    console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', Object.fromEntries(searchParams));
    console.log('üìã –ò—Å—Ö–æ–¥–Ω—ã–π query:', query);
    console.log('üìã –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π query:', encodeURIComponent(query));

    const response = await fetch(fullUrl, {
      method: 'GET',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'application/json',
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
      },
    });

    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status, response.statusText);
    console.log('üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(response.headers.entries()));

    // HH.ru API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 400, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π
    if (!response.ok && response.status !== 400) {
      console.error('‚ùå HTTP –æ—à–∏–±–∫–∞:', response.status, response.statusText);
      const errorText = await response.text();
      console.error('‚ùå –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText);
      console.error('‚ùå URL –∑–∞–ø—Ä–æ—Å–∞:', fullUrl);
      console.error('‚ùå –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(response.headers.entries()));
      throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
    }

    // –ï—Å–ª–∏ 400 - –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ
    if (response.status === 400) {
      console.log('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω 400, –ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ...');
      
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è retry (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ)
      const retryParams = new URLSearchParams();
      retryParams.append('text', query); // URLSearchParams –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–¥–∏—Ä—É–µ—Ç
      retryParams.append('per_page', '100');
      retryParams.append('area', '113'); // –†–æ—Å—Å–∏—è
      // ‚úÖ –£–±–∏—Ä–∞–µ–º only_with_salary –¥–ª—è retry
      
      const retryUrl = `${baseUrl}?${retryParams}`;
      console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', retryUrl);
      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã retry:', Object.fromEntries(retryParams));
      
      const retryResponse = await fetch(retryUrl, {
        method: 'GET',
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
          'Accept': 'application/json',
          'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
        },
      });
      
      console.log('üîÑ –°—Ç–∞—Ç—É—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', retryResponse.status, retryResponse.statusText);
      
      if (!retryResponse.ok) {
        console.log('‚ùå –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è:', retryResponse.status);
        const retryErrorText = await retryResponse.text();
        console.error('‚ùå –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', retryErrorText);
        return [];
      }
      
      const retryData: HHResponse = await retryResponse.json();
      console.log('‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π:', retryData.items?.length || 0);
      console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', {
        hasItems: !!retryData.items,
        itemsLength: retryData.items?.length,
        firstItem: retryData.items?.[0] ? {
          id: retryData.items[0].id,
          name: retryData.items[0].name,
          employer: retryData.items[0].employer?.name
        } : null
      });
      
      if (!retryData || !Array.isArray(retryData.items)) {
        console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ');
        return [];
      }
      
      const processedVacancies = processVacancies(retryData.items);
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', processedVacancies.length);
      return processedVacancies;
    }

    const data: HHResponse = await response.json();
    console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', data.items?.length || 0, '–≤–∞–∫–∞–Ω—Å–∏–π');
    console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:', {
      hasItems: !!data.items,
      itemsLength: data.items?.length,
      firstItem: data.items?.[0] ? {
        id: data.items[0].id,
        name: data.items[0].name,
        employer: data.items[0].employer?.name
      } : null
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    if (!data || !Array.isArray(data.items)) {
      console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API');
      return [];
    }

    const vacancies = processVacancies(data.items);
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π:', vacancies.length);
    
    if (vacancies.length > 0) {
      console.log('üéâ –ü–µ—Ä–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è:', {
        id: vacancies[0].id,
        title: vacancies[0].title,
        company: vacancies[0].company,
        salary: vacancies[0].salary
      });
    }
    
    return vacancies;
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π:', error);
    console.error('üí• –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error instanceof Error ? error.stack : '–ù–µ—Ç —Å—Ç–µ–∫–∞');
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏
    return [];
  }
}