// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ —á–µ—Ä–µ–∑ DeepSeek AI –∏ SQLite
import { NextRequest, NextResponse } from 'next/server';
import { Employment } from '@/lib/types/employment';
import { analyzeVacancyWithGigaChat, filterVacanciesWithGigaChat } from '@/lib/ai/gigachat-service';
import { SQLiteService } from '@/lib/database/sqlite-service';
import { parseAllDesignVacancies } from '@/lib/parsers/enhanced-parser';
import { parseAllVacancies } from '@/lib/parsers/unified-parser';

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
async function processVacancyDescription(description: string) {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
  const requirementsMatch = description.match(/(?:—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è?|—Ç—Ä–µ–±—É–µ—Ç—Å—è?|–Ω—É–∂–Ω–æ?|–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ?)[:.]?\s*([^.]*)/i);
  const requirements = requirementsMatch ? requirementsMatch[1].trim() : '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã';

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏/–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
  const tasksMatch = description.match(/(?:–∑–∞–¥–∞—á–∏?|–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏?|—Ñ—É–Ω–∫—Ü–∏–∏?|—á—Ç–æ\s+–¥–µ–ª–∞—Ç—å?)[:.]?\s*([^.]*)/i);
  const tasks = tasksMatch ? tasksMatch[1].trim() : '–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã';

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Å–ª–æ–≤–∏—è
  const conditionsMatch = description.match(/(?:—É—Å–ª–æ–≤–∏—è?|—á—Ç–æ\s+–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º?|–º—ã\s+–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º?)[:.]?\s*([^.]*)/i);
  const conditions = conditionsMatch ? conditionsMatch[1].trim() : '–£—Å–ª–æ–≤–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã';

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ª—å–≥–æ—Ç—ã
  const benefitsMatch = description.match(/(?:–ª—å–≥–æ—Ç—ã?|–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞?|–±–æ–Ω—É—Å—ã?|–ø–ª—é—Å—ã?)[:.]?\s*([^.]*)/i);
  const benefits = benefitsMatch ? benefitsMatch[1].trim() : '–õ—å–≥–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã';

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
  const technologies = [];
  if (description.toLowerCase().includes('figma')) technologies.push('Figma');
  if (description.toLowerCase().includes('sketch')) technologies.push('Sketch');
  if (description.toLowerCase().includes('adobe')) technologies.push('Adobe Creative Suite');
  if (description.toLowerCase().includes('photoshop')) technologies.push('Photoshop');
  if (description.toLowerCase().includes('illustrator')) technologies.push('Illustrator');
  if (description.toLowerCase().includes('after effects')) technologies.push('After Effects');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞
  let experienceLevel = 'middle';
  if (description.toLowerCase().includes('junior') || description.toLowerCase().includes('–º–ª–∞–¥—à–∏–π')) {
    experienceLevel = 'junior';
  } else if (description.toLowerCase().includes('senior') || description.toLowerCase().includes('—Å—Ç–∞—Ä—à–∏–π')) {
    experienceLevel = 'senior';
  } else if (description.toLowerCase().includes('lead') || description.toLowerCase().includes('–≤–µ–¥—É—â–∏–π')) {
    experienceLevel = 'lead';
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
  let employmentType = 'full_time';
  if (description.toLowerCase().includes('—É–¥–∞–ª–µ–Ω–Ω') || description.toLowerCase().includes('remote')) {
    employmentType = 'remote';
  } else if (description.toLowerCase().includes('—á–∞—Å—Ç–∏—á–Ω') || description.toLowerCase().includes('part time')) {
    employmentType = 'part_time';
  } else if (description.toLowerCase().includes('–ø—Ä–æ–µ–∫—Ç') || description.toLowerCase().includes('project')) {
    employmentType = 'project';
  } else if (description.toLowerCase().includes('—Ñ—Ä–∏–ª–∞–Ω—Å') || description.toLowerCase().includes('freelance')) {
    employmentType = 'freelance';
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É
  const remoteWork = description.toLowerCase().includes('—É–¥–∞–ª–µ–Ω–Ω') || description.toLowerCase().includes('remote');

  return {
    fullDescription: description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
    requirements: requirements,
    tasks: tasks,
    conditions: conditions,
    benefits: benefits,
    technologies: technologies,
    experienceLevel: experienceLevel as 'junior' | 'middle' | 'senior' | 'lead',
    employmentType: employmentType as 'full_time' | 'part_time' | 'remote' | 'project' | 'freelance',
    remoteWork: remoteWork,
    salaryRange: undefined
  };
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    const query = searchParams.get('query') || searchParams.get('q') || '';
    const specialization = searchParams.get('specialization') || 'design';
    const employment = searchParams.getAll('employment[]') as Employment[];
    const experience = searchParams.get('experience') || '';
    const remote = searchParams.get('remote') === 'true';
    const minSalary = searchParams.get('minSalary') ? parseInt(searchParams.get('minSalary')!) : undefined;
    const maxSalary = searchParams.get('maxSalary') ? parseInt(searchParams.get('maxSalary')!) : undefined;
    const limit = parseInt(searchParams.get('limit') || '20');
    const offset = parseInt(searchParams.get('offset') || '0');

    console.log('üîç API /api/vacancies –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
      query, specialization, employment, experience, remote, minSalary, maxSalary, limit, offset
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SQLite
    const db = new SQLiteService();

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑–µ
      const existingVacancies = await db.getAllVacancies();
      
      // –ï—Å–ª–∏ –≤ –±–∞–∑–µ –º–µ–Ω—å—à–µ 10 –≤–∞–∫–∞–Ω—Å–∏–π, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
      if (existingVacancies.length < 10) {
        console.log('üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...');
        
        // –ü–∞—Ä—Å–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');
        const rawVacancies = await parseAllVacancies('–¥–∏–∑–∞–π–Ω–µ—Ä', 50);
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${rawVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º
        for (const vacancy of rawVacancies) {
          let structuredData = {
            fullDescription: vacancy.description || '',
            requirements: '',
            tasks: '',
            conditions: '',
            benefits: '',
            technologies: [],
            experienceLevel: 'middle',
            employmentType: 'full_time',
            remoteWork: false,
            salaryRange: undefined
          };
          
          try {
            // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ${vacancy.title}`);
            structuredData = await processVacancyDescription(vacancy.description || '');
            console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è ${vacancy.title}`);
          } catch (error) {
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è ${vacancy.title}: ${error.message}`);
            // Fallback –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
            structuredData = {
              fullDescription: vacancy.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
              requirements: '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
              tasks: '–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
              conditions: '–£—Å–ª–æ–≤–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
              benefits: '–õ—å–≥–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
              technologies: [],
              experienceLevel: 'unknown' as const,
              employmentType: 'unknown' as const,
              remoteWork: false,
              salaryRange: undefined
            };
          }
          
          const vacancyRecord = {
            external_id: vacancy.id,
            source: vacancy.source,
            url: vacancy.url,
            title: vacancy.title,
            company: vacancy.company,
            location: vacancy.location || '',
            description: structuredData.fullDescription,
            salary_min: structuredData.salaryRange?.min,
            salary_max: structuredData.salaryRange?.max,
            salary_currency: structuredData.salaryRange?.currency || 'RUB',
            published_at: new Date().toISOString(),
            ai_specialization: 'design',
            ai_employment: [structuredData.employmentType],
            ai_experience: structuredData.experienceLevel,
            ai_technologies: structuredData.technologies,
            ai_salary_min: structuredData.salaryRange?.min,
            ai_salary_max: structuredData.salaryRange?.max,
            ai_remote: structuredData.remoteWork,
            ai_relevance_score: 0.8,
            ai_summary: '–í–∞–∫–∞–Ω—Å–∏—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞',
            full_description: structuredData.fullDescription || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
            requirements: structuredData.requirements || '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
            tasks: structuredData.tasks || '–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
            conditions: structuredData.conditions || '–£—Å–ª–æ–≤–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
            benefits: structuredData.benefits || '–õ—å–≥–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
            company_logo: '',
            company_url: '',
            employment_type: structuredData.employmentType,
            experience_level: structuredData.experienceLevel,
            remote_type: structuredData.remoteWork ? 'remote' : 'office'
          };

          console.log(`üîç –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é: ${vacancy.title}`);
          console.log(`üìù full_description: ${vacancyRecord.full_description}`);
          console.log(`üìù requirements: ${vacancyRecord.requirements}`);
          console.log(`üìù tasks: ${vacancyRecord.tasks}`);
          console.log(`üìù conditions: ${vacancyRecord.conditions}`);
          console.log(`üìù benefits: ${vacancyRecord.benefits}`);
          
          await db.saveVacancy(vacancyRecord);
          console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º: ${vacancy.title}`);
        }

        console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${rawVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
      }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –±–∞–∑—ã
        const approvedVacancies = await db.getApprovedVacancies();
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
      const formattedVacancies = approvedVacancies.map(vacancy => ({
        id: vacancy.external_id,
        title: vacancy.title,
        company: vacancy.company,
        salary: vacancy.salary_min && vacancy.salary_max 
          ? `${vacancy.salary_min.toLocaleString()} - ${vacancy.salary_max.toLocaleString()} ${vacancy.salary_currency}`
          : '–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
        url: vacancy.url,
        description: vacancy.description,
        source: vacancy.source,
        publishedAt: vacancy.published_at,
        score: vacancy.ai_relevance_score,
        matchedTokens: [],
        reasons: [],
        aiAnalysis: {
          specialization: vacancy.ai_specialization,
          employment: vacancy.ai_employment, // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ SQLiteService
          experience: vacancy.ai_experience,
          technologies: vacancy.ai_technologies, // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ SQLiteService
          remote: vacancy.ai_remote,
          requirements: [],
          benefits: [],
          summary: vacancy.ai_summary
        }
      }));

      return NextResponse.json({
        vacancies: formattedVacancies,
        total: formattedVacancies.length,
        hasMore: false,
        nextCursor: null,
        filters: {
          q: query,
          specialization: 'design',
          employment: [],
          experience: '',
          remote: false,
          minSalary: undefined,
          maxSalary: undefined,
          limit: 20,
          offset: 0
        },
        source: 'database'
      });

    } finally {
      db.close();
    }

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ API /api/vacancies:', error);
    return NextResponse.json(
      { error: 'Internal Server Error', details: error.message },
      { status: 500 }
    );
  }
}