// API –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
import { NextRequest, NextResponse } from 'next/server';
import { parseFastDesignVacancies } from '@/lib/parsers/fast-parser';
import { SQLiteService } from '@/lib/database/sqlite-service';
import { analyzeVacancyWithGigaChat } from '@/lib/ai/gigachat-service';
import { processVacancySmart } from '@/lib/ai/smart-text-processor';
import { EnhancedHabrParser } from '@/lib/parsers/habr/enhanced-parser';
import { parseAllVacancies } from '@/lib/parsers/unified-parser';

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
async function processVacancyDescription(description: string) {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
  const requirementsMatch = description.match(/(?:—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è?|—Ç—Ä–µ–±—É–µ—Ç—Å—è?|–Ω—É–∂–Ω–æ?|–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ?)[:.]?\s*([^.]*)/i);
  const requirements = requirementsMatch ? requirementsMatch[1].trim() : '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã';

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏/–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
  const tasksMatch = description.match(/(?:–∑–∞–¥–∞—á–∏?|–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏?|—Ñ—É–Ω–∫—Ü–∏–∏?|—á—Ç–æ\s+–¥–µ–ª–∞—Ç—å?)[:.]?\s*([^.]*)/i);
  const tasks = tasksMatch ? tasksMatch[1].trim() : '–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã';

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Å–ª–æ–≤–∏—è
  const conditionsMatch = description.match(/(?:—É—Å–ª–æ–≤–∏—è?|—á—Ç–æ\s+–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º?|–º—ã\s+–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º?)[:.]?\s*([^.]*)/i);
  const conditions = conditionsMatch ? conditionsMatch[1].trim() : '–£—Å–ª–æ–≤–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã';

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ª—å–≥–æ—Ç—ã
  const benefitsMatch = description.match(/(?:–ª—å–≥–æ—Ç—ã?|–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞?|–±–æ–Ω—É—Å—ã?|–ø–ª—é—Å—ã?)[:.]?\s*([^.]*)/i);
  const benefits = benefitsMatch ? benefitsMatch[1].trim() : '–õ—å–≥–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã';

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
  const technologies = [];
  if (description.toLowerCase().includes('figma')) technologies.push('Figma');
  if (description.toLowerCase().includes('sketch')) technologies.push('Sketch');
  if (description.toLowerCase().includes('adobe')) technologies.push('Adobe Creative Suite');
  if (description.toLowerCase().includes('photoshop')) technologies.push('Photoshop');
  if (description.toLowerCase().includes('illustrator')) technologies.push('Illustrator');
  if (description.toLowerCase().includes('after effects')) technologies.push('After Effects');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞
  let experienceLevel = 'middle';
  if (description.toLowerCase().includes('junior') || description.toLowerCase().includes('–º–ª–∞–¥—à–∏–π')) {
    experienceLevel = 'junior';
  } else if (description.toLowerCase().includes('senior') || description.toLowerCase().includes('—Å—Ç–∞—Ä—à–∏–π')) {
    experienceLevel = 'senior';
  } else if (description.toLowerCase().includes('lead') || description.toLowerCase().includes('–≤–µ–¥—É—â–∏–π')) {
    experienceLevel = 'lead';
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
  let employmentType = 'full_time';
  if (description.toLowerCase().includes('—É–¥–∞–ª–µ–Ω–Ω') || description.toLowerCase().includes('remote')) {
    employmentType = 'remote';
  } else if (description.toLowerCase().includes('—á–∞—Å—Ç–∏—á–Ω') || description.toLowerCase().includes('part time')) {
    employmentType = 'part_time';
  } else if (description.toLowerCase().includes('–ø—Ä–æ–µ–∫—Ç') || description.toLowerCase().includes('project')) {
    employmentType = 'project';
  } else if (description.toLowerCase().includes('—Ñ—Ä–∏–ª–∞–Ω—Å') || description.toLowerCase().includes('freelance')) {
    employmentType = 'freelance';
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É
  const remoteWork = description.toLowerCase().includes('—É–¥–∞–ª–µ–Ω–Ω') || description.toLowerCase().includes('remote');

  return {
    fullDescription: description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
    requirements: requirements,
    tasks: tasks,
    conditions: conditions,
    benefits: benefits,
    technologies: technologies,
    experienceLevel: experienceLevel as 'junior' | 'middle' | 'senior' | 'lead',
    employmentType: employmentType as 'full_time' | 'part_time' | 'remote' | 'project' | 'freelance',
    remoteWork: remoteWork,
    salaryRange: undefined
  };
}

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SQLite
    const db = new SQLiteService();

    try {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      console.log('üìä –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
      const allSourcesVacancies = await parseAllVacancies('–¥–∏–∑–∞–π–Ω–µ—Ä', 20);
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${allSourcesVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤`);
      
      let rawVacancies = allSourcesVacancies;
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π Habr –ø–∞—Ä—Å–µ—Ä
      if (rawVacancies.length === 0) {
        console.log('‚ö†Ô∏è –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π Habr –ø–∞—Ä—Å–µ—Ä...');
        const enhancedParser = new EnhancedHabrParser();
        await enhancedParser.init();
        
        rawVacancies = await enhancedParser.parseDesignVacancies(3);
        await enhancedParser.close();
        
        console.log(`üìä –£–ª—É—á—à–µ–Ω–Ω—ã–π Habr –ø–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–ª ${rawVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–µ—Ä
      if (rawVacancies.length === 0) {
        console.log('‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞—à–µ–ª –≤–∞–∫–∞–Ω—Å–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–µ—Ä...');
        const fastVacancies = await parseFastDesignVacancies(5);
        console.log(`üìä –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–ª ${fastVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
        return NextResponse.json({
          success: true,
          message: `–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${fastVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ 0`,
          stats: {
            total: 0,
            pending: 0,
            approved: 0,
            sources: {}
          }
        });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º
      let savedCount = 0;
      for (const vacancy of rawVacancies) {
        try {
          // AI-–∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
          let structuredData = {
            fullDescription: vacancy.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
            requirements: '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
            tasks: '–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
            conditions: '–£—Å–ª–æ–≤–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
            benefits: '–õ—å–≥–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
            technologies: [],
            experienceLevel: 'middle' as const,
            employmentType: 'full_time' as const,
            remoteWork: false,
            salaryRange: undefined
          };

          try {
            // AI-–∞–Ω–∞–ª–∏–∑ —Å GigaChat (—Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç!)
            console.log(`ü§ñ AI-–∞–Ω–∞–ª–∏–∑ —Å GigaChat –¥–ª—è ${vacancy.title}`);
            structuredData = await analyzeVacancyWithGigaChat(vacancy.description || '');
            console.log(`‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ${vacancy.title}`);
          } catch (error) {
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è ${vacancy.title}: ${error.message}`);
            // Fallback –∫ —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
            console.log(`üß† –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —É–º–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è ${vacancy.title}`);
            structuredData = processVacancySmart(vacancy.description || '');
            console.log(`‚úÖ –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è ${vacancy.title}`);
          }

          const vacancyRecord = {
            external_id: vacancy.external_id,
            source: vacancy.source,
            url: vacancy.url,
            title: vacancy.title,
            company: vacancy.company,
            location: vacancy.location || '',
            description: vacancy.description,
            salary_min: vacancy.salary_min,
            salary_max: vacancy.salary_max,
            salary_currency: vacancy.salary_currency || 'RUB',
            published_at: vacancy.published_at || new Date().toISOString(),
            ai_specialization: 'design',
            ai_employment: [structuredData.employmentType],
            ai_experience: structuredData.experienceLevel,
            ai_technologies: structuredData.technologies,
            ai_salary_min: structuredData.salaryRange?.min,
            ai_salary_max: structuredData.salaryRange?.max,
            ai_remote: structuredData.remoteWork,
            ai_relevance_score: 0.8,
            ai_summary: '–í–∞–∫–∞–Ω—Å–∏—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞',
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º –¥—Ä–æ–±–ª–µ–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏
          full_description: vacancy.full_description || structuredData.fullDescription,
          requirements: '', // –£–±–∏—Ä–∞–µ–º –¥—Ä–æ–±–ª–µ–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏
          tasks: '',
          conditions: '',
          benefits: '',
            company_logo: vacancy.company_logo || '',
            company_url: vacancy.company_url || '',
            employment_type: vacancy.employment_type || structuredData.employmentType,
            experience_level: vacancy.experience_level || structuredData.experienceLevel,
            remote_type: vacancy.remote_type || (structuredData.remoteWork ? 'remote' : 'office')
          };

          // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          console.log(`üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è ${vacancy.title}:`);
          console.log(`  üìù –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${vacancyRecord.full_description ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'} (${vacancyRecord.full_description?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤)`);
          console.log(`  üìù –ò—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞: ${vacancy.full_description ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'} (${vacancy.full_description?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤)`);
          
          await db.saveVacancy(vacancyRecord);
          savedCount++;
          console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è: ${vacancy.title} (${vacancy.source})`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${vacancy.title}:`, error);
        }
      }

      console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount} –≤–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const allVacancies = await db.getAllVacancies();
      const pendingVacancies = await db.getPendingVacancies();
      const approvedVacancies = await db.getApprovedVacancies();

      return NextResponse.json({
        success: true,
        message: `–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${rawVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount}`,
        stats: {
          total: allVacancies.length,
          pending: pendingVacancies.length,
          approved: approvedVacancies.length,
          sources: rawVacancies.reduce((acc, v) => {
            acc[v.source] = (acc[v.source] || 0) + 1;
            return acc;
          }, {} as Record<string, number>)
        }
      });

    } finally {
      db.close();
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 }
    );
  }
}

