import { NextRequest, NextResponse } from 'next/server';
import { EnhancedHabrParser } from '@/lib/parsers/habr/enhanced-parser';

export async function GET(request: NextRequest) {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Habr –ø–∞—Ä—Å–µ—Ä–∞...');
  
  const parser = new EnhancedHabrParser();
  
  try {
    await parser.init();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –ª–∏–º–∏—Ç–æ–º 3 –≤–∞–∫–∞–Ω—Å–∏–∏
    console.log('\nüîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ 3 –≤–∞–∫–∞–Ω—Å–∏–π...');
    const vacancies = await parser.parseDesignVacancies(3);
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${vacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (vacancies.length > 0) {
      const first = vacancies[0];
      console.log('\nüìã –ü–µ—Ä–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è:');
      console.log(`  üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${first.title}`);
      console.log(`  üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${first.company}`);
      console.log(`  üìç –õ–æ–∫–∞—Ü–∏—è: ${first.location}`);
      console.log(`  üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${first.salary_min ? `${first.salary_min}-${first.salary_max} ${first.salary_currency}` : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      console.log(`  üìÑ URL: ${first.url}`);
      console.log(`  üìù –û–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): ${first.description.substring(0, 200)}...`);
      console.log(`  üìã –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${first.full_description ? first.full_description.substring(0, 200) + '...' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);
      console.log(`  üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${first.requirements ? first.requirements.substring(0, 100) + '...' : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}`);
      console.log(`  üìã –ó–∞–¥–∞—á–∏: ${first.tasks ? first.tasks.substring(0, 100) + '...' : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}`);
      console.log(`  üìã –õ—å–≥–æ—Ç—ã: ${first.benefits ? first.benefits.substring(0, 100) + '...' : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}`);
      console.log(`  üìã –£—Å–ª–æ–≤–∏—è: ${first.conditions ? first.conditions.substring(0, 100) + '...' : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}`);
    }
    
    await parser.close();
    
    return NextResponse.json({
      success: true,
      message: `–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${vacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`,
      vacancies: vacancies,
      stats: {
        total: vacancies.length,
        withFullDescription: vacancies.filter(v => v.full_description).length,
        withRequirements: vacancies.filter(v => v.requirements).length,
        withTasks: vacancies.filter(v => v.tasks).length,
        withBenefits: vacancies.filter(v => v.benefits).length,
        withConditions: vacancies.filter(v => v.conditions).length
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞:', error);
    
    await parser.close();
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}







