// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
import { NextRequest, NextResponse } from 'next/server';
import { parseAllVacancies } from '@/lib/parsers/unified-parser';
import { parseAllDesignVacancies } from '@/lib/parsers/enhanced-parser';
import { EnhancedHabrParser } from '@/lib/parsers/habr/enhanced-parser';

export async function GET(request: NextRequest) {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');
  
  try {
    const results = {
      unifiedParser: { success: false, count: 0, error: null },
      enhancedParser: { success: false, count: 0, error: null },
      habrParser: { success: false, count: 0, error: null }
    };
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º unified parser
    try {
      console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º unified parser...');
      const unifiedVacancies = await parseAllVacancies('–¥–∏–∑–∞–π–Ω–µ—Ä', 10);
      results.unifiedParser = { success: true, count: unifiedVacancies.length, error: null };
      console.log(`‚úÖ Unified parser: ${unifiedVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    } catch (error: any) {
      results.unifiedParser = { success: false, count: 0, error: error.message };
      console.log(`‚ùå Unified parser: ${error.message}`);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º enhanced parser
    try {
      console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º enhanced parser...');
      const enhancedVacancies = await parseAllDesignVacancies(5);
      results.enhancedParser = { success: true, count: enhancedVacancies.length, error: null };
      console.log(`‚úÖ Enhanced parser: ${enhancedVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    } catch (error: any) {
      results.enhancedParser = { success: false, count: 0, error: error.message };
      console.log(`‚ùå Enhanced parser: ${error.message}`);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º Habr parser
    try {
      console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Habr parser...');
      const habrParser = new EnhancedHabrParser();
      await habrParser.init();
      const habrVacancies = await habrParser.parseDesignVacancies(3);
      await habrParser.close();
      results.habrParser = { success: true, count: habrVacancies.length, error: null };
      console.log(`‚úÖ Habr parser: ${habrVacancies.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    } catch (error: any) {
      results.habrParser = { success: false, count: 0, error: error.message };
      console.log(`‚ùå Habr parser: ${error.message}`);
    }
    
    return NextResponse.json({
      success: true,
      message: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
      results
    });
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
    return NextResponse.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤',
      error: error.message
    }, { status: 500 });
  }
}







