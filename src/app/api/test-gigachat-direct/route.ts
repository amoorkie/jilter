// –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç GigaChat API
import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  try {
    console.log('üß™ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç GigaChat API...');
    
    const authKey = process.env.GIGACHAT_AUTHORIZATION_KEY;
    console.log('üîë –ö–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authKey ? '–£–°–¢–ê–ù–û–í–õ–ï–ù' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
    
    if (!authKey) {
      return NextResponse.json({
        success: false,
        error: 'GIGACHAT_AUTHORIZATION_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
      });
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º RqUID
    const rqUID = crypto.randomUUID();
    console.log('üÜî RqUID:', rqUID);
    
    // URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    const authUrl = 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth';
    
    console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫:', authUrl);
    console.log('üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏:', {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Accept': 'application/json',
      'RqUID': rqUID,
      'Authorization': `Basic ${authKey.substring(0, 20)}...`
    });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º https –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å SSL
    const https = require('https');
    const url = require('url');
    
    const response = await new Promise((resolve, reject) => {
      const urlObj = new URL(authUrl);
      const requestOptions = {
        hostname: urlObj.hostname,
        port: urlObj.port || 443,
        path: urlObj.pathname + urlObj.search,
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Accept': 'application/json',
          'RqUID': rqUID,
          'Authorization': `Basic ${authKey}`,
        },
        rejectUnauthorized: false // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
      };

      const req = https.request(requestOptions, (res) => {
        let data = '';
        res.on('data', (chunk) => {
          data += chunk;
        });
        res.on('end', () => {
          resolve({
            ok: res.statusCode >= 200 && res.statusCode < 300,
            status: res.statusCode,
            statusText: res.statusMessage,
            text: () => Promise.resolve(data),
            json: () => Promise.resolve(JSON.parse(data))
          });
        });
      });

      req.on('error', (error) => {
        reject(error);
      });

      req.write('scope=GIGACHAT_API_PERS');
      req.end();
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üìä –°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç:', response.statusText);
    
    const responseText = await response.text();
    console.log('üìù –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:', responseText);
    
    if (!response.ok) {
      return NextResponse.json({
        success: false,
        error: `–û—à–∏–±–∫–∞ API: ${response.status} ${response.statusText}`,
        details: responseText,
        request: {
          url: authUrl,
          rqUID: rqUID,
          authKeyLength: authKey.length
        }
      });
    }
    
    let responseData;
    try {
      responseData = JSON.parse(responseText);
    } catch (parseError) {
      return NextResponse.json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞',
        rawResponse: responseText
      });
    }
    
    return NextResponse.json({
      success: true,
      message: 'GigaChat API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
      token: responseData.access_token ? '–ü–û–õ–£–ß–ï–ù' : '–ù–ï –ü–û–õ–£–ß–ï–ù',
      expiresAt: responseData.expires_at,
      fullResponse: responseData
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∞ GigaChat:', error);
    return NextResponse.json({
      success: false,
      error: error.message,
      stack: error.stack
    });
  }
}
