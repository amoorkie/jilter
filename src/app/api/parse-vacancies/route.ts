// src/app/api/parse-vacancies/route.ts
import { parseAllVacancies } from '@/lib/parsers/unified-parser';
import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  console.log('üåê API route /api/parse-vacancies –≤—ã–∑–≤–∞–Ω');
  
  try {
    const { searchParams } = new URL(request.url);
    const query = searchParams.get('query') || 'javascript';
    const salary = searchParams.get('salary') === 'true';
    const maxVacancies = parseInt(searchParams.get('maxVacancies') || '200');

    console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã API route:', { query, salary, maxVacancies });
    console.log('üîó –ü–æ–ª–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å–∞:', request.url);

    console.log('üöÄ –í—ã–∑—ã–≤–∞–µ–º parseAllVacancies...');
    const vacancies = await parseAllVacancies(query, maxVacancies);
    
    console.log('üìä parseVacancies –≤–µ—Ä–Ω—É–ª–∞:', {
      count: vacancies.length,
      firstVacancy: vacancies[0] ? {
        id: vacancies[0].id,
        title: vacancies[0].title,
        company: vacancies[0].company
      } : null
    });
    
    const response = NextResponse.json({ vacancies });
    console.log('‚úÖ API route –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å', vacancies.length, '–≤–∞–∫–∞–Ω—Å–∏—è–º–∏');
    
    return response;
  } catch (error) {
    console.error('üí• API Error:', error);
    console.error('üí• –°—Ç–µ–∫ –æ—à–∏–±–∫–∏ API:', error instanceof Error ? error.stack : '–ù–µ—Ç —Å—Ç–µ–∫–∞');
    
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–∞–∫–∞–Ω—Å–∏–π',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}


