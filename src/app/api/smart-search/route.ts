// src/app/api/smart-search/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { enhancedParser, SmartSearchResult } from '@/lib/ai/enhanced-parser';
import { analyzeSearchQuery } from '@/lib/ai/gemini-service';
import { Employment, Specialization } from '@/lib/types/employment';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const {
      query,
      filters = {},
      rawVacancies = []
    } = body;

    console.log('üß† –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω:', { query, filters });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ AI-–∞–Ω–∞–ª–∏–∑
    const aiEnabled = process.env.GOOGLE_AI_API_KEY && process.env.GOOGLE_AI_API_KEY !== '';
    
    if (!aiEnabled) {
      return NextResponse.json({
        error: 'AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GOOGLE_AI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.',
        aiEnabled: false
      }, { status: 400 });
    }

    // –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º
    const smartSearchResult: SmartSearchResult = await enhancedParser.smartSearch(
      query,
      rawVacancies,
      {
        specialization: filters.specialization,
        employment: filters.employment,
        experience: filters.experience,
        technologies: filters.technologies,
        minSalary: filters.minSalary,
        maxSalary: filters.maxSalary,
        remote: filters.remote
      }
    );

    console.log(`‚úÖ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ ${smartSearchResult.total} –≤–∞–∫–∞–Ω—Å–∏–π`);

    return NextResponse.json({
      success: true,
      aiEnabled: true,
      ...smartSearchResult
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const query = searchParams.get('q') || '';
    
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', query);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ AI-–∞–Ω–∞–ª–∏–∑
    const aiEnabled = process.env.GOOGLE_AI_API_KEY && process.env.GOOGLE_AI_API_KEY !== '';
    
    if (!aiEnabled) {
      return NextResponse.json({
        error: 'AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GOOGLE_AI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.',
        aiEnabled: false
      }, { status: 400 });
    }

    // –ê–Ω–∞–ª–∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const queryAnalysis = await analyzeSearchQuery(query);

    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω:', queryAnalysis);

    return NextResponse.json({
      success: true,
      aiEnabled: true,
      queryAnalysis
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}



