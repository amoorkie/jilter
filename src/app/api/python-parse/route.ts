import { NextRequest, NextResponse } from 'next/server';
import { exec } from 'child_process';
import { promisify } from 'util';
import path from 'path';

const execAsync = promisify(exec);

export async function POST(req: NextRequest) {
  try {
    console.log('üêç –ó–∞–ø—É—Å–∫ Python –ø–∞—Ä—Å–µ—Ä–æ–≤...');
    
    const body = await req.json().catch(() => ({}));
    const {
      query = '–¥–∏–∑–∞–π–Ω–µ—Ä',
      pages = 3,
      sources = ['hh', 'habr', 'getmatch', 'geekjob'],
      verbose = false
    } = body;
    
    // –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –∑–∞–ø—É—Å–∫–∞ Python –ø–∞—Ä—Å–µ—Ä–æ–≤
    const scriptPath = path.join(process.cwd(), 'run_all_parsers.py');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    let command = `python "${scriptPath}" --query "${query}" --pages ${pages}`;
    
    if (sources && sources.length > 0) {
      command += ` --sources ${sources.join(' ')}`;
    }
    
    if (verbose) {
      command += ' --verbose';
    }
    
    console.log(`üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: ${command}`);
    
    const startTime = Date.now();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º Python –ø–∞—Ä—Å–µ—Ä (—Ñ–æ—Ä—Å–∏—Ä—É–µ–º UTF-8 –∏, –Ω–∞ Windows, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–æ–¥–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    const wrappedCommand = process.platform === 'win32' 
      ? `chcp 65001>nul && ${command}` 
      : command;

    const { stdout, stderr } = await execAsync(wrappedCommand, {
      cwd: process.cwd(),
      timeout: 300000, // 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
      maxBuffer: 1024 * 1024 * 10, // 10MB –±—É—Ñ–µ—Ä
      env: { ...process.env, PYTHONIOENCODING: 'utf-8' }
    });
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    
    console.log('‚úÖ Python –ø–∞—Ä—Å–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
    
    // –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let stats = {
      total_found: 0,
      total_saved: 0,
      by_source: {},
      duration: duration
    };
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –º–∞—à–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É STATS:{...}
      const jsonLine = stdout.split('\n').find(l => l.startsWith('STATS:'));
      if (jsonLine) {
        const jsonText = jsonLine.replace('STATS:', '').trim();
        const parsed = JSON.parse(jsonText);
        stats.total_found = parsed.total_found ?? 0;
        stats.total_saved = parsed.total_saved ?? 0;
        stats.by_source = parsed.by_source ?? {};
      } else {
        // –§–æ–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        const lines = stdout.split('\n');
        let inResults = false;
        for (const line of lines) {
          if (line.includes('–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê')) { inResults = true; continue; }
          if (!inResults) continue;
          if (line.includes('–ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π:')) {
            const m = line.match(/–ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π:\s*(\d+)/); if (m) stats.total_found = parseInt(m[1]);
          }
          if (line.includes('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:')) {
            const m = line.match(/–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:\s*(\d+)/); if (m) stats.total_saved = parseInt(m[1]);
          }
          const m2 = line.match(/^\s*(\w+)\s*:\s*–Ω–∞–π–¥–µ–Ω–æ\s*(\d+),\s*—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\s*(\d+)/);
          if (m2) {
            const [, source, found, saved] = m2;
            (stats.by_source as any)[source] = { found: parseInt(found), saved: parseInt(saved) };
          }
        }
      }
    } catch (parseError) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', parseError);
    }
    
    return NextResponse.json({
      success: true,
      message: `Python –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration.toFixed(2)} —Å–µ–∫—É–Ω–¥`,
      stats,
      output: stdout,
      errors: stderr || null
    });
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Python –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
    
    let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    let errorDetails = '';
    
    if (error.code === 'ENOENT') {
      errorMessage = 'Python –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ';
      errorDetails = '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Python —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH';
    } else if (error.killed) {
      errorMessage = '–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É';
      errorDetails = '–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (5 –º–∏–Ω—É—Ç)';
    } else if (error.stderr) {
      errorMessage = '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python —Å–∫—Ä–∏–ø—Ç–∞';
      errorDetails = error.stderr;
    } else {
      errorMessage = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    }
    
    return NextResponse.json({
      success: false,
      error: errorMessage,
      details: errorDetails,
      output: error.stdout || null
    }, { status: 500 });
  }
}

export async function GET(req: NextRequest) {
  return NextResponse.json({
    message: 'Python Parser API',
    version: '1.0.0',
    endpoints: {
      'POST /api/python-parse': '–ó–∞–ø—É—Å–∫ Python –ø–∞—Ä—Å–µ—Ä–æ–≤',
    },
    parameters: {
      query: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –¥–∏–∑–∞–π–Ω–µ—Ä)',
      pages: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)',
      sources: '–ú–∞—Å—Å–∏–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: hh, hirehi, habr, getmatch, geekjob',
      verbose: '–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: false)'
    },
    example: {
      query: 'UI –¥–∏–∑–∞–π–Ω–µ—Ä',
      pages: 5,
      sources: ['hh', 'habr', 'geekjob'],
      verbose: true
    }
  });
}








