// src/app/api/user-filters/route.ts
import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId') || 'anonymous';

    console.log('üîç API /api/user-filters GET –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, —Ç–∞–∫ –∫–∞–∫ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    const userFilters = {
      enabledTokens: [],
      disabledTokens: [],
      customFilters: []
    };

    return NextResponse.json(userFilters);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API /api/user-filters:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { userId, tokenId, action } = body;

    console.log('üîç API /api/user-filters POST –≤—ã–∑–≤–∞–Ω:', { userId, tokenId, action });

    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç, —Ç–∞–∫ –∫–∞–∫ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    return NextResponse.json({ success: true });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API /api/user-filters POST:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
      { status: 500 }
    );
  }
}