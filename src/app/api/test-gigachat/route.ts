// API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GigaChat
import { NextRequest, NextResponse } from 'next/server';
import { GigaChatService } from '@/lib/ai/gigachat-service';

export async function GET(request: NextRequest) {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º GigaChat API...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const authKey = process.env.GIGACHAT_AUTHORIZATION_KEY;
    console.log('üîç GIGACHAT_AUTHORIZATION_KEY:', authKey ? '–£–°–¢–ê–ù–û–í–õ–ï–ù' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
    console.log('üìù –î–ª–∏–Ω–∞ –∫–ª—é—á–∞:', authKey?.length || 0);
    console.log('üìù –ü–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤:', authKey?.substring(0, 20) + '...' || '–ù–ï–¢');
    
    if (!authKey) {
      return NextResponse.json({
        success: false,
        error: 'GIGACHAT_AUTHORIZATION_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        env: {
          NODE_ENV: process.env.NODE_ENV,
          hasAuthKey: !!authKey,
          keyLength: authKey?.length || 0
        }
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    const service = new GigaChatService();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
    const testText = '–¢—Ä–µ–±—É–µ—Ç—Å—è UI/UX –¥–∏–∑–∞–π–Ω–µ—Ä. –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –æ–ø—ã—Ç 2 –≥–æ–¥–∞.';
    console.log('üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:', testText);
    
    console.log('üîÑ –í—ã–∑—ã–≤–∞–µ–º analyzeVacancy...');
    const result = await service.analyzeVacancy(testText);
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç analyzeVacancy:', result);
    
    return NextResponse.json({
      success: true,
      message: 'GigaChat —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω',
      result: result,
      env: {
        hasAuthKey: !!authKey,
        keyLength: authKey.length,
        keyPrefix: authKey.substring(0, 20) + '...'
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GigaChat:', error);
    return NextResponse.json({
      success: false,
      error: error.message,
      stack: error.stack
    });
  }
}
