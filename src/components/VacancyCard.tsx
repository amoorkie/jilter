import React from 'react';

import { Vacancy as BaseVacancy } from '@/lib/parsers/unified-parser';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø Vacancy —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –∏–∑ API
interface Vacancy extends BaseVacancy {
  publishedAt: string;
  score: number;
  matchedTokens: any[];
  reasons: string[];
  aiAnalysis: {
    specialization: string;
    employment: string[];
    experience: string;
    technologies: string[];
    remote: boolean;
    requirements: string[];
    benefits: string[];
    summary: string;
  };
}

interface VacancyCardProps {
  vacancy: Vacancy;
  index: number;
  onReaction: (vacancyId: string, reaction: 'like' | 'dislike' | 'save') => void;
  animations: Record<string, string>;
}

export const VacancyCard: React.FC<VacancyCardProps> = ({ 
  vacancy, 
  index, 
  onReaction, 
  animations
}) => {

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç –¥—É–±–ª–µ–π
  const cleanCompanyName = (company: string): string => {
    let cleaned = company;
    
    // –£–±–∏—Ä–∞–µ–º HTML entities –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
    cleaned = cleaned.replace(/&nbsp;/g, ' ').replace(/\s+/g, ' ').trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ—á–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    const companyLength = cleaned.length;
    if (companyLength > 10) {
      const halfLength = Math.floor(companyLength / 2);
      const firstHalf = cleaned.substring(0, halfLength);
      const secondHalf = cleaned.substring(halfLength);
      
      // –ï—Å–ª–∏ –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –¢–û–ß–ù–û –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–µ—Ä–≤—É—é
      if (firstHalf === secondHalf && firstHalf.length > 5) {
        cleaned = firstHalf;
      }
    }
    
    return cleaned;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∞–∫—Ü–∏–π
  const handleReaction = (reaction: 'like' | 'dislike' | 'save') => (event: React.MouseEvent) => {
    event.stopPropagation();
    event.preventDefault();
    onReaction(vacancy.id, reaction);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
  const handleCardClick = () => {
    window.open(vacancy.url, '_blank');
  };

  return (
    <div 
      className="bg-white rounded-3xl p-4 hover:shadow-lg transition-shadow h-80 flex flex-col cursor-pointer"
      onClick={handleCardClick}
      style={{
        animation: animations[vacancy.id] || 'none'
      }}
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π –∏ –¥–∞—Ç–æ–π */}
      <div className="flex items-start justify-between mb-3">
        <div className="flex items-center space-x-3">
          <div className="flex-1">
            <p 
              className="text-sm text-gray-600"
              style={{
                overflow: 'hidden', 
                textOverflow: 'ellipsis', 
                whiteSpace: 'nowrap',
                maxWidth: '200px'
              }}
            >
              {cleanCompanyName(vacancy.company)}
            </p>
            <p className="text-xs text-gray-500">
              {new Date().toLocaleDateString()}
            </p>
          </div>
        </div>
      </div>

        {/* –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ */}
        <h3 className="text-sm font-semibold text-gray-900 mb-2" style={{ fontSize: '14px', lineHeight: '120%' }}>
          {vacancy.title}
        </h3>

        {/* –ó–∞—Ä–ø–ª–∞—Ç–∞ */}
        <div className="mb-4">
          <p className="text-lg font-semibold text-gray-900" style={{ fontSize: '16px' }}>
            {typeof vacancy.salary === 'string' 
              ? vacancy.salary 
              : vacancy.salary?.min 
                ? `${vacancy.salary.min.toLocaleString()} - ${vacancy.salary.max?.toLocaleString() || ''} ${vacancy.salary.currency || 'RUB'}`
                : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            }
          </p>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ —Ä–µ–∞–∫—Ü–∏–π */}
        <div className="mt-auto">
          <div className="flex justify-center space-x-2">
            <button
              onClick={handleReaction('like')}
              className="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm hover:bg-gray-200 transition-colors"
            >
              üëç –ü–æ–¥—Ö–æ–¥–∏—Ç
            </button>
            
            <button
              onClick={handleReaction('dislike')}
              className="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm hover:bg-gray-200 transition-colors"
            >
              üëé –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
            </button>
            
            <button
              onClick={handleReaction('save')}
              className="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm hover:bg-gray-200 transition-colors"
            >
              üîñ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ */}
        {vacancy.aiAnalysis?.employment && vacancy.aiAnalysis.employment.length > 0 && (
          <div className="mt-3">
            <div className="flex flex-wrap gap-1">
              {vacancy.aiAnalysis.employment.map((emp, empIndex) => (
                <span 
                  key={empIndex}
                  className="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded"
                >
                  {emp === 'full_time' ? '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å' :
                   emp === 'part_time' ? '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å' :
                   emp === 'remote' ? '–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞' :
                   emp === 'project' ? '–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞' :
                   emp === 'contract' ? '–ö–æ–Ω—Ç—Ä–∞–∫—Ç' :
                   emp === 'internship' ? '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞' :
                   emp === 'temporary' ? '–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞' :
                   emp === 'freelance' ? '–§—Ä–∏–ª–∞–Ω—Å' : emp}
                </span>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};
