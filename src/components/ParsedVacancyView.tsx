// src/components/ParsedVacancyView.tsx
import React from 'react';
import { parseAndFormatVacancyText } from '@/lib/text-parser';

interface Vacancy {
  full_description?: string;
  requirements?: string;
  tasks?: string;
  conditions?: string;
  benefits?: string;
  description?: string;
}

interface ParsedVacancyViewProps {
  vacancy?: Vacancy;
  text?: string;
}

const ParsedVacancyView: React.FC<ParsedVacancyViewProps> = ({ vacancy, text }) => {
  console.log("DEBUG: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ParsedVacancyView –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ:", { vacancy, text });
  
  let fullText = '';
  
  if (text) {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä—è–º–æ–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    fullText = text;
  } else if (vacancy) {
    // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π
    fullText = [
      vacancy.full_description,
      vacancy.description,
      vacancy.requirements && `–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n${vacancy.requirements}`,
      vacancy.tasks && `–ó–∞–¥–∞—á–∏:\n${vacancy.tasks}`,
      vacancy.conditions && `–£—Å–ª–æ–≤–∏—è:\n${vacancy.conditions}`,
      vacancy.benefits && `–õ—å–≥–æ—Ç—ã:\n${vacancy.benefits}`
    ].filter(Boolean).join('\n\n');
  }

  console.log("DEBUG: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:", fullText);
  const parsed = parseAndFormatVacancyText(fullText);
  console.log("DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ:", parsed);

  return (
    <div className="space-y-6">
      {/* –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ */}
      {parsed.full_description && (
        <div className="bg-white p-4 rounded-lg shadow-sm border">
          <h3 className="text-lg font-semibold mb-3 text-gray-800 border-b pb-2">
            –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
          </h3>
          <div 
            className="prose max-w-none text-gray-700"
            dangerouslySetInnerHTML={{ __html: parsed.full_description }} 
          />
        </div>
      )}

      {/* –°–µ–∫—Ü–∏–∏ */}
      {parsed.sections.map((section, index) => (
        <div key={index} className="bg-white p-4 rounded-lg shadow-sm border">
          <h3 className="text-lg font-semibold mb-3 text-gray-800 border-b pb-2">
            {section.title}
          </h3>
          <div 
            className="prose max-w-none text-gray-700"
            dangerouslySetInnerHTML={{ __html: section.content }} 
          />
        </div>
      ))}

      {/* –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–ª—è */}
      {!parsed.full_description && parsed.sections.length === 0 && vacancy && (
        <div className="space-y-4">
          {vacancy.full_description && (
            <div className="bg-white p-4 rounded-lg shadow-sm border">
              <h3 className="text-lg font-semibold mb-3 text-gray-800">–û–ø–∏—Å–∞–Ω–∏–µ</h3>
              <div className="text-gray-700 whitespace-pre-wrap">
                {vacancy.full_description}
              </div>
            </div>
          )}
          
          {vacancy.requirements && (
            <div className="bg-white p-4 rounded-lg shadow-sm border">
              <h3 className="text-lg font-semibold mb-3 text-gray-800">üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</h3>
              <div className="text-gray-700 whitespace-pre-wrap">
                {vacancy.requirements}
              </div>
            </div>
          )}
          
          {vacancy.tasks && (
            <div className="bg-white p-4 rounded-lg shadow-sm border">
              <h3 className="text-lg font-semibold mb-3 text-gray-800">‚úÖ –ó–∞–¥–∞—á–∏</h3>
              <div className="text-gray-700 whitespace-pre-wrap">
                {vacancy.tasks}
              </div>
            </div>
          )}
          
          {vacancy.conditions && (
            <div className="bg-white p-4 rounded-lg shadow-sm border">
              <h3 className="text-lg font-semibold mb-3 text-gray-800">üí∞ –£—Å–ª–æ–≤–∏—è</h3>
              <div className="text-gray-700 whitespace-pre-wrap">
                {vacancy.conditions}
              </div>
            </div>
          )}
          
          {vacancy.benefits && (
            <div className="bg-white p-4 rounded-lg shadow-sm border">
              <h3 className="text-lg font-semibold mb-3 text-gray-800">‚≠ê –õ—å–≥–æ—Ç—ã</h3>
              <div className="text-gray-700 whitespace-pre-wrap">
                {vacancy.benefits}
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ParsedVacancyView;

