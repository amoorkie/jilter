#!/usr/bin/env node
/**
 * –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Geekjob –ø–∞—Ä—Å–µ—Ä–∞ –±–µ–∑ TypeScript
 */

const axios = require('axios');
const cheerio = require('cheerio');

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
const DESIGN_KEYWORDS = [
  '–¥–∏–∑–∞–π–Ω', '–¥–∏–∑–∞–π–Ω–µ—Ä', 'ui/ux', 'ux/ui', '–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω',
  '–≤–µ–±-–¥–∏–∑–∞–π–Ω', '–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω', '–≤–∏–∑—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω',
  'ui-–¥–∏–∑–∞–π–Ω–µ—Ä', 'ux-–¥–∏–∑–∞–π–Ω–µ—Ä', '–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä',
  'designer', 'ui designer', 'ux designer', 'product designer'
];

function isRelevantVacancy(title, description = '') {
  const text = `${title} ${description}`.toLowerCase();
  return DESIGN_KEYWORDS.some(keyword => text.includes(keyword.toLowerCase()));
}

async function parseGeekjobPage(query, page) {
  const url = `https://geekjob.ru/vacancies?q=${encodeURIComponent(query)}&page=${page}`;
  
  try {
    console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}: ${url}`);
    
    const response = await axios.get(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3'
      },
      timeout: 30000
    });
    
    const $ = cheerio.load(response.data);
    
    // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
    const vacancyLinks = $('a[href*="/vacancy/"]');
    console.log(`   –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: ${vacancyLinks.length}`);
    
    if (vacancyLinks.length === 0) {
      console.log(`   ‚ö†Ô∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏`);
      return [];
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ ID –≤–∞–∫–∞–Ω—Å–∏–∏
    const vacanciesData = new Map();
    
    vacancyLinks.each((index, element) => {
      try {
        const $el = $(element);
        const href = $el.attr('href') || '';
        const text = $el.text().trim();
        
        if (!href || !text) return;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–∞–∫–∞–Ω—Å–∏–∏
        const vacancyId = href.split('/vacancy/')[1]?.split('?')[0]?.split('/')[0];
        if (!vacancyId) return;
        
        const fullUrl = href.startsWith('http') ? href : `https://geekjob.ru${href}`;
        
        if (!vacanciesData.has(vacancyId)) {
          vacanciesData.set(vacancyId, {
            id: `geekjob-nodejs-${vacancyId}`,
            url: fullUrl,
            title: '',
            company: '',
            salary: '',
            location: '',
            description: ''
          });
        }
        
        const vacancy = vacanciesData.get(vacancyId);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if (text.includes('‚ÇΩ') || text.includes('‚Ç¨') || text.includes('$') || text.includes('—Ä—É–±')) {
          vacancy.salary = text;
        } else if (text.length > 50) {
          if (!vacancy.title) {
            vacancy.title = text;
          } else if (!vacancy.description) {
            vacancy.description = text;
          }
        } else if (text.length < 50 && !text.includes('‚ÇΩ') && !text.includes('‚Ç¨') && !text.includes('$')) {
          if (!vacancy.company) {
            vacancy.company = text;
          }
        } else if (text.includes('–ú–æ—Å–∫–≤–∞') || text.includes('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥') || text.includes('remote')) {
          vacancy.location = text;
        }
        
      } catch (error) {
        console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏: ${error.message}`);
      }
    });
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    const relevantVacancies = [];
    vacanciesData.forEach((vacancy, vacancyId) => {
      if (vacancy.title && isRelevantVacancy(vacancy.title, vacancy.description)) {
        relevantVacancies.push(vacancy);
        console.log(`   ‚úÖ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è: ${vacancy.title}`);
      } else {
        console.log(`   ‚ùå –ù–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è: ${vacancy.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
      }
    });
    
    return relevantVacancies;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}:`, error.message);
    return [];
  }
}

async function testNodeJSParser() {
  console.log('=== –¢–ï–°–¢ NODE.JS –ü–ê–†–°–ï–†–ê (–ü–†–Ø–ú–û–ô) ===');
  
  const startTime = Date.now();
  const query = '–¥–∏–∑–∞–π–Ω–µ—Ä';
  const pages = 2;
  
  console.log(`–ó–∞–ø—Ä–æ—Å: "${query}", —Å—Ç—Ä–∞–Ω–∏—Ü: ${pages}`);
  
  try {
    const allVacancies = [];
    
    for (let page = 1; page <= pages; page++) {
      const pageVacancies = await parseGeekjobPage(query, page);
      allVacancies.push(...pageVacancies);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
      if (page < pages) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Node.js –ø–∞—Ä—Å–µ—Ä–∞:`);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: ${allVacancies.length}`);
    console.log(`   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
    
    if (allVacancies.length > 0) {
      console.log(`\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:`);
      allVacancies.forEach((vacancy, index) => {
        console.log(`${index + 1}. ${vacancy.title}`);
        console.log(`   –ö–æ–º–ø–∞–Ω–∏—è: ${vacancy.company}`);
        console.log(`   –ó–∞—Ä–ø–ª–∞—Ç–∞: ${vacancy.salary}`);
        console.log(`   –õ–æ–∫–∞—Ü–∏—è: ${vacancy.location}`);
        console.log(`   URL: ${vacancy.url}`);
        console.log('');
      });
    } else {
      console.log('‚ö†Ô∏è –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    return allVacancies;
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
    return [];
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testNodeJSParser().catch(console.error);











