#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞ –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

from bs4 import BeautifulSoup
import requests
import time

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
try:
    from text_formatter import extract_formatted_text as original_extract, extract_structured_sections as original_sections
    from text_formatter_v1 import extract_simple_text as v1_extract
    from text_formatter_v2 import extract_content_without_headers as v2_extract
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)


def test_vacancy_parsing():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ —Å Habr
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–π")
    print("="*80)
    
    # URL —Ç–µ—Å—Ç–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ —Å Habr
    test_url = "https://career.habr.com/vacancies/1000123456"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        print(f"üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é —Å Habr...")
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        response = requests.get(test_url, headers=headers, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        description_selectors = [
            '.vacancy-description',
            '.basic-section--appearance-vacancy-description',
            '.vacancy-section',
            '.job-description'
        ]
        
        description_element = None
        for selector in description_selectors:
            element = soup.select_one(selector)
            if element:
                description_element = element
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: {selector}")
                break
        
        if not description_element:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
            return
        
        print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
        print("-" * 80)
        
        # –¢–µ—Å—Ç 1: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (—Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ –±–ª–æ–∫–∏)
        print("\nüîµ –ü–û–î–•–û–î 1: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π (—Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ –±–ª–æ–∫–∏)")
        print("-" * 40)
        try:
            original_text = original_extract(description_element)
            original_sections = original_sections(original_text)
            
            print(f"üìä –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(original_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏: {list(original_sections.keys())}")
            print(f"üìù –ü—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(original_text[:200] + "..." if len(original_text) > 200 else original_text)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ: {e}")
        
        # –¢–µ—Å—Ç 2: –í–∞—Ä–∏–∞–Ω—Ç 1 (–≤–µ—Å—å —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–±–∏–µ–Ω–∏—è)
        print("\nüü¢ –ü–û–î–•–û–î 2: –í–µ—Å—å —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–±–∏–µ–Ω–∏—è")
        print("-" * 40)
        try:
            v1_text = v1_extract(description_element)
            
            print(f"üìä –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(v1_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìù –ü—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(v1_text[:200] + "..." if len(v1_text) > 200 else v1_text)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–∞—Ä–∏–∞–Ω—Ç–µ 1: {e}")
        
        # –¢–µ—Å—Ç 3: –í–∞—Ä–∏–∞–Ω—Ç 2 (—Ç–æ–ª—å–∫–æ –∞–±–∑–∞—Ü—ã –∏ —Å–ø–∏—Å–∫–∏)
        print("\nüü° –ü–û–î–•–û–î 3: –¢–æ–ª—å–∫–æ –∞–±–∑–∞—Ü—ã –∏ —Å–ø–∏—Å–∫–∏ (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)")
        print("-" * 40)
        try:
            v2_text = v2_extract(description_element)
            
            print(f"üìä –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(v2_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìù –ü—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(v2_text[:200] + "..." if len(v2_text) > 200 else v2_text)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–∞—Ä–∏–∞–Ω—Ç–µ 2: {e}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("="*80)
        
        approaches = [
            ("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π", original_text if 'original_text' in locals() else ""),
            ("–í–∞—Ä–∏–∞–Ω—Ç 1 (–≤–µ—Å—å —Ç–µ–∫—Å—Ç)", v1_text if 'v1_text' in locals() else ""),
            ("–í–∞—Ä–∏–∞–Ω—Ç 2 (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)", v2_text if 'v2_text' in locals() else "")
        ]
        
        for name, text in approaches:
            if text:
                lines = text.count('\n')
                words = len(text.split())
                chars = len(text)
                print(f"{name:25}: {chars:4} —Å–∏–º–≤–æ–ª–æ–≤, {words:3} —Å–ª–æ–≤, {lines:2} —Å—Ç—Ä–æ–∫")
            else:
                print(f"{name:25}: –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è")
        
        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("-" * 40)
        
        if 'v1_text' in locals() and v1_text:
            print("‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 1 (–≤–µ—Å—å —Ç–µ–∫—Å—Ç) - –ø–æ–¥—Ö–æ–¥–∏—Ç –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        if 'v2_text' in locals() and v2_text:
            print("‚úÖ –í–∞—Ä–∏–∞–Ω—Ç 2 (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤) - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
        if 'original_text' in locals() and original_text:
            print("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –ø–æ–¥—Ö–æ–¥–∏—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è")
        
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å test_url –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –≤–∞–∫–∞–Ω—Å–∏–∏")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


def test_with_sample_html():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä–∏–º–µ—Ä–æ–º HTML
    """
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º HTML")
    print("="*80)
    
    sample_html = """
    <div class="vacancy-description">
        <h3>–ù–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É:</h3>
        <ul>
            <li>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –¥–∏–∑–∞–π–Ω–µ –æ—Ç 2 –ª–µ—Ç</li>
            <li>–ó–Ω–∞–Ω–∏–µ Figma, Adobe Creative Suite</li>
            <li>–ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ UX/UI</li>
        </ul>
        
        <h3>–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:</h3>
        <p>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, –¥—Ä—É–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞.</p>
        <ul>
            <li>–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞</li>
            <li>–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫</li>
            <li>–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞</li>
        </ul>
        
        <h3>–ó–∞–¥–∞—á–∏:</h3>
        <p>–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, —Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, —É—á–∞—Å—Ç–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.</p>
    </div>
    """
    
    soup = BeautifulSoup(sample_html, 'html.parser')
    description_element = soup.select_one('.vacancy-description')
    
    if not description_element:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
        return
    
    print("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä–∏–º–µ—Ä–æ–º HTML...")
    print("-" * 40)
    
    # –¢–µ—Å—Ç –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥–æ–≤
    approaches = [
        ("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π", original_extract, original_sections),
        ("–í–∞—Ä–∏–∞–Ω—Ç 1 (–≤–µ—Å—å —Ç–µ–∫—Å—Ç)", v1_extract, None),
        ("–í–∞—Ä–∏–∞–Ω—Ç 2 (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)", v2_extract, None)
    ]
    
    for name, extract_func, sections_func in approaches:
        print(f"\nüîµ {name}")
        print("-" * 30)
        try:
            text = extract_func(description_element)
            print(f"üìä –î–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(text)
            
            if sections_func:
                sections = sections_func(text)
                print(f"üìã –°–µ–∫—Ü–∏–∏: {sections}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞")
    
    # –¢–µ—Å—Ç —Å –ø—Ä–∏–º–µ—Ä–æ–º HTML
    test_with_sample_html()
    
    # –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–µ–π (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π URL)
    # test_vacancy_parsing()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")










